
csro_6ch_motor_ctrl_2023_06_29.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c64  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d4  080091d4  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  080091d4  080091d4  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091d4  080091d4  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080091dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b64  20000100  080092dc  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  20002c64  080092dc  00022c64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c743  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ad  00000000  00000000  0003c86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  00040e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00042500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3b8  00000000  00000000  000439f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4fb  00000000  00000000  00060db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a45f4  00000000  00000000  0007e2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012289f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e68  00000000  00000000  001228f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000100 	.word	0x20000100
 800020c:	00000000 	.word	0x00000000
 8000210:	08008e3c 	.word	0x08008e3c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000104 	.word	0x20000104
 800022c:	08008e3c 	.word	0x08008e3c

08000230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000236:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <MX_DMA_Init+0x78>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <MX_DMA_Init+0x78>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6153      	str	r3, [r2, #20]
 8000242:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <MX_DMA_Init+0x78>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2105      	movs	r1, #5
 8000252:	200c      	movs	r0, #12
 8000254:	f001 f995 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000258:	200c      	movs	r0, #12
 800025a:	f001 f9ae 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2105      	movs	r1, #5
 8000262:	200e      	movs	r0, #14
 8000264:	f001 f98d 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000268:	200e      	movs	r0, #14
 800026a:	f001 f9a6 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800026e:	2200      	movs	r2, #0
 8000270:	2105      	movs	r1, #5
 8000272:	200f      	movs	r0, #15
 8000274:	f001 f985 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000278:	200f      	movs	r0, #15
 800027a:	f001 f99e 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800027e:	2200      	movs	r2, #0
 8000280:	2105      	movs	r1, #5
 8000282:	2010      	movs	r0, #16
 8000284:	f001 f97d 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000288:	2010      	movs	r0, #16
 800028a:	f001 f996 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	2105      	movs	r1, #5
 8000292:	2011      	movs	r0, #17
 8000294:	f001 f975 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000298:	2011      	movs	r0, #17
 800029a:	f001 f98e 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000

080002ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  fnd_com_modbus_rtu_init();
 80002b0:	f000 fe3a 	bl	8000f28 <fnd_com_modbus_rtu_init>
  ee_init();
 80002b4:	f000 feba 	bl	800102c <ee_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80002b8:	4a14      	ldr	r2, [pc, #80]	; (800030c <MX_FREERTOS_Init+0x60>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	4814      	ldr	r0, [pc, #80]	; (8000310 <MX_FREERTOS_Init+0x64>)
 80002be:	f005 f915 	bl	80054ec <osThreadNew>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <MX_FREERTOS_Init+0x68>)
 80002c6:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80002c8:	4a13      	ldr	r2, [pc, #76]	; (8000318 <MX_FREERTOS_Init+0x6c>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	4813      	ldr	r0, [pc, #76]	; (800031c <MX_FREERTOS_Init+0x70>)
 80002ce:	f005 f90d 	bl	80054ec <osThreadNew>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a12      	ldr	r2, [pc, #72]	; (8000320 <MX_FREERTOS_Init+0x74>)
 80002d6:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80002d8:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_FREERTOS_Init+0x78>)
 80002da:	2100      	movs	r1, #0
 80002dc:	4812      	ldr	r0, [pc, #72]	; (8000328 <MX_FREERTOS_Init+0x7c>)
 80002de:	f005 f905 	bl	80054ec <osThreadNew>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a11      	ldr	r2, [pc, #68]	; (800032c <MX_FREERTOS_Init+0x80>)
 80002e6:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <MX_FREERTOS_Init+0x84>)
 80002ea:	2100      	movs	r1, #0
 80002ec:	4811      	ldr	r0, [pc, #68]	; (8000334 <MX_FREERTOS_Init+0x88>)
 80002ee:	f005 f8fd 	bl	80054ec <osThreadNew>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4a10      	ldr	r2, [pc, #64]	; (8000338 <MX_FREERTOS_Init+0x8c>)
 80002f6:	6013      	str	r3, [r2, #0]

  /* creation of Task05 */
  Task05Handle = osThreadNew(StartTask05, NULL, &Task05_attributes);
 80002f8:	4a10      	ldr	r2, [pc, #64]	; (800033c <MX_FREERTOS_Init+0x90>)
 80002fa:	2100      	movs	r1, #0
 80002fc:	4810      	ldr	r0, [pc, #64]	; (8000340 <MX_FREERTOS_Init+0x94>)
 80002fe:	f005 f8f5 	bl	80054ec <osThreadNew>
 8000302:	4603      	mov	r3, r0
 8000304:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <MX_FREERTOS_Init+0x98>)
 8000306:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	08008e94 	.word	0x08008e94
 8000310:	08000349 	.word	0x08000349
 8000314:	2000011c 	.word	0x2000011c
 8000318:	08008eb8 	.word	0x08008eb8
 800031c:	08000357 	.word	0x08000357
 8000320:	20000120 	.word	0x20000120
 8000324:	08008edc 	.word	0x08008edc
 8000328:	08000365 	.word	0x08000365
 800032c:	20000124 	.word	0x20000124
 8000330:	08008f00 	.word	0x08008f00
 8000334:	0800037d 	.word	0x0800037d
 8000338:	20000128 	.word	0x20000128
 800033c:	08008f24 	.word	0x08008f24
 8000340:	0800038d 	.word	0x0800038d
 8000344:	2000012c 	.word	0x2000012c

08000348 <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave1_wait();
 8000350:	f000 fe58 	bl	8001004 <fnd_com_modbus_rtu_slave1_wait>
 8000354:	e7fc      	b.n	8000350 <StartTask01+0x8>

08000356 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b082      	sub	sp, #8
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave2_wait();
 800035e:	f000 fe5b 	bl	8001018 <fnd_com_modbus_rtu_slave2_wait>
 8000362:	e7fc      	b.n	800035e <StartTask02+0x8>

08000364 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for (;;)
  {
    fnd_input_update_value();
 800036c:	f000 ff08 	bl	8001180 <fnd_input_update_value>
    fnd_output_update_value();
 8000370:	f000 ff37 	bl	80011e2 <fnd_output_update_value>
    osDelay(10);
 8000374:	200a      	movs	r0, #10
 8000376:	f005 f963 	bl	8005640 <osDelay>
    fnd_input_update_value();
 800037a:	e7f7      	b.n	800036c <StartTask03+0x8>

0800037c <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f005 f95b 	bl	8005640 <osDelay>
 800038a:	e7fb      	b.n	8000384 <StartTask04+0x8>

0800038c <StartTask05>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for (;;)
  {
    fnd_led_update();
 8000394:	f000 ff1f 	bl	80011d6 <fnd_led_update>
    osDelay(10);
 8000398:	200a      	movs	r0, #10
 800039a:	f005 f951 	bl	8005640 <osDelay>
    fnd_led_update();
 800039e:	e7f9      	b.n	8000394 <StartTask05+0x8>

080003a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b62      	ldr	r3, [pc, #392]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a61      	ldr	r2, [pc, #388]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b5f      	ldr	r3, [pc, #380]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003cc:	4b5c      	ldr	r3, [pc, #368]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a5b      	ldr	r2, [pc, #364]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003d2:	f043 0310 	orr.w	r3, r3, #16
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b59      	ldr	r3, [pc, #356]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0310 	and.w	r3, r3, #16
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b56      	ldr	r3, [pc, #344]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a55      	ldr	r2, [pc, #340]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b53      	ldr	r3, [pc, #332]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fc:	4b50      	ldr	r3, [pc, #320]	; (8000540 <MX_GPIO_Init+0x1a0>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a4f      	ldr	r2, [pc, #316]	; (8000540 <MX_GPIO_Init+0x1a0>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b4d      	ldr	r3, [pc, #308]	; (8000540 <MX_GPIO_Init+0x1a0>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_DATA_Pin|EN2_Pin|RLY_UP4_Pin|RLY_DN4_Pin
 8000414:	2200      	movs	r2, #0
 8000416:	f240 11f3 	movw	r1, #499	; 0x1f3
 800041a:	484a      	ldr	r0, [pc, #296]	; (8000544 <MX_GPIO_Init+0x1a4>)
 800041c:	f001 ff0b 	bl	8002236 <HAL_GPIO_WritePin>
                          |RLY_UP5_Pin|RLY_DN5_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RLY_UP6_Pin|RLY_DN6_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2130      	movs	r1, #48	; 0x30
 8000424:	4848      	ldr	r0, [pc, #288]	; (8000548 <MX_GPIO_Init+0x1a8>)
 8000426:	f001 ff06 	bl	8002236 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RLY_DN3_Pin|RLY_UP3_Pin|RLY_DN2_Pin|RLY_UP2_Pin
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000430:	4846      	ldr	r0, [pc, #280]	; (800054c <MX_GPIO_Init+0x1ac>)
 8000432:	f001 ff00 	bl	8002236 <HAL_GPIO_WritePin>
                          |RLY_DN1_Pin|RLY_UP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_DATA_Pin;
 8000436:	2301      	movs	r3, #1
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800043e:	2302      	movs	r3, #2
 8000440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000442:	2303      	movs	r3, #3
 8000444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_DATA_GPIO_Port, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	483d      	ldr	r0, [pc, #244]	; (8000544 <MX_GPIO_Init+0x1a4>)
 800044e:	f001 fd47 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = EN2_Pin|RLY_UP4_Pin|RLY_DN4_Pin|RLY_UP5_Pin
 8000452:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8000456:	613b      	str	r3, [r7, #16]
                          |RLY_DN5_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	2301      	movs	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800045c:	2302      	movs	r3, #2
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2302      	movs	r3, #2
 8000462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	4836      	ldr	r0, [pc, #216]	; (8000544 <MX_GPIO_Init+0x1a4>)
 800046c:	f001 fd38 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RLY_UP6_Pin|RLY_DN6_Pin;
 8000470:	2330      	movs	r3, #48	; 0x30
 8000472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000478:	2302      	movs	r3, #2
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2302      	movs	r3, #2
 800047e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	4830      	ldr	r0, [pc, #192]	; (8000548 <MX_GPIO_Init+0x1a8>)
 8000488:	f001 fd2a 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_SIG_Pin;
 800048c:	2301      	movs	r3, #1
 800048e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000490:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <MX_GPIO_Init+0x1b0>)
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_SIG_GPIO_Port, &GPIO_InitStruct);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	482b      	ldr	r0, [pc, #172]	; (800054c <MX_GPIO_Init+0x1ac>)
 80004a0:	f001 fd1e 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEY3_Pin|KEY2_Pin|KEY1_Pin|DI_UP6_Pin
 80004a4:	f64f 4306 	movw	r3, #64518	; 0xfc06
 80004a8:	613b      	str	r3, [r7, #16]
                          |DI_DN6_Pin|DI_UP5_Pin|DI_DN5_Pin|DI_UP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004ae:	2302      	movs	r3, #2
 80004b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	4619      	mov	r1, r3
 80004b8:	4824      	ldr	r0, [pc, #144]	; (800054c <MX_GPIO_Init+0x1ac>)
 80004ba:	f001 fd11 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_DN4_Pin|DI_UP3_Pin|DI_DN3_Pin|DI_UP2_Pin
 80004be:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 80004c2:	613b      	str	r3, [r7, #16]
                          |DI_UP7_Pin|DI_DN7_Pin|DI_UP8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	481d      	ldr	r0, [pc, #116]	; (8000548 <MX_GPIO_Init+0x1a8>)
 80004d4:	f001 fd04 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_DN2_Pin|DI_UP1_Pin|DI_DN1_Pin;
 80004d8:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80004dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004e2:	2302      	movs	r3, #2
 80004e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4815      	ldr	r0, [pc, #84]	; (8000544 <MX_GPIO_Init+0x1a4>)
 80004ee:	f001 fcf7 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_DN8_Pin;
 80004f2:	2304      	movs	r3, #4
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DI_DN8_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4813      	ldr	r0, [pc, #76]	; (8000554 <MX_GPIO_Init+0x1b4>)
 8000506:	f001 fceb 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RLY_DN3_Pin|RLY_UP3_Pin|RLY_DN2_Pin|RLY_UP2_Pin
 800050a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800050e:	613b      	str	r3, [r7, #16]
                          |RLY_DN1_Pin|RLY_UP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000514:	2302      	movs	r3, #2
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2302      	movs	r3, #2
 800051a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	480a      	ldr	r0, [pc, #40]	; (800054c <MX_GPIO_Init+0x1ac>)
 8000524:	f001 fcdc 	bl	8001ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2105      	movs	r1, #5
 800052c:	2006      	movs	r0, #6
 800052e:	f001 f828 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000532:	2006      	movs	r0, #6
 8000534:	f001 f841 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	40010800 	.word	0x40010800
 8000548:	40011000 	.word	0x40011000
 800054c:	40010c00 	.word	0x40010c00
 8000550:	10110000 	.word	0x10110000
 8000554:	40011400 	.word	0x40011400

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 ff2a 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f813 	bl	800058a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f7ff ff1c 	bl	80003a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000568:	f7ff fe62 	bl	8000230 <MX_DMA_Init>
  MX_TIM2_Init();
 800056c:	f000 f99c 	bl	80008a8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000570:	f000 faa0 	bl	8000ab4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000574:	f000 fac8 	bl	8000b08 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000578:	f000 f9e2 	bl	8000940 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800057c:	f004 ff50 	bl	8005420 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000580:	f7ff fe94 	bl	80002ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000584:	f004 ff7e 	bl	8005484 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x30>

0800058a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b090      	sub	sp, #64	; 0x40
 800058e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	2228      	movs	r2, #40	; 0x28
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f008 fb89 	bl	8008cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005bc:	2300      	movs	r3, #0
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80005c0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80005c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0318 	add.w	r3, r7, #24
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fe6e 	bl	80022ac <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005d6:	f000 f82b 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2102      	movs	r1, #2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 f8db 	bl	80027b0 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000600:	f000 f816 	bl	8000630 <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3740      	adds	r7, #64	; 0x40
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d101      	bne.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800061e:	f000 fedf 	bl	80013e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40013400 	.word	0x40013400

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	e7fe      	b.n	8000638 <Error_Handler+0x8>
	...

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <HAL_MspInit+0x68>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <HAL_MspInit+0x68>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6193      	str	r3, [r2, #24]
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_MspInit+0x68>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_MspInit+0x68>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <HAL_MspInit+0x68>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_MspInit+0x68>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	210f      	movs	r1, #15
 8000676:	f06f 0001 	mvn.w	r0, #1
 800067a:	f000 ff82 	bl	8001582 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_MspInit+0x6c>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_MspInit+0x6c>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010000 	.word	0x40010000

080006ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <HAL_InitTick+0xd0>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a2d      	ldr	r2, [pc, #180]	; (800077c <HAL_InitTick+0xd0>)
 80006c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <HAL_InitTick+0xd0>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006da:	f107 020c 	add.w	r2, r7, #12
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f9d3 	bl	8002a90 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006ea:	f002 f9bd 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 80006ee:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <HAL_InitTick+0xd4>)
 80006f4:	fba2 2303 	umull	r2, r3, r2, r3
 80006f8:	0c9b      	lsrs	r3, r3, #18
 80006fa:	3b01      	subs	r3, #1
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <HAL_InitTick+0xd8>)
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <HAL_InitTick+0xdc>)
 8000702:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <HAL_InitTick+0xd8>)
 8000706:	f240 32e7 	movw	r2, #999	; 0x3e7
 800070a:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 800070c:	4a1d      	ldr	r2, [pc, #116]	; (8000784 <HAL_InitTick+0xd8>)
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <HAL_InitTick+0xd8>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <HAL_InitTick+0xd8>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <HAL_InitTick+0xd8>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 8000724:	4817      	ldr	r0, [pc, #92]	; (8000784 <HAL_InitTick+0xd8>)
 8000726:	f002 fa01 	bl	8002b2c <HAL_TIM_Base_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000734:	2b00      	cmp	r3, #0
 8000736:	d11b      	bne.n	8000770 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <HAL_InitTick+0xd8>)
 800073a:	f002 fac5 	bl	8002cc8 <HAL_TIM_Base_Start_IT>
 800073e:	4603      	mov	r3, r0
 8000740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000748:	2b00      	cmp	r3, #0
 800074a:	d111      	bne.n	8000770 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 800074c:	202c      	movs	r0, #44	; 0x2c
 800074e:	f000 ff34 	bl	80015ba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d808      	bhi.n	800076a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 8000758:	2200      	movs	r2, #0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	202c      	movs	r0, #44	; 0x2c
 800075e:	f000 ff10 	bl	8001582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_InitTick+0xe0>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	e002      	b.n	8000770 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000774:	4618      	mov	r0, r3
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	431bde83 	.word	0x431bde83
 8000784:	20000130 	.word	0x20000130
 8000788:	40013400 	.word	0x40013400
 800078c:	20000090 	.word	0x20000090

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  fnd_rf433_signal_received();
 80007be:	f000 fdd5 	bl	800136c <fnd_rf433_signal_received>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_SIG_Pin);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f001 fd50 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <DMA1_Channel2_IRQHandler+0x10>)
 80007d2:	f001 f91b 	bl	8001a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000208 	.word	0x20000208

080007e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <DMA1_Channel4_IRQHandler+0x10>)
 80007e6:	f001 f911 	bl	8001a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000320 	.word	0x20000320

080007f4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <DMA1_Channel5_IRQHandler+0x10>)
 80007fa:	f001 f907 	bl	8001a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200002dc 	.word	0x200002dc

08000808 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <DMA1_Channel6_IRQHandler+0x10>)
 800080e:	f001 f8fd 	bl	8001a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000364 	.word	0x20000364

0800081c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <DMA1_Channel7_IRQHandler+0x10>)
 8000822:	f001 f8f3 	bl	8001a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200003a8 	.word	0x200003a8

08000830 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <TIM2_IRQHandler+0x10>)
 8000836:	f002 faa7 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000178 	.word	0x20000178

08000844 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <TIM3_IRQHandler+0x10>)
 800084a:	f002 fa9d 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001c0 	.word	0x200001c0

08000858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart1);
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <USART1_IRQHandler+0x14>)
 800085e:	f000 fb7d 	bl	8000f5c <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <USART1_IRQHandler+0x14>)
 8000864:	f002 ff76 	bl	8003754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000024c 	.word	0x2000024c

08000870 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart2);
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <USART2_IRQHandler+0x14>)
 8000876:	f000 fb71 	bl	8000f5c <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800087a:	4802      	ldr	r0, [pc, #8]	; (8000884 <USART2_IRQHandler+0x14>)
 800087c:	f002 ff6a 	bl	8003754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000294 	.word	0x20000294

08000888 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <TIM8_UP_IRQHandler+0x10>)
 800088e:	f002 fa7b 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000130 	.word	0x20000130

0800089c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim2_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_TIM2_Init+0x94>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_TIM2_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_TIM2_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_TIM2_Init+0x94>)
 80008da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_TIM2_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_TIM2_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ec:	4813      	ldr	r0, [pc, #76]	; (800093c <MX_TIM2_Init+0x94>)
 80008ee:	f002 f91d 	bl	8002b2c <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008f8:	f7ff fe9a 	bl	8000630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_TIM2_Init+0x94>)
 800090a:	f002 fb45 	bl	8002f98 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000914:	f7ff fe8c 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_TIM2_Init+0x94>)
 8000926:	f002 fd33 	bl	8003390 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000930:	f7ff fe7e 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000178 	.word	0x20000178

08000940 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM3_Init+0x94>)
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <MX_TIM3_Init+0x98>)
 8000960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_TIM3_Init+0x94>)
 8000964:	223f      	movs	r2, #63	; 0x3f
 8000966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM3_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_TIM3_Init+0x94>)
 8000970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000974:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_TIM3_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM3_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000982:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_TIM3_Init+0x94>)
 8000984:	f002 f8d2 	bl	8002b2c <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800098e:	f7ff fe4f 	bl	8000630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_TIM3_Init+0x94>)
 80009a0:	f002 fafa 	bl	8002f98 <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f7ff fe41 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_TIM3_Init+0x94>)
 80009bc:	f002 fce8 	bl	8003390 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009c6:	f7ff fe33 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200001c0 	.word	0x200001c0
 80009d8:	40000400 	.word	0x40000400

080009dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ec:	d13c      	bne.n	8000a68 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <HAL_TIM_Base_MspInit+0xc8>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a2c      	ldr	r2, [pc, #176]	; (8000aa4 <HAL_TIM_Base_MspInit+0xc8>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <HAL_TIM_Base_MspInit+0xc8>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a08:	4a28      	ldr	r2, [pc, #160]	; (8000aac <HAL_TIM_Base_MspInit+0xd0>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a0e:	2210      	movs	r2, #16
 8000a10:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a24:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a2c:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000a3a:	481b      	ldr	r0, [pc, #108]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a3c:	f000 fdcc 	bl	80015d8 <HAL_DMA_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000a46:	f7ff fdf3 	bl	8000630 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a4e:	621a      	str	r2, [r3, #32]
 8000a50:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2105      	movs	r1, #5
 8000a5a:	201c      	movs	r0, #28
 8000a5c:	f000 fd91 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a60:	201c      	movs	r0, #28
 8000a62:	f000 fdaa 	bl	80015ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a66:	e018      	b.n	8000a9a <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM3)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_TIM_Base_MspInit+0xd4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d113      	bne.n	8000a9a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	201d      	movs	r0, #29
 8000a90:	f000 fd77 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a94:	201d      	movs	r0, #29
 8000a96:	f000 fd90 	bl	80015ba <HAL_NVIC_EnableIRQ>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	20000208 	.word	0x20000208
 8000aac:	4002001c 	.word	0x4002001c
 8000ab0:	40000400 	.word	0x40000400

08000ab4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_USART1_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000aec:	f002 fcce 	bl	800348c <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f7ff fd9b 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000024c 	.word	0x2000024c
 8000b04:	40013800 	.word	0x40013800

08000b08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_USART2_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f002 fca4 	bl	800348c <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f7ff fd71 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000294 	.word	0x20000294
 8000b58:	40004400 	.word	0x40004400

08000b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a8c      	ldr	r2, [pc, #560]	; (8000da8 <HAL_UART_MspInit+0x24c>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	f040 8087 	bne.w	8000c8c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b7e:	4b8b      	ldr	r3, [pc, #556]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	4a8a      	ldr	r2, [pc, #552]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6193      	str	r3, [r2, #24]
 8000b8a:	4b88      	ldr	r3, [pc, #544]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b85      	ldr	r3, [pc, #532]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a84      	ldr	r2, [pc, #528]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b82      	ldr	r3, [pc, #520]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	487b      	ldr	r0, [pc, #492]	; (8000db0 <HAL_UART_MspInit+0x254>)
 8000bc4:	f001 f98c 	bl	8001ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4874      	ldr	r0, [pc, #464]	; (8000db0 <HAL_UART_MspInit+0x254>)
 8000bde:	f001 f97f 	bl	8001ee0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000be2:	4b74      	ldr	r3, [pc, #464]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000be4:	4a74      	ldr	r2, [pc, #464]	; (8000db8 <HAL_UART_MspInit+0x25c>)
 8000be6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be8:	4b72      	ldr	r3, [pc, #456]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bee:	4b71      	ldr	r3, [pc, #452]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf4:	4b6f      	ldr	r3, [pc, #444]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bfa:	4b6e      	ldr	r3, [pc, #440]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c00:	4b6c      	ldr	r3, [pc, #432]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c06:	4b6b      	ldr	r3, [pc, #428]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000c08:	2220      	movs	r2, #32
 8000c0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c0c:	4b69      	ldr	r3, [pc, #420]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c12:	4868      	ldr	r0, [pc, #416]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000c14:	f000 fce0 	bl	80015d8 <HAL_DMA_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000c1e:	f7ff fd07 	bl	8000630 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a63      	ldr	r2, [pc, #396]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000c26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c28:	4a62      	ldr	r2, [pc, #392]	; (8000db4 <HAL_UART_MspInit+0x258>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000c2e:	4b63      	ldr	r3, [pc, #396]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c30:	4a63      	ldr	r2, [pc, #396]	; (8000dc0 <HAL_UART_MspInit+0x264>)
 8000c32:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c34:	4b61      	ldr	r3, [pc, #388]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c36:	2210      	movs	r2, #16
 8000c38:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3a:	4b60      	ldr	r3, [pc, #384]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c40:	4b5e      	ldr	r3, [pc, #376]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c46:	4b5d      	ldr	r3, [pc, #372]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c4c:	4b5b      	ldr	r3, [pc, #364]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c52:	4b5a      	ldr	r3, [pc, #360]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c58:	4b58      	ldr	r3, [pc, #352]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c5e:	4857      	ldr	r0, [pc, #348]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c60:	f000 fcba 	bl	80015d8 <HAL_DMA_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000c6a:	f7ff fce1 	bl	8000630 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a52      	ldr	r2, [pc, #328]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c72:	639a      	str	r2, [r3, #56]	; 0x38
 8000c74:	4a51      	ldr	r2, [pc, #324]	; (8000dbc <HAL_UART_MspInit+0x260>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	2025      	movs	r0, #37	; 0x25
 8000c80:	f000 fc7f 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c84:	2025      	movs	r0, #37	; 0x25
 8000c86:	f000 fc98 	bl	80015ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c8a:	e089      	b.n	8000da0 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a4c      	ldr	r2, [pc, #304]	; (8000dc4 <HAL_UART_MspInit+0x268>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	f040 8084 	bne.w	8000da0 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c98:	4b44      	ldr	r3, [pc, #272]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	4a43      	ldr	r2, [pc, #268]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca2:	61d3      	str	r3, [r2, #28]
 8000ca4:	4b41      	ldr	r3, [pc, #260]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a3d      	ldr	r2, [pc, #244]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <HAL_UART_MspInit+0x250>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4835      	ldr	r0, [pc, #212]	; (8000db0 <HAL_UART_MspInit+0x254>)
 8000cdc:	f001 f900 	bl	8001ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	482f      	ldr	r0, [pc, #188]	; (8000db0 <HAL_UART_MspInit+0x254>)
 8000cf4:	f001 f8f4 	bl	8001ee0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000cfa:	4a34      	ldr	r2, [pc, #208]	; (8000dcc <HAL_UART_MspInit+0x270>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfe:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d04:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d1e:	2220      	movs	r2, #32
 8000d20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d28:	4827      	ldr	r0, [pc, #156]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d2a:	f000 fc55 	bl	80015d8 <HAL_DMA_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000d34:	f7ff fc7c 	bl	8000630 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <HAL_UART_MspInit+0x26c>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d46:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <HAL_UART_MspInit+0x278>)
 8000d48:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d74:	4816      	ldr	r0, [pc, #88]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d76:	f000 fc2f 	bl	80015d8 <HAL_DMA_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000d80:	f7ff fc56 	bl	8000630 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0x274>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2105      	movs	r1, #5
 8000d94:	2026      	movs	r0, #38	; 0x26
 8000d96:	f000 fbf4 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d9a:	2026      	movs	r0, #38	; 0x26
 8000d9c:	f000 fc0d 	bl	80015ba <HAL_NVIC_EnableIRQ>
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40013800 	.word	0x40013800
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	200002dc 	.word	0x200002dc
 8000db8:	40020058 	.word	0x40020058
 8000dbc:	20000320 	.word	0x20000320
 8000dc0:	40020044 	.word	0x40020044
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	20000364 	.word	0x20000364
 8000dcc:	4002006c 	.word	0x4002006c
 8000dd0:	200003a8 	.word	0x200003a8
 8000dd4:	40020080 	.word	0x40020080

08000dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd8:	f7ff fd60 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dde:	490c      	ldr	r1, [pc, #48]	; (8000e10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000df4:	4c09      	ldr	r4, [pc, #36]	; (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f007 ff23 	bl	8008c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e06:	f7ff fba7 	bl	8000558 <main>
  bx lr
 8000e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000e14:	080091dc 	.word	0x080091dc
  ldr r2, =_sbss
 8000e18:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000e1c:	20002c64 	.word	0x20002c64

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>

08000e22 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d104      	bne.n	8000e3a <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
 8000e34:	f7ff fbfc 	bl	8000630 <Error_Handler>
 8000e38:	e7fe      	b.n	8000e38 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7a1b      	ldrb	r3, [r3, #8]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d904      	bls.n	8000e4c <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e42:	b672      	cpsid	i
}
 8000e44:	bf00      	nop
 8000e46:	f7ff fbf3 	bl	8000630 <Error_Handler>
 8000e4a:	e7fe      	b.n	8000e4a <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7a1b      	ldrb	r3, [r3, #8]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	b2d1      	uxtb	r1, r2
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	7211      	strb	r1, [r2, #8]
 8000e58:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000e5a:	f3ef 8211 	mrs	r2, BASEPRI
 8000e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e62:	f383 8811 	msr	BASEPRI, r3
 8000e66:	f3bf 8f6f 	isb	sy
 8000e6a:	f3bf 8f4f 	dsb	sy
 8000e6e:	60fa      	str	r2, [r7, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d104      	bne.n	8000e9a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
 8000e94:	f7ff fbcc 	bl	8000630 <Error_Handler>
 8000e98:	e7fe      	b.n	8000e98 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7a1b      	ldrb	r3, [r3, #8]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7a1b      	ldrb	r3, [r3, #8]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d904      	bls.n	8000eb8 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000eae:	b672      	cpsid	i
}
 8000eb0:	bf00      	nop
 8000eb2:	f7ff fbbd 	bl	8000630 <Error_Handler>
 8000eb6:	e7fe      	b.n	8000eb6 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7a1b      	ldrb	r3, [r3, #8]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000ecc:	bf00      	nop
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d104      	bne.n	8000eee <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
 8000ee8:	f7ff fba2 	bl	8000630 <Error_Handler>
 8000eec:	e7fe      	b.n	8000eec <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff96 	bl	8000e22 <stm32_lock_acquire>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d104      	bne.n	8000f16 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
 8000f10:	f7ff fb8e 	bl	8000630 <Error_Handler>
 8000f14:	e7fe      	b.n	8000f14 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffb2 	bl	8000e82 <stm32_lock_release>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <fnd_com_modbus_rtu_init>:
};

modbus_slave slaves[2];

void fnd_com_modbus_rtu_init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    slave_init(&slaves[0], &port[0], 1, &sys_regs);
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <fnd_com_modbus_rtu_init+0x20>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4906      	ldr	r1, [pc, #24]	; (8000f4c <fnd_com_modbus_rtu_init+0x24>)
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <fnd_com_modbus_rtu_init+0x28>)
 8000f34:	f004 f9aa 	bl	800528c <slave_init>
    slave_init(&slaves[1], &port[1], 2, &sys_regs);
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <fnd_com_modbus_rtu_init+0x20>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4905      	ldr	r1, [pc, #20]	; (8000f54 <fnd_com_modbus_rtu_init+0x2c>)
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <fnd_com_modbus_rtu_init+0x30>)
 8000f40:	f004 f9a4 	bl	800528c <slave_init>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200003f8 	.word	0x200003f8
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	20000598 	.word	0x20000598
 8000f54:	20000010 	.word	0x20000010
 8000f58:	200007b8 	.word	0x200007b8

08000f5c <fnd_com_modbus_rtu_uart_idle_irq>:
void fnd_com_modbus_rtu_uart_idle_irq(UART_HandleTypeDef *huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <fnd_com_modbus_rtu_uart_idle_irq+0x58>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d113      	bne.n	8000f98 <fnd_com_modbus_rtu_uart_idle_irq+0x3c>
    {
        if (sys_regs.holdings[42] > 0 && sys_regs.holdings[42] < 255)
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <fnd_com_modbus_rtu_uart_idle_irq+0x5c>)
 8000f72:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dd0a      	ble.n	8000f90 <fnd_com_modbus_rtu_uart_idle_irq+0x34>
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <fnd_com_modbus_rtu_uart_idle_irq+0x5c>)
 8000f7c:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8000f80:	2bfe      	cmp	r3, #254	; 0xfe
 8000f82:	dc05      	bgt.n	8000f90 <fnd_com_modbus_rtu_uart_idle_irq+0x34>
        {
            slaves[0].slave_id = sys_regs.holdings[42];
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <fnd_com_modbus_rtu_uart_idle_irq+0x5c>)
 8000f86:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <fnd_com_modbus_rtu_uart_idle_irq+0x58>)
 8000f8e:	711a      	strb	r2, [r3, #4]
        }
        slave_uart_idle(&slaves[0]);
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <fnd_com_modbus_rtu_uart_idle_irq+0x58>)
 8000f92:	f004 f9b3 	bl	80052fc <slave_uart_idle>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_uart_idle(&slaves[1]);
    }
}
 8000f96:	e009      	b.n	8000fac <fnd_com_modbus_rtu_uart_idle_irq+0x50>
    else if (huart == slaves[1].uart_port->uart)
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <fnd_com_modbus_rtu_uart_idle_irq+0x58>)
 8000f9a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d102      	bne.n	8000fac <fnd_com_modbus_rtu_uart_idle_irq+0x50>
        slave_uart_idle(&slaves[1]);
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <fnd_com_modbus_rtu_uart_idle_irq+0x60>)
 8000fa8:	f004 f9a8 	bl	80052fc <slave_uart_idle>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000598 	.word	0x20000598
 8000fb8:	200003f8 	.word	0x200003f8
 8000fbc:	200007b8 	.word	0x200007b8

08000fc0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_UART_TxCpltCallback+0x3c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d104      	bne.n	8000fde <HAL_UART_TxCpltCallback+0x1e>
    {
        slave_set_tx_rx(&slaves[0], rx);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4809      	ldr	r0, [pc, #36]	; (8000ffc <HAL_UART_TxCpltCallback+0x3c>)
 8000fd8:	f004 f9d0 	bl	800537c <slave_set_tx_rx>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_set_tx_rx(&slaves[1], rx);
    }
}
 8000fdc:	e00a      	b.n	8000ff4 <HAL_UART_TxCpltCallback+0x34>
    else if (huart == slaves[1].uart_port->uart)
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_UART_TxCpltCallback+0x3c>)
 8000fe0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d103      	bne.n	8000ff4 <HAL_UART_TxCpltCallback+0x34>
        slave_set_tx_rx(&slaves[1], rx);
 8000fec:	2100      	movs	r1, #0
 8000fee:	4804      	ldr	r0, [pc, #16]	; (8001000 <HAL_UART_TxCpltCallback+0x40>)
 8000ff0:	f004 f9c4 	bl	800537c <slave_set_tx_rx>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000598 	.word	0x20000598
 8001000:	200007b8 	.word	0x200007b8

08001004 <fnd_com_modbus_rtu_slave1_wait>:

void fnd_com_modbus_rtu_slave1_wait(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[0]);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <fnd_com_modbus_rtu_slave1_wait+0x10>)
 800100a:	f004 f9d0 	bl	80053ae <slave_wait_request>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000598 	.word	0x20000598

08001018 <fnd_com_modbus_rtu_slave2_wait>:
void fnd_com_modbus_rtu_slave2_wait(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[1]);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <fnd_com_modbus_rtu_slave2_wait+0x10>)
 800101e:	f004 f9c6 	bl	80053ae <slave_wait_request>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200007b8 	.word	0x200007b8

0800102c <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

// ##########################################################################################################
bool ee_init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f804 	bl	8001044 <ee_read>
 800103c:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <ee_read>:
  HAL_FLASH_Lock();
  return false;
}
// ##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800105a:	d901      	bls.n	8001060 <ee_read+0x1c>
    return false;
 800105c:	2300      	movs	r3, #0
 800105e:	e02b      	b.n	80010b8 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e021      	b.n	80010aa <ee_read+0x66>
  {
    if (data != NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00b      	beq.n	8001084 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t *)(i + _EE_ADDR_INUSE));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001072:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	701a      	strb	r2, [r3, #0]
      data++;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3301      	adds	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800108a:	d20b      	bcs.n	80010a4 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t *)(i + _EE_ADDR_INUSE));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001092:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2d9      	uxtb	r1, r3
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <ee_read+0x80>)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	4413      	add	r3, r2
 80010a0:	460a      	mov	r2, r1
 80010a2:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3d7      	bcc.n	8001066 <ee_read+0x22>
#endif
  }
  return true;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200009d8 	.word	0x200009d8

080010c8 <fnd_input_gpio_read_user_keys>:
                                   DI_UP6_Pin, DI_DN6_Pin,
                                   DI_UP7_Pin, DI_DN7_Pin,
                                   DI_UP8_Pin, DI_DN8_Pin};

void fnd_input_gpio_read_user_keys(int16_t *values)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < USER_KEY_NUMBER; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e01a      	b.n	800110c <fnd_input_gpio_read_user_keys+0x44>
    {
        values[i] = (HAL_GPIO_ReadPin(key_port[i], key_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	4a10      	ldr	r2, [pc, #64]	; (800111c <fnd_input_gpio_read_user_keys+0x54>)
 80010da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	490f      	ldr	r1, [pc, #60]	; (8001120 <fnd_input_gpio_read_user_keys+0x58>)
 80010e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4610      	mov	r0, r2
 80010ea:	f001 f88d 	bl	8002208 <HAL_GPIO_ReadPin>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	bf0c      	ite	eq
 80010f4:	2301      	moveq	r3, #1
 80010f6:	2300      	movne	r3, #0
 80010f8:	b2d9      	uxtb	r1, r3
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	b20a      	sxth	r2, r1
 8001104:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < USER_KEY_NUMBER; i++)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3301      	adds	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d9e1      	bls.n	80010d6 <fnd_input_gpio_read_user_keys+0xe>
    }
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000001c 	.word	0x2000001c
 8001120:	20000028 	.word	0x20000028

08001124 <fnd_input_gpio_read_user_di>:

void fnd_input_gpio_read_user_di(int16_t *values)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < USER_DI_NUMBER; i++)
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e01a      	b.n	8001168 <fnd_input_gpio_read_user_di+0x44>
    {
        values[i] = (HAL_GPIO_ReadPin(di_port[i], di_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <fnd_input_gpio_read_user_di+0x54>)
 8001136:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	490f      	ldr	r1, [pc, #60]	; (800117c <fnd_input_gpio_read_user_di+0x58>)
 800113e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f001 f85f 	bl	8002208 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	2b01      	cmp	r3, #1
 800114e:	bf0c      	ite	eq
 8001150:	2301      	moveq	r3, #1
 8001152:	2300      	movne	r3, #0
 8001154:	b2d9      	uxtb	r1, r3
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	b20a      	sxth	r2, r1
 8001160:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < USER_DI_NUMBER; i++)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	3301      	adds	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	d9e1      	bls.n	8001132 <fnd_input_gpio_read_user_di+0xe>
    }
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000030 	.word	0x20000030
 800117c:	20000070 	.word	0x20000070

08001180 <fnd_input_update_value>:

void fnd_input_update_value(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0
    int16_t di_result[16];
    fnd_input_gpio_read_user_di(di_result);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ffca 	bl	8001124 <fnd_input_gpio_read_user_di>
    for (uint8_t i = 0; i < 8; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001196:	e004      	b.n	80011a2 <fnd_input_update_value+0x22>
 8001198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800119c:	3301      	adds	r3, #1
 800119e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011a6:	2b07      	cmp	r3, #7
 80011a8:	d9f6      	bls.n	8001198 <fnd_input_update_value+0x18>
        // panels[i].up_btn = di_result[2 * i + 0];
        // panels[i].dn_btn = di_result[2 * i + 1];
    }

    int16_t keys_result[3];
    fnd_input_gpio_read_user_keys(keys_result);
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff8b 	bl	80010c8 <fnd_input_gpio_read_user_keys>
    for (uint8_t i = 0; i < 3; i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80011b8:	e004      	b.n	80011c4 <fnd_input_update_value+0x44>
 80011ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011be:	3301      	adds	r3, #1
 80011c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80011c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d9f6      	bls.n	80011ba <fnd_input_update_value+0x3a>
    {
        // sys_regs.inputs[22 - i] = keys_result[i];
    }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <fnd_led_update>:
void fnd_led_init(void)
{
}

void fnd_led_update(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <fnd_output_update_value>:
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}

void fnd_output_update_value(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
    // fnd_output_gpio_write_relays(&sys_regs.inputs[30]);
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
	...

080011f0 <fnd_rf433_handle_duration>:

uint64_t rf_cmd[10];
uint8_t cmd_idx = 0;

void fnd_rf433_handle_duration(uint32_t duration)
{
 80011f0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80011f4:	b087      	sub	sp, #28
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
	static uint8_t rf_data_valid = 0;
	static uint8_t rf_data_idx = 0;
	static uint8_t rf_data[40];

	if (rf_data_valid == 0)
 80011fa:	4b56      	ldr	r3, [pc, #344]	; (8001354 <fnd_rf433_handle_duration+0x164>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d112      	bne.n	8001228 <fnd_rf433_handle_duration+0x38>
	{
		if (duration > 3500 && duration < 6500)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001208:	4293      	cmp	r3, r2
 800120a:	f240 809c 	bls.w	8001346 <fnd_rf433_handle_duration+0x156>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f641 1263 	movw	r2, #6499	; 0x1963
 8001214:	4293      	cmp	r3, r2
 8001216:	f200 8096 	bhi.w	8001346 <fnd_rf433_handle_duration+0x156>
		{
			rf_data_valid = 1;
 800121a:	4b4e      	ldr	r3, [pc, #312]	; (8001354 <fnd_rf433_handle_duration+0x164>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
			rf_data_idx = 0;
 8001220:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <fnd_rf433_handle_duration+0x168>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
				}
			}
			cmd_idx = (cmd_idx + 1) % 10;
		}
	}
}
 8001226:	e08e      	b.n	8001346 <fnd_rf433_handle_duration+0x156>
		if (duration > 250 && duration < 350)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2bfa      	cmp	r3, #250	; 0xfa
 800122c:	d910      	bls.n	8001250 <fnd_rf433_handle_duration+0x60>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001234:	d20c      	bcs.n	8001250 <fnd_rf433_handle_duration+0x60>
			rf_data[rf_data_idx] = 0;
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <fnd_rf433_handle_duration+0x168>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	4b47      	ldr	r3, [pc, #284]	; (800135c <fnd_rf433_handle_duration+0x16c>)
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]
			rf_data_idx++;
 8001242:	4b45      	ldr	r3, [pc, #276]	; (8001358 <fnd_rf433_handle_duration+0x168>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b43      	ldr	r3, [pc, #268]	; (8001358 <fnd_rf433_handle_duration+0x168>)
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e019      	b.n	8001284 <fnd_rf433_handle_duration+0x94>
		else if (duration > 650 && duration < 750)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f240 228a 	movw	r2, #650	; 0x28a
 8001256:	4293      	cmp	r3, r2
 8001258:	d911      	bls.n	800127e <fnd_rf433_handle_duration+0x8e>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001260:	4293      	cmp	r3, r2
 8001262:	d80c      	bhi.n	800127e <fnd_rf433_handle_duration+0x8e>
			rf_data[rf_data_idx] = 1;
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <fnd_rf433_handle_duration+0x168>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b3c      	ldr	r3, [pc, #240]	; (800135c <fnd_rf433_handle_duration+0x16c>)
 800126c:	2101      	movs	r1, #1
 800126e:	5499      	strb	r1, [r3, r2]
			rf_data_idx++;
 8001270:	4b39      	ldr	r3, [pc, #228]	; (8001358 <fnd_rf433_handle_duration+0x168>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b37      	ldr	r3, [pc, #220]	; (8001358 <fnd_rf433_handle_duration+0x168>)
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e002      	b.n	8001284 <fnd_rf433_handle_duration+0x94>
			rf_data_valid = 0;
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <fnd_rf433_handle_duration+0x164>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
		if (rf_data_idx == 40)
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <fnd_rf433_handle_duration+0x168>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b28      	cmp	r3, #40	; 0x28
 800128a:	d15c      	bne.n	8001346 <fnd_rf433_handle_duration+0x156>
			rf_data_valid = 0;
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <fnd_rf433_handle_duration+0x164>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
			rf_cmd[cmd_idx] = 0;
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <fnd_rf433_handle_duration+0x170>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4a33      	ldr	r2, [pc, #204]	; (8001364 <fnd_rf433_handle_duration+0x174>)
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	18d1      	adds	r1, r2, r3
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e9c1 2300 	strd	r2, r3, [r1]
			for (uint8_t i = 0; i < 40; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
 80012ac:	e037      	b.n	800131e <fnd_rf433_handle_duration+0x12e>
				if (rf_data[i] == 0)
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <fnd_rf433_handle_duration+0x16c>)
 80012b2:	5cd3      	ldrb	r3, [r2, r3]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d118      	bne.n	80012ea <fnd_rf433_handle_duration+0xfa>
					rf_cmd[cmd_idx] = (rf_cmd[cmd_idx] << 1) & (uint64_t)0xFFFFFFFFFE;
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <fnd_rf433_handle_duration+0x170>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4a29      	ldr	r2, [pc, #164]	; (8001364 <fnd_rf433_handle_duration+0x174>)
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4413      	add	r3, r2
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	eb12 0a02 	adds.w	sl, r2, r2
 80012ca:	eb43 0b03 	adc.w	fp, r3, r3
 80012ce:	4652      	mov	r2, sl
 80012d0:	465b      	mov	r3, fp
 80012d2:	4923      	ldr	r1, [pc, #140]	; (8001360 <fnd_rf433_handle_duration+0x170>)
 80012d4:	7809      	ldrb	r1, [r1, #0]
 80012d6:	f022 0401 	bic.w	r4, r2, #1
 80012da:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <fnd_rf433_handle_duration+0x174>)
 80012e0:	00cb      	lsls	r3, r1, #3
 80012e2:	4413      	add	r3, r2
 80012e4:	e9c3 4500 	strd	r4, r5, [r3]
 80012e8:	e016      	b.n	8001318 <fnd_rf433_handle_duration+0x128>
					rf_cmd[cmd_idx] = (rf_cmd[cmd_idx] << 1) | (uint64_t)0x01;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <fnd_rf433_handle_duration+0x170>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <fnd_rf433_handle_duration+0x174>)
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	1891      	adds	r1, r2, r2
 80012fa:	6039      	str	r1, [r7, #0]
 80012fc:	415b      	adcs	r3, r3
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001304:	4916      	ldr	r1, [pc, #88]	; (8001360 <fnd_rf433_handle_duration+0x170>)
 8001306:	7809      	ldrb	r1, [r1, #0]
 8001308:	f042 0801 	orr.w	r8, r2, #1
 800130c:	4699      	mov	r9, r3
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <fnd_rf433_handle_duration+0x174>)
 8001310:	00cb      	lsls	r3, r1, #3
 8001312:	4413      	add	r3, r2
 8001314:	e9c3 8900 	strd	r8, r9, [r3]
			for (uint8_t i = 0; i < 40; i++)
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	3301      	adds	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	2b27      	cmp	r3, #39	; 0x27
 8001322:	d9c4      	bls.n	80012ae <fnd_rf433_handle_duration+0xbe>
			cmd_idx = (cmd_idx + 1) % 10;
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <fnd_rf433_handle_duration+0x170>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <fnd_rf433_handle_duration+0x178>)
 800132c:	fb83 1302 	smull	r1, r3, r3, r2
 8001330:	1099      	asrs	r1, r3, #2
 8001332:	17d3      	asrs	r3, r2, #31
 8001334:	1ac9      	subs	r1, r1, r3
 8001336:	460b      	mov	r3, r1
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	1ad1      	subs	r1, r2, r3
 8001340:	b2ca      	uxtb	r2, r1
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <fnd_rf433_handle_duration+0x170>)
 8001344:	701a      	strb	r2, [r3, #0]
}
 8001346:	bf00      	nop
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000e29 	.word	0x20000e29
 8001358:	20000e2a 	.word	0x20000e2a
 800135c:	20000e2c 	.word	0x20000e2c
 8001360:	20000e28 	.word	0x20000e28
 8001364:	20000dd8 	.word	0x20000dd8
 8001368:	66666667 	.word	0x66666667

0800136c <fnd_rf433_signal_received>:

void fnd_rf433_signal_received(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(RF_SIG_GPIO_Port, RF_SIG_Pin) == GPIO_PIN_SET)
 8001372:	2101      	movs	r1, #1
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <fnd_rf433_signal_received+0x40>)
 8001376:	f000 ff47 	bl	8002208 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d107      	bne.n	8001390 <fnd_rf433_signal_received+0x24>
	{
		htim3.Instance->CNT = 0;
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <fnd_rf433_signal_received+0x44>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim3);
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <fnd_rf433_signal_received+0x44>)
 800138a:	f001 fc1f 	bl	8002bcc <HAL_TIM_Base_Start>
	{
		HAL_TIM_Base_Stop(&htim3);
		uint32_t duration = htim3.Instance->CNT;
		fnd_rf433_handle_duration(duration);
	}
}
 800138e:	e009      	b.n	80013a4 <fnd_rf433_signal_received+0x38>
		HAL_TIM_Base_Stop(&htim3);
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <fnd_rf433_signal_received+0x44>)
 8001392:	f001 fc73 	bl	8002c7c <HAL_TIM_Base_Stop>
		uint32_t duration = htim3.Instance->CNT;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <fnd_rf433_signal_received+0x44>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	607b      	str	r3, [r7, #4]
		fnd_rf433_handle_duration(duration);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff26 	bl	80011f0 <fnd_rf433_handle_duration>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	200001c0 	.word	0x200001c0

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x28>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x28>)
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f8d1 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	200f      	movs	r0, #15
 80013cc:	f7ff f96e 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff f934 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x1c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x20>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_IncTick+0x20>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000094 	.word	0x20000094
 8001400:	20000e54 	.word	0x20000e54

08001404 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <HAL_GetTick+0x10>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20000e54 	.word	0x20000e54

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4906      	ldr	r1, [pc, #24]	; (80014b0 <__NVIC_EnableIRQ+0x34>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff4f 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff64 	bl	8001460 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ffb2 	bl	8001508 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff81 	bl	80014b4 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff57 	bl	800147c <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e059      	b.n	80016a2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_DMA_Init+0xd4>)
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d80f      	bhi.n	800161a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_DMA_Init+0xd8>)
 8001602:	4413      	add	r3, r2
 8001604:	4a2b      	ldr	r2, [pc, #172]	; (80016b4 <HAL_DMA_Init+0xdc>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <HAL_DMA_Init+0xe0>)
 8001616:	63da      	str	r2, [r3, #60]	; 0x3c
 8001618:	e00e      	b.n	8001638 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_DMA_Init+0xe4>)
 8001622:	4413      	add	r3, r2
 8001624:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_DMA_Init+0xdc>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	009a      	lsls	r2, r3, #2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <HAL_DMA_Init+0xe8>)
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800164e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800165c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40020407 	.word	0x40020407
 80016b0:	bffdfff8 	.word	0xbffdfff8
 80016b4:	cccccccd 	.word	0xcccccccd
 80016b8:	40020000 	.word	0x40020000
 80016bc:	bffdfbf8 	.word	0xbffdfbf8
 80016c0:	40020400 	.word	0x40020400

080016c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_DMA_Start_IT+0x20>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e04b      	b.n	800177c <HAL_DMA_Start_IT+0xb8>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d13a      	bne.n	800176e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0201 	bic.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fbb1 	bl	8001e84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 020e 	orr.w	r2, r2, #14
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e00f      	b.n	800175c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0204 	bic.w	r2, r2, #4
 800174a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 020a 	orr.w	r2, r2, #10
 800175a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e005      	b.n	800177a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2204      	movs	r2, #4
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e020      	b.n	80017f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 020e 	bic.w	r2, r2, #14
 80017bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d6:	2101      	movs	r1, #1
 80017d8:	fa01 f202 	lsl.w	r2, r1, r2
 80017dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d005      	beq.n	8001820 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2204      	movs	r2, #4
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e0d6      	b.n	80019ce <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 020e 	bic.w	r2, r2, #14
 800182e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_DMA_Abort_IT+0x1dc>)
 8001848:	429a      	cmp	r2, r3
 800184a:	d958      	bls.n	80018fe <HAL_DMA_Abort_IT+0x102>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a62      	ldr	r2, [pc, #392]	; (80019dc <HAL_DMA_Abort_IT+0x1e0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d04f      	beq.n	80018f6 <HAL_DMA_Abort_IT+0xfa>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a61      	ldr	r2, [pc, #388]	; (80019e0 <HAL_DMA_Abort_IT+0x1e4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d048      	beq.n	80018f2 <HAL_DMA_Abort_IT+0xf6>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a5f      	ldr	r2, [pc, #380]	; (80019e4 <HAL_DMA_Abort_IT+0x1e8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d040      	beq.n	80018ec <HAL_DMA_Abort_IT+0xf0>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <HAL_DMA_Abort_IT+0x1ec>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d038      	beq.n	80018e6 <HAL_DMA_Abort_IT+0xea>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <HAL_DMA_Abort_IT+0x1f0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d030      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xe4>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a5b      	ldr	r2, [pc, #364]	; (80019f0 <HAL_DMA_Abort_IT+0x1f4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d028      	beq.n	80018da <HAL_DMA_Abort_IT+0xde>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_DMA_Abort_IT+0x1dc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d020      	beq.n	80018d4 <HAL_DMA_Abort_IT+0xd8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a57      	ldr	r2, [pc, #348]	; (80019f4 <HAL_DMA_Abort_IT+0x1f8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d019      	beq.n	80018d0 <HAL_DMA_Abort_IT+0xd4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a55      	ldr	r2, [pc, #340]	; (80019f8 <HAL_DMA_Abort_IT+0x1fc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d012      	beq.n	80018cc <HAL_DMA_Abort_IT+0xd0>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a54      	ldr	r2, [pc, #336]	; (80019fc <HAL_DMA_Abort_IT+0x200>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00a      	beq.n	80018c6 <HAL_DMA_Abort_IT+0xca>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <HAL_DMA_Abort_IT+0x204>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d102      	bne.n	80018c0 <HAL_DMA_Abort_IT+0xc4>
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	e01b      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c4:	e018      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ca:	e015      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018cc:	2310      	movs	r3, #16
 80018ce:	e013      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e011      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018d8:	e00e      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018de:	e00b      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e4:	e008      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	e005      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f0:	e002      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018f2:	2310      	movs	r3, #16
 80018f4:	e000      	b.n	80018f8 <HAL_DMA_Abort_IT+0xfc>
 80018f6:	2301      	movs	r3, #1
 80018f8:	4a42      	ldr	r2, [pc, #264]	; (8001a04 <HAL_DMA_Abort_IT+0x208>)
 80018fa:	6053      	str	r3, [r2, #4]
 80018fc:	e057      	b.n	80019ae <HAL_DMA_Abort_IT+0x1b2>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a36      	ldr	r2, [pc, #216]	; (80019dc <HAL_DMA_Abort_IT+0x1e0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d04f      	beq.n	80019a8 <HAL_DMA_Abort_IT+0x1ac>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a34      	ldr	r2, [pc, #208]	; (80019e0 <HAL_DMA_Abort_IT+0x1e4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d048      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x1a8>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a33      	ldr	r2, [pc, #204]	; (80019e4 <HAL_DMA_Abort_IT+0x1e8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d040      	beq.n	800199e <HAL_DMA_Abort_IT+0x1a2>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <HAL_DMA_Abort_IT+0x1ec>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d038      	beq.n	8001998 <HAL_DMA_Abort_IT+0x19c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a30      	ldr	r2, [pc, #192]	; (80019ec <HAL_DMA_Abort_IT+0x1f0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d030      	beq.n	8001992 <HAL_DMA_Abort_IT+0x196>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a2e      	ldr	r2, [pc, #184]	; (80019f0 <HAL_DMA_Abort_IT+0x1f4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d028      	beq.n	800198c <HAL_DMA_Abort_IT+0x190>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <HAL_DMA_Abort_IT+0x1dc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d020      	beq.n	8001986 <HAL_DMA_Abort_IT+0x18a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <HAL_DMA_Abort_IT+0x1f8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d019      	beq.n	8001982 <HAL_DMA_Abort_IT+0x186>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <HAL_DMA_Abort_IT+0x1fc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d012      	beq.n	800197e <HAL_DMA_Abort_IT+0x182>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a27      	ldr	r2, [pc, #156]	; (80019fc <HAL_DMA_Abort_IT+0x200>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00a      	beq.n	8001978 <HAL_DMA_Abort_IT+0x17c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <HAL_DMA_Abort_IT+0x204>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d102      	bne.n	8001972 <HAL_DMA_Abort_IT+0x176>
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	e01b      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 8001972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001976:	e018      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 8001978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800197c:	e015      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 800197e:	2310      	movs	r3, #16
 8001980:	e013      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 8001982:	2301      	movs	r3, #1
 8001984:	e011      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 8001986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800198a:	e00e      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 800198c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001990:	e00b      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 8001992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001996:	e008      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	e005      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 800199e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a2:	e002      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 80019a4:	2310      	movs	r3, #16
 80019a6:	e000      	b.n	80019aa <HAL_DMA_Abort_IT+0x1ae>
 80019a8:	2301      	movs	r3, #1
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_DMA_Abort_IT+0x20c>)
 80019ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
    } 
  }
  return status;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40020080 	.word	0x40020080
 80019dc:	40020008 	.word	0x40020008
 80019e0:	4002001c 	.word	0x4002001c
 80019e4:	40020030 	.word	0x40020030
 80019e8:	40020044 	.word	0x40020044
 80019ec:	40020058 	.word	0x40020058
 80019f0:	4002006c 	.word	0x4002006c
 80019f4:	40020408 	.word	0x40020408
 80019f8:	4002041c 	.word	0x4002041c
 80019fc:	40020430 	.word	0x40020430
 8001a00:	40020444 	.word	0x40020444
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020000 	.word	0x40020000

08001a0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	2204      	movs	r2, #4
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80f1 	beq.w	8001c18 <HAL_DMA_IRQHandler+0x20c>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80eb 	beq.w	8001c18 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0204 	bic.w	r2, r2, #4
 8001a5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <HAL_DMA_IRQHandler+0x1d8>)
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d958      	bls.n	8001b1e <HAL_DMA_IRQHandler+0x112>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a5d      	ldr	r2, [pc, #372]	; (8001be8 <HAL_DMA_IRQHandler+0x1dc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d04f      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x10a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <HAL_DMA_IRQHandler+0x1e0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d048      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x106>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a5a      	ldr	r2, [pc, #360]	; (8001bf0 <HAL_DMA_IRQHandler+0x1e4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d040      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x100>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a59      	ldr	r2, [pc, #356]	; (8001bf4 <HAL_DMA_IRQHandler+0x1e8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d038      	beq.n	8001b06 <HAL_DMA_IRQHandler+0xfa>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <HAL_DMA_IRQHandler+0x1ec>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d030      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xf4>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <HAL_DMA_IRQHandler+0x1f0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d028      	beq.n	8001afa <HAL_DMA_IRQHandler+0xee>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a4d      	ldr	r2, [pc, #308]	; (8001be4 <HAL_DMA_IRQHandler+0x1d8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d020      	beq.n	8001af4 <HAL_DMA_IRQHandler+0xe8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_DMA_IRQHandler+0x1f4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d019      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xe4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a50      	ldr	r2, [pc, #320]	; (8001c04 <HAL_DMA_IRQHandler+0x1f8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d012      	beq.n	8001aec <HAL_DMA_IRQHandler+0xe0>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a4f      	ldr	r2, [pc, #316]	; (8001c08 <HAL_DMA_IRQHandler+0x1fc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00a      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0xda>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_DMA_IRQHandler+0x200>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d102      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0xd4>
 8001ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ade:	e01b      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001ae0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ae4:	e018      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aea:	e015      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001aec:	2340      	movs	r3, #64	; 0x40
 8001aee:	e013      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e011      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001af4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001af8:	e00e      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001afa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001afe:	e00b      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001b00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b04:	e008      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001b06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b0a:	e005      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b10:	e002      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001b12:	2340      	movs	r3, #64	; 0x40
 8001b14:	e000      	b.n	8001b18 <HAL_DMA_IRQHandler+0x10c>
 8001b16:	2304      	movs	r3, #4
 8001b18:	4a3d      	ldr	r2, [pc, #244]	; (8001c10 <HAL_DMA_IRQHandler+0x204>)
 8001b1a:	6053      	str	r3, [r2, #4]
 8001b1c:	e057      	b.n	8001bce <HAL_DMA_IRQHandler+0x1c2>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a31      	ldr	r2, [pc, #196]	; (8001be8 <HAL_DMA_IRQHandler+0x1dc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d04f      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x1bc>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <HAL_DMA_IRQHandler+0x1e0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d048      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x1b8>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a2e      	ldr	r2, [pc, #184]	; (8001bf0 <HAL_DMA_IRQHandler+0x1e4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d040      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x1b2>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <HAL_DMA_IRQHandler+0x1e8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d038      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x1ac>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <HAL_DMA_IRQHandler+0x1ec>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d030      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x1a6>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_DMA_IRQHandler+0x1f0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d028      	beq.n	8001bac <HAL_DMA_IRQHandler+0x1a0>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a21      	ldr	r2, [pc, #132]	; (8001be4 <HAL_DMA_IRQHandler+0x1d8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d020      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x19a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a25      	ldr	r2, [pc, #148]	; (8001c00 <HAL_DMA_IRQHandler+0x1f4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d019      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x196>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a24      	ldr	r2, [pc, #144]	; (8001c04 <HAL_DMA_IRQHandler+0x1f8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d012      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x192>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <HAL_DMA_IRQHandler+0x1fc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00a      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x18c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a21      	ldr	r2, [pc, #132]	; (8001c0c <HAL_DMA_IRQHandler+0x200>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d102      	bne.n	8001b92 <HAL_DMA_IRQHandler+0x186>
 8001b8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b90:	e01b      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001b92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b96:	e018      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9c:	e015      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001b9e:	2340      	movs	r3, #64	; 0x40
 8001ba0:	e013      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e011      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001ba6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001baa:	e00e      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001bac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bb0:	e00b      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001bb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bb6:	e008      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bbc:	e005      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc2:	e002      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001bc4:	2340      	movs	r3, #64	; 0x40
 8001bc6:	e000      	b.n	8001bca <HAL_DMA_IRQHandler+0x1be>
 8001bc8:	2304      	movs	r3, #4
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <HAL_DMA_IRQHandler+0x208>)
 8001bcc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8136 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001be0:	e130      	b.n	8001e44 <HAL_DMA_IRQHandler+0x438>
 8001be2:	bf00      	nop
 8001be4:	40020080 	.word	0x40020080
 8001be8:	40020008 	.word	0x40020008
 8001bec:	4002001c 	.word	0x4002001c
 8001bf0:	40020030 	.word	0x40020030
 8001bf4:	40020044 	.word	0x40020044
 8001bf8:	40020058 	.word	0x40020058
 8001bfc:	4002006c 	.word	0x4002006c
 8001c00:	40020408 	.word	0x40020408
 8001c04:	4002041c 	.word	0x4002041c
 8001c08:	40020430 	.word	0x40020430
 8001c0c:	40020444 	.word	0x40020444
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80dd 	beq.w	8001de4 <HAL_DMA_IRQHandler+0x3d8>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80d7 	beq.w	8001de4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10b      	bne.n	8001c5c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020a 	bic.w	r2, r2, #10
 8001c52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_DMA_IRQHandler+0x444>)
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d958      	bls.n	8001d1a <HAL_DMA_IRQHandler+0x30e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a79      	ldr	r2, [pc, #484]	; (8001e54 <HAL_DMA_IRQHandler+0x448>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d04f      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x306>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a78      	ldr	r2, [pc, #480]	; (8001e58 <HAL_DMA_IRQHandler+0x44c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d048      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x302>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a76      	ldr	r2, [pc, #472]	; (8001e5c <HAL_DMA_IRQHandler+0x450>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d040      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x2fc>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a75      	ldr	r2, [pc, #468]	; (8001e60 <HAL_DMA_IRQHandler+0x454>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d038      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x2f6>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a73      	ldr	r2, [pc, #460]	; (8001e64 <HAL_DMA_IRQHandler+0x458>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d030      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x2f0>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a72      	ldr	r2, [pc, #456]	; (8001e68 <HAL_DMA_IRQHandler+0x45c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d028      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x2ea>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a69      	ldr	r2, [pc, #420]	; (8001e50 <HAL_DMA_IRQHandler+0x444>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d020      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x2e4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <HAL_DMA_IRQHandler+0x460>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d019      	beq.n	8001cec <HAL_DMA_IRQHandler+0x2e0>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a6c      	ldr	r2, [pc, #432]	; (8001e70 <HAL_DMA_IRQHandler+0x464>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d012      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2dc>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6b      	ldr	r2, [pc, #428]	; (8001e74 <HAL_DMA_IRQHandler+0x468>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00a      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x2d6>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a69      	ldr	r2, [pc, #420]	; (8001e78 <HAL_DMA_IRQHandler+0x46c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d102      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x2d0>
 8001cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cda:	e01b      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce0:	e018      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce6:	e015      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	e013      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e011      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf4:	e00e      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001cf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cfa:	e00b      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d00:	e008      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d06:	e005      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0c:	e002      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001d0e:	2320      	movs	r3, #32
 8001d10:	e000      	b.n	8001d14 <HAL_DMA_IRQHandler+0x308>
 8001d12:	2302      	movs	r3, #2
 8001d14:	4a59      	ldr	r2, [pc, #356]	; (8001e7c <HAL_DMA_IRQHandler+0x470>)
 8001d16:	6053      	str	r3, [r2, #4]
 8001d18:	e057      	b.n	8001dca <HAL_DMA_IRQHandler+0x3be>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_DMA_IRQHandler+0x448>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d04f      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x3b8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_DMA_IRQHandler+0x44c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d048      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x3b4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_DMA_IRQHandler+0x450>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d040      	beq.n	8001dba <HAL_DMA_IRQHandler+0x3ae>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <HAL_DMA_IRQHandler+0x454>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d038      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x3a8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a47      	ldr	r2, [pc, #284]	; (8001e64 <HAL_DMA_IRQHandler+0x458>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d030      	beq.n	8001dae <HAL_DMA_IRQHandler+0x3a2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a45      	ldr	r2, [pc, #276]	; (8001e68 <HAL_DMA_IRQHandler+0x45c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d028      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x39c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a3d      	ldr	r2, [pc, #244]	; (8001e50 <HAL_DMA_IRQHandler+0x444>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d020      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x396>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a41      	ldr	r2, [pc, #260]	; (8001e6c <HAL_DMA_IRQHandler+0x460>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d019      	beq.n	8001d9e <HAL_DMA_IRQHandler+0x392>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a40      	ldr	r2, [pc, #256]	; (8001e70 <HAL_DMA_IRQHandler+0x464>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d012      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x38e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3e      	ldr	r2, [pc, #248]	; (8001e74 <HAL_DMA_IRQHandler+0x468>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00a      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x388>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a3d      	ldr	r2, [pc, #244]	; (8001e78 <HAL_DMA_IRQHandler+0x46c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d102      	bne.n	8001d8e <HAL_DMA_IRQHandler+0x382>
 8001d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8c:	e01b      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d92:	e018      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d98:	e015      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e013      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e011      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da6:	e00e      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001da8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dac:	e00b      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db2:	e008      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db8:	e005      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dbe:	e002      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	e000      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3ba>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	4a2e      	ldr	r2, [pc, #184]	; (8001e80 <HAL_DMA_IRQHandler+0x474>)
 8001dc8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d034      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001de2:	e02f      	b.n	8001e44 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	2208      	movs	r2, #8
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d028      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x43a>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d023      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 020e 	bic.w	r2, r2, #14
 8001e0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e16:	2101      	movs	r1, #1
 8001e18:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
    }
  }
  return;
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
}
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40020080 	.word	0x40020080
 8001e54:	40020008 	.word	0x40020008
 8001e58:	4002001c 	.word	0x4002001c
 8001e5c:	40020030 	.word	0x40020030
 8001e60:	40020044 	.word	0x40020044
 8001e64:	40020058 	.word	0x40020058
 8001e68:	4002006c 	.word	0x4002006c
 8001e6c:	40020408 	.word	0x40020408
 8001e70:	4002041c 	.word	0x4002041c
 8001e74:	40020430 	.word	0x40020430
 8001e78:	40020444 	.word	0x40020444
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40020000 	.word	0x40020000

08001e84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d108      	bne.n	8001ec4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ec2:	e007      	b.n	8001ed4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b08b      	sub	sp, #44	; 0x2c
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef2:	e179      	b.n	80021e8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 8168 	bne.w	80021e2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4a96      	ldr	r2, [pc, #600]	; (8002170 <HAL_GPIO_Init+0x290>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d05e      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f1c:	4a94      	ldr	r2, [pc, #592]	; (8002170 <HAL_GPIO_Init+0x290>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d875      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f22:	4a94      	ldr	r2, [pc, #592]	; (8002174 <HAL_GPIO_Init+0x294>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d058      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f28:	4a92      	ldr	r2, [pc, #584]	; (8002174 <HAL_GPIO_Init+0x294>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d86f      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f2e:	4a92      	ldr	r2, [pc, #584]	; (8002178 <HAL_GPIO_Init+0x298>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d052      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f34:	4a90      	ldr	r2, [pc, #576]	; (8002178 <HAL_GPIO_Init+0x298>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d869      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f3a:	4a90      	ldr	r2, [pc, #576]	; (800217c <HAL_GPIO_Init+0x29c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d04c      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f40:	4a8e      	ldr	r2, [pc, #568]	; (800217c <HAL_GPIO_Init+0x29c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d863      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f46:	4a8e      	ldr	r2, [pc, #568]	; (8002180 <HAL_GPIO_Init+0x2a0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d046      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f4c:	4a8c      	ldr	r2, [pc, #560]	; (8002180 <HAL_GPIO_Init+0x2a0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d85d      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f52:	2b12      	cmp	r3, #18
 8001f54:	d82a      	bhi.n	8001fac <HAL_GPIO_Init+0xcc>
 8001f56:	2b12      	cmp	r3, #18
 8001f58:	d859      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <HAL_GPIO_Init+0x80>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001fdb 	.word	0x08001fdb
 8001f64:	08001fb5 	.word	0x08001fb5
 8001f68:	08001fc7 	.word	0x08001fc7
 8001f6c:	08002009 	.word	0x08002009
 8001f70:	0800200f 	.word	0x0800200f
 8001f74:	0800200f 	.word	0x0800200f
 8001f78:	0800200f 	.word	0x0800200f
 8001f7c:	0800200f 	.word	0x0800200f
 8001f80:	0800200f 	.word	0x0800200f
 8001f84:	0800200f 	.word	0x0800200f
 8001f88:	0800200f 	.word	0x0800200f
 8001f8c:	0800200f 	.word	0x0800200f
 8001f90:	0800200f 	.word	0x0800200f
 8001f94:	0800200f 	.word	0x0800200f
 8001f98:	0800200f 	.word	0x0800200f
 8001f9c:	0800200f 	.word	0x0800200f
 8001fa0:	0800200f 	.word	0x0800200f
 8001fa4:	08001fbd 	.word	0x08001fbd
 8001fa8:	08001fd1 	.word	0x08001fd1
 8001fac:	4a75      	ldr	r2, [pc, #468]	; (8002184 <HAL_GPIO_Init+0x2a4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fb2:	e02c      	b.n	800200e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e029      	b.n	8002010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e024      	b.n	8002010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	3308      	adds	r3, #8
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e01f      	b.n	8002010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	330c      	adds	r3, #12
 8001fd6:	623b      	str	r3, [r7, #32]
          break;
 8001fd8:	e01a      	b.n	8002010 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	623b      	str	r3, [r7, #32]
          break;
 8001fe6:	e013      	b.n	8002010 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	611a      	str	r2, [r3, #16]
          break;
 8001ffa:	e009      	b.n	8002010 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	615a      	str	r2, [r3, #20]
          break;
 8002006:	e003      	b.n	8002010 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
          break;
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x130>
          break;
 800200e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2bff      	cmp	r3, #255	; 0xff
 8002014:	d801      	bhi.n	800201a <HAL_GPIO_Init+0x13a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	e001      	b.n	800201e <HAL_GPIO_Init+0x13e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2bff      	cmp	r3, #255	; 0xff
 8002024:	d802      	bhi.n	800202c <HAL_GPIO_Init+0x14c>
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	e002      	b.n	8002032 <HAL_GPIO_Init+0x152>
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	3b08      	subs	r3, #8
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	210f      	movs	r1, #15
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	6a39      	ldr	r1, [r7, #32]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	431a      	orrs	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80c1 	beq.w	80021e2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002060:	4b49      	ldr	r3, [pc, #292]	; (8002188 <HAL_GPIO_Init+0x2a8>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a48      	ldr	r2, [pc, #288]	; (8002188 <HAL_GPIO_Init+0x2a8>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b46      	ldr	r3, [pc, #280]	; (8002188 <HAL_GPIO_Init+0x2a8>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002078:	4a44      	ldr	r2, [pc, #272]	; (800218c <HAL_GPIO_Init+0x2ac>)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002084:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3c      	ldr	r2, [pc, #240]	; (8002190 <HAL_GPIO_Init+0x2b0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d01f      	beq.n	80020e4 <HAL_GPIO_Init+0x204>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_GPIO_Init+0x2b4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d019      	beq.n	80020e0 <HAL_GPIO_Init+0x200>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a3a      	ldr	r2, [pc, #232]	; (8002198 <HAL_GPIO_Init+0x2b8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_GPIO_Init+0x1fc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a39      	ldr	r2, [pc, #228]	; (800219c <HAL_GPIO_Init+0x2bc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00d      	beq.n	80020d8 <HAL_GPIO_Init+0x1f8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a38      	ldr	r2, [pc, #224]	; (80021a0 <HAL_GPIO_Init+0x2c0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <HAL_GPIO_Init+0x1f4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a37      	ldr	r2, [pc, #220]	; (80021a4 <HAL_GPIO_Init+0x2c4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_GPIO_Init+0x1f0>
 80020cc:	2305      	movs	r3, #5
 80020ce:	e00a      	b.n	80020e6 <HAL_GPIO_Init+0x206>
 80020d0:	2306      	movs	r3, #6
 80020d2:	e008      	b.n	80020e6 <HAL_GPIO_Init+0x206>
 80020d4:	2304      	movs	r3, #4
 80020d6:	e006      	b.n	80020e6 <HAL_GPIO_Init+0x206>
 80020d8:	2303      	movs	r3, #3
 80020da:	e004      	b.n	80020e6 <HAL_GPIO_Init+0x206>
 80020dc:	2302      	movs	r3, #2
 80020de:	e002      	b.n	80020e6 <HAL_GPIO_Init+0x206>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_GPIO_Init+0x206>
 80020e4:	2300      	movs	r3, #0
 80020e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e8:	f002 0203 	and.w	r2, r2, #3
 80020ec:	0092      	lsls	r2, r2, #2
 80020ee:	4093      	lsls	r3, r2
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020f6:	4925      	ldr	r1, [pc, #148]	; (800218c <HAL_GPIO_Init+0x2ac>)
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	3302      	adds	r3, #2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	4924      	ldr	r1, [pc, #144]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	43db      	mvns	r3, r3
 8002126:	4920      	ldr	r1, [pc, #128]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8002128:	4013      	ands	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	491a      	ldr	r1, [pc, #104]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	60cb      	str	r3, [r1, #12]
 8002144:	e006      	b.n	8002154 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	43db      	mvns	r3, r3
 800214e:	4916      	ldr	r1, [pc, #88]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8002150:	4013      	ands	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d025      	beq.n	80021ac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4910      	ldr	r1, [pc, #64]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
 800216c:	e025      	b.n	80021ba <HAL_GPIO_Init+0x2da>
 800216e:	bf00      	nop
 8002170:	10320000 	.word	0x10320000
 8002174:	10310000 	.word	0x10310000
 8002178:	10220000 	.word	0x10220000
 800217c:	10210000 	.word	0x10210000
 8002180:	10120000 	.word	0x10120000
 8002184:	10110000 	.word	0x10110000
 8002188:	40021000 	.word	0x40021000
 800218c:	40010000 	.word	0x40010000
 8002190:	40010800 	.word	0x40010800
 8002194:	40010c00 	.word	0x40010c00
 8002198:	40011000 	.word	0x40011000
 800219c:	40011400 	.word	0x40011400
 80021a0:	40011800 	.word	0x40011800
 80021a4:	40011c00 	.word	0x40011c00
 80021a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_GPIO_Init+0x324>)
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	4913      	ldr	r1, [pc, #76]	; (8002204 <HAL_GPIO_Init+0x324>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_GPIO_Init+0x324>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_GPIO_Init+0x324>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
 80021d2:	e006      	b.n	80021e2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_GPIO_Init+0x324>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	43db      	mvns	r3, r3
 80021dc:	4909      	ldr	r1, [pc, #36]	; (8002204 <HAL_GPIO_Init+0x324>)
 80021de:	4013      	ands	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	3301      	adds	r3, #1
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	fa22 f303 	lsr.w	r3, r2, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f47f ae7e 	bne.w	8001ef4 <HAL_GPIO_Init+0x14>
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	372c      	adds	r7, #44	; 0x2c
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e001      	b.n	800222a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	807b      	strh	r3, [r7, #2]
 8002242:	4613      	mov	r3, r2
 8002244:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224c:	887a      	ldrh	r2, [r7, #2]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002252:	e003      	b.n	800225c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002254:	887b      	ldrh	r3, [r7, #2]
 8002256:	041a      	lsls	r2, r3, #16
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	611a      	str	r2, [r3, #16]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
	...

08002268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f806 	bl	8002298 <HAL_GPIO_EXTI_Callback>
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010400 	.word	0x40010400

08002298 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e272      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8087 	beq.w	80023da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022cc:	4b92      	ldr	r3, [pc, #584]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d00c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022d8:	4b8f      	ldr	r3, [pc, #572]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d112      	bne.n	800230a <HAL_RCC_OscConfig+0x5e>
 80022e4:	4b8c      	ldr	r3, [pc, #560]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f0:	d10b      	bne.n	800230a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f2:	4b89      	ldr	r3, [pc, #548]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d06c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x12c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d168      	bne.n	80023d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e24c      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x76>
 8002314:	4b80      	ldr	r3, [pc, #512]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a7f      	ldr	r2, [pc, #508]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e02e      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x98>
 800232a:	4b7b      	ldr	r3, [pc, #492]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7a      	ldr	r2, [pc, #488]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b78      	ldr	r3, [pc, #480]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a77      	ldr	r2, [pc, #476]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800233c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e01d      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0xbc>
 800234e:	4b72      	ldr	r3, [pc, #456]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a71      	ldr	r2, [pc, #452]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b6f      	ldr	r3, [pc, #444]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6e      	ldr	r2, [pc, #440]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002368:	4b6b      	ldr	r3, [pc, #428]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6a      	ldr	r2, [pc, #424]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800236e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a67      	ldr	r2, [pc, #412]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800237a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff f83c 	bl	8001404 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff f838 	bl	8001404 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e200      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0xe4>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff f828 	bl	8001404 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff f824 	bl	8001404 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1ec      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x10c>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d063      	beq.n	80024ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e6:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023f2:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d11c      	bne.n	8002438 <HAL_RCC_OscConfig+0x18c>
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d116      	bne.n	8002438 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_RCC_OscConfig+0x176>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d001      	beq.n	8002422 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e1c0      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4939      	ldr	r1, [pc, #228]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	e03a      	b.n	80024ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002440:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_RCC_OscConfig+0x270>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe ffdd 	bl	8001404 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244e:	f7fe ffd9 	bl	8001404 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1a1      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4927      	ldr	r1, [pc, #156]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]
 8002480:	e015      	b.n	80024ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_RCC_OscConfig+0x270>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe ffbc 	bl	8001404 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002490:	f7fe ffb8 	bl	8001404 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e180      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d03a      	beq.n	8002530 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d019      	beq.n	80024f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c8:	f7fe ff9c 	bl	8001404 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d0:	f7fe ff98 	bl	8001404 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e160      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f000 fafe 	bl	8002af0 <RCC_Delay>
 80024f4:	e01c      	b.n	8002530 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7fe ff82 	bl	8001404 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002502:	e00f      	b.n	8002524 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002504:	f7fe ff7e 	bl	8001404 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d908      	bls.n	8002524 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e146      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	42420000 	.word	0x42420000
 8002520:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	4b92      	ldr	r3, [pc, #584]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e9      	bne.n	8002504 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a6 	beq.w	800268a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002542:	4b8b      	ldr	r3, [pc, #556]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10d      	bne.n	800256a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	4b88      	ldr	r3, [pc, #544]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a87      	ldr	r2, [pc, #540]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b85      	ldr	r3, [pc, #532]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b82      	ldr	r3, [pc, #520]	; (8002774 <HAL_RCC_OscConfig+0x4c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d118      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b7f      	ldr	r3, [pc, #508]	; (8002774 <HAL_RCC_OscConfig+0x4c8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7e      	ldr	r2, [pc, #504]	; (8002774 <HAL_RCC_OscConfig+0x4c8>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe ff3f 	bl	8001404 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7fe ff3b 	bl	8001404 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	; 0x64
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e103      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b75      	ldr	r3, [pc, #468]	; (8002774 <HAL_RCC_OscConfig+0x4c8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x312>
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	e02d      	b.n	800261a <HAL_RCC_OscConfig+0x36e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x334>
 80025c6:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a69      	ldr	r2, [pc, #420]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	4b67      	ldr	r3, [pc, #412]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a66      	ldr	r2, [pc, #408]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	6213      	str	r3, [r2, #32]
 80025de:	e01c      	b.n	800261a <HAL_RCC_OscConfig+0x36e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0x356>
 80025e8:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4a60      	ldr	r2, [pc, #384]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	6213      	str	r3, [r2, #32]
 80025f4:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4a5d      	ldr	r2, [pc, #372]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6213      	str	r3, [r2, #32]
 8002600:	e00b      	b.n	800261a <HAL_RCC_OscConfig+0x36e>
 8002602:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a5a      	ldr	r2, [pc, #360]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6213      	str	r3, [r2, #32]
 800260e:	4b58      	ldr	r3, [pc, #352]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a57      	ldr	r2, [pc, #348]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d015      	beq.n	800264e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7fe feef 	bl	8001404 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe feeb 	bl	8001404 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0b1      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ee      	beq.n	800262a <HAL_RCC_OscConfig+0x37e>
 800264c:	e014      	b.n	8002678 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7fe fed9 	bl	8001404 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fed5 	bl	8001404 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e09b      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	4b40      	ldr	r3, [pc, #256]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ee      	bne.n	8002656 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b3c      	ldr	r3, [pc, #240]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002688:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8087 	beq.w	80027a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002694:	4b36      	ldr	r3, [pc, #216]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d061      	beq.n	8002764 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d146      	bne.n	8002736 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a8:	4b33      	ldr	r3, [pc, #204]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fea9 	bl	8001404 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7fe fea5 	bl	8001404 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e06d      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f0      	bne.n	80026b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026dc:	d108      	bne.n	80026f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4921      	ldr	r1, [pc, #132]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f0:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a19      	ldr	r1, [r3, #32]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	430b      	orrs	r3, r1
 8002702:	491b      	ldr	r1, [pc, #108]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe fe79 	bl	8001404 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe fe75 	bl	8001404 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e03d      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x46a>
 8002734:	e035      	b.n	80027a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fe62 	bl	8001404 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002744:	f7fe fe5e 	bl	8001404 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e026      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x498>
 8002762:	e01e      	b.n	80027a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e019      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
 8002770:	40021000 	.word	0x40021000
 8002774:	40007000 	.word	0x40007000
 8002778:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_OscConfig+0x500>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	429a      	cmp	r2, r3
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000

080027b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d0      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d910      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4965      	ldr	r1, [pc, #404]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002816:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800282e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d040      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d115      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e073      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06b      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b39      	ldr	r3, [pc, #228]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4936      	ldr	r1, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a0:	f7fe fdb0 	bl	8001404 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7fe fdac 	bl	8001404 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e053      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d210      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4922      	ldr	r1, [pc, #136]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f821 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1cc>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1d0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fea4 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40022000 	.word	0x40022000
 8002974:	40021000 	.word	0x40021000
 8002978:	08008f48 	.word	0x08008f48
 800297c:	20000000 	.word	0x20000000
 8002980:	20000090 	.word	0x20000090

08002984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800299e:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x94>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x30>
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x36>
 80029b2:	e027      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x98>)
 80029b6:	613b      	str	r3, [r7, #16]
      break;
 80029b8:	e027      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	0c9b      	lsrs	r3, r3, #18
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029c4:	5cd3      	ldrb	r3, [r2, r3]
 80029c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d010      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x94>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0c5b      	lsrs	r3, r3, #17
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029de:	5cd3      	ldrb	r3, [r2, r3]
 80029e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x98>)
 80029e6:	fb03 f202 	mul.w	r2, r3, r2
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e004      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029f8:	fb02 f303 	mul.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	613b      	str	r3, [r7, #16]
      break;
 8002a02:	e002      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a06:	613b      	str	r3, [r7, #16]
      break;
 8002a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0a:	693b      	ldr	r3, [r7, #16]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	007a1200 	.word	0x007a1200
 8002a20:	08008f60 	.word	0x08008f60
 8002a24:	08008f70 	.word	0x08008f70
 8002a28:	003d0900 	.word	0x003d0900

08002a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b02      	ldr	r3, [pc, #8]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	20000000 	.word	0x20000000

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a44:	f7ff fff2 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08008f58 	.word	0x08008f58

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	f7ff ffde 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	0adb      	lsrs	r3, r3, #11
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08008f58 	.word	0x08008f58

08002a90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_RCC_GetClockConfig+0x58>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <HAL_RCC_GetClockConfig+0x58>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_GetClockConfig+0x58>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_RCC_GetClockConfig+0x58>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	08db      	lsrs	r3, r3, #3
 8002aca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_GetClockConfig+0x5c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0207 	and.w	r2, r3, #7
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40022000 	.word	0x40022000

08002af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <RCC_Delay+0x34>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <RCC_Delay+0x38>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0a5b      	lsrs	r3, r3, #9
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b0c:	bf00      	nop
  }
  while (Delay --);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1e5a      	subs	r2, r3, #1
 8002b12:	60fa      	str	r2, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f9      	bne.n	8002b0c <RCC_Delay+0x1c>
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000000 	.word	0x20000000
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e041      	b.n	8002bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd ff42 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 fb00 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e03c      	b.n	8002c5e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_TIM_Base_Start+0x9c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d018      	beq.n	8002c28 <HAL_TIM_Base_Start+0x5c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <HAL_TIM_Base_Start+0xa0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_TIM_Base_Start+0x5c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d00e      	beq.n	8002c28 <HAL_TIM_Base_Start+0x5c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_TIM_Base_Start+0xa4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d009      	beq.n	8002c28 <HAL_TIM_Base_Start+0x5c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <HAL_TIM_Base_Start+0xa8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_TIM_Base_Start+0x5c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <HAL_TIM_Base_Start+0xac>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d111      	bne.n	8002c4c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d010      	beq.n	8002c5c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	e007      	b.n	8002c5c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40013400 	.word	0x40013400
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40000c00 	.word	0x40000c00

08002c7c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6a1a      	ldr	r2, [r3, #32]
 8002c8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10f      	bne.n	8002cb4 <HAL_TIM_Base_Stop+0x38>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	f240 4344 	movw	r3, #1092	; 0x444
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_Base_Stop+0x38>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d001      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e044      	b.n	8002d6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <HAL_TIM_Base_Start_IT+0xac>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d018      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d013      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d00e      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_TIM_Base_Start_IT+0xb4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <HAL_TIM_Base_Start_IT+0xb8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <HAL_TIM_Base_Start_IT+0xbc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d111      	bne.n	8002d58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d010      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d56:	e007      	b.n	8002d68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40013400 	.word	0x40013400
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40000800 	.word	0x40000800
 8002d84:	40000c00 	.word	0x40000c00

08002d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d122      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d11b      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0202 	mvn.w	r2, #2
 8002db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f9b4 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9a7 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f9b6 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d122      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d11b      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0204 	mvn.w	r2, #4
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f98a 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f97d 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f98c 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d122      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11b      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0208 	mvn.w	r2, #8
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f960 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f953 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f962 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d122      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0210 	mvn.w	r2, #16
 8002eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f936 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f929 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f938 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0201 	mvn.w	r2, #1
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd fb80 	bl	800060c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b80      	cmp	r3, #128	; 0x80
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 faa1 	bl	800347a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d107      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8fc 	bl	800315c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d107      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0220 	mvn.w	r2, #32
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa6c 	bl	8003468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0b4      	b.n	800311e <HAL_TIM_ConfigClockSource+0x186>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fec:	d03e      	beq.n	800306c <HAL_TIM_ConfigClockSource+0xd4>
 8002fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff2:	f200 8087 	bhi.w	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	f000 8086 	beq.w	800310a <HAL_TIM_ConfigClockSource+0x172>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	d87f      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d01a      	beq.n	800303e <HAL_TIM_ConfigClockSource+0xa6>
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d87b      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b60      	cmp	r3, #96	; 0x60
 800300e:	d050      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003010:	2b60      	cmp	r3, #96	; 0x60
 8003012:	d877      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d03c      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0xfa>
 8003018:	2b50      	cmp	r3, #80	; 0x50
 800301a:	d873      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d058      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d86f      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	d064      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003028:	2b30      	cmp	r3, #48	; 0x30
 800302a:	d86b      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d060      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d867      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d05c      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	2b10      	cmp	r3, #16
 800303a:	d05a      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	e062      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f000 f980 	bl	8003352 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	609a      	str	r2, [r3, #8]
      break;
 800306a:	e04f      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f000 f969 	bl	8003352 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308e:	609a      	str	r2, [r3, #8]
      break;
 8003090:	e03c      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	461a      	mov	r2, r3
 80030a0:	f000 f8e0 	bl	8003264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2150      	movs	r1, #80	; 0x50
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f937 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 80030b0:	e02c      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	461a      	mov	r2, r3
 80030c0:	f000 f8fe 	bl	80032c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2160      	movs	r1, #96	; 0x60
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f927 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 80030d0:	e01c      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	461a      	mov	r2, r3
 80030e0:	f000 f8c0 	bl	8003264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2140      	movs	r1, #64	; 0x40
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f917 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 80030f0:	e00c      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4619      	mov	r1, r3
 80030fc:	4610      	mov	r0, r2
 80030fe:	f000 f90e 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8003102:	e003      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      break;
 8003108:	e000      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800310a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
	...

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a33      	ldr	r2, [pc, #204]	; (8003250 <TIM_Base_SetConfig+0xe0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d013      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a32      	ldr	r2, [pc, #200]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00f      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d00b      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a2f      	ldr	r2, [pc, #188]	; (8003258 <TIM_Base_SetConfig+0xe8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a2e      	ldr	r2, [pc, #184]	; (800325c <TIM_Base_SetConfig+0xec>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a2d      	ldr	r2, [pc, #180]	; (8003260 <TIM_Base_SetConfig+0xf0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d108      	bne.n	80031c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a22      	ldr	r2, [pc, #136]	; (8003250 <TIM_Base_SetConfig+0xe0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <TIM_Base_SetConfig+0x82>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a21      	ldr	r2, [pc, #132]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00f      	beq.n	80031f2 <TIM_Base_SetConfig+0x82>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d8:	d00b      	beq.n	80031f2 <TIM_Base_SetConfig+0x82>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <TIM_Base_SetConfig+0xe8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <TIM_Base_SetConfig+0x82>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <TIM_Base_SetConfig+0xec>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_Base_SetConfig+0x82>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <TIM_Base_SetConfig+0xf0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d108      	bne.n	8003204 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <TIM_Base_SetConfig+0xe0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d003      	beq.n	8003238 <TIM_Base_SetConfig+0xc8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a08      	ldr	r2, [pc, #32]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d103      	bne.n	8003240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	615a      	str	r2, [r3, #20]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40013400 	.word	0x40013400
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00

08003264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800328e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 030a 	bic.w	r3, r3, #10
 80032a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f023 0210 	bic.w	r2, r3, #16
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	031b      	lsls	r3, r3, #12
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	621a      	str	r2, [r3, #32]
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	f043 0307 	orr.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003352:	b480      	push	{r7}
 8003354:	b087      	sub	sp, #28
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	021a      	lsls	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	431a      	orrs	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4313      	orrs	r3, r2
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	609a      	str	r2, [r3, #8]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e050      	b.n	800344a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d018      	beq.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fe:	d00e      	beq.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a15      	ldr	r2, [pc, #84]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d004      	beq.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a12      	ldr	r2, [pc, #72]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10c      	bne.n	8003438 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	4313      	orrs	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40013400 	.word	0x40013400
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	40000c00 	.word	0x40000c00

08003468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e042      	b.n	8003524 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fb52 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 ffb5 	bl	8004440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	; 0x30
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b20      	cmp	r3, #32
 8003544:	d156      	bne.n	80035f4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_UART_Transmit_DMA+0x26>
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e04f      	b.n	80035f6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2221      	movs	r2, #33	; 0x21
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	4a21      	ldr	r2, [pc, #132]	; (8003600 <HAL_UART_Transmit_DMA+0xd4>)
 800357c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_UART_Transmit_DMA+0xd8>)
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <HAL_UART_Transmit_DMA+0xdc>)
 800358c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	2200      	movs	r2, #0
 8003594:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003596:	f107 0308 	add.w	r3, r7, #8
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	6819      	ldr	r1, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	461a      	mov	r2, r3
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	f7fe f889 	bl	80016c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3314      	adds	r3, #20
 80035c2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	e853 3f00 	ldrex	r3, [r3]
 80035ca:	617b      	str	r3, [r7, #20]
   return(result);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3314      	adds	r3, #20
 80035da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035dc:	627a      	str	r2, [r7, #36]	; 0x24
 80035de:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6a39      	ldr	r1, [r7, #32]
 80035e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e5      	bne.n	80035bc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3730      	adds	r7, #48	; 0x30
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	08003cd7 	.word	0x08003cd7
 8003604:	08003d71 	.word	0x08003d71
 8003608:	08003ef5 	.word	0x08003ef5

0800360c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	d112      	bne.n	800364c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_UART_Receive_DMA+0x26>
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e00b      	b.n	800364e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	461a      	mov	r2, r3
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fca0 	bl	8003f88 <UART_Start_Receive_DMA>
 8003648:	4603      	mov	r3, r0
 800364a:	e000      	b.n	800364e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b090      	sub	sp, #64	; 0x40
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b21      	cmp	r3, #33	; 0x21
 8003682:	d128      	bne.n	80036d6 <HAL_UART_DMAStop+0x80>
 8003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d025      	beq.n	80036d6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3314      	adds	r3, #20
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	623b      	str	r3, [r7, #32]
   return(result);
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3314      	adds	r3, #20
 80036a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036aa:	633a      	str	r2, [r7, #48]	; 0x30
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e5      	bne.n	800368a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe f85a 	bl	8001784 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fcf3 	bl	80040bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b22      	cmp	r3, #34	; 0x22
 80036f6:	d128      	bne.n	800374a <HAL_UART_DMAStop+0xf4>
 80036f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d025      	beq.n	800374a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	60fb      	str	r3, [r7, #12]
   return(result);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371e:	61fa      	str	r2, [r7, #28]
 8003720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	69b9      	ldr	r1, [r7, #24]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	617b      	str	r3, [r7, #20]
   return(result);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e5      	bne.n	80036fe <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe f820 	bl	8001784 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fce0 	bl	800410a <UART_EndRxTransfer>
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3740      	adds	r7, #64	; 0x40
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b0ba      	sub	sp, #232	; 0xe8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800379a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_UART_IRQHandler+0x66>
 80037a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fd86 	bl	80042c4 <UART_Receive_IT>
      return;
 80037b8:	e25b      	b.n	8003c72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80de 	beq.w	8003980 <HAL_UART_IRQHandler+0x22c>
 80037c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80d1 	beq.w	8003980 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_UART_IRQHandler+0xae>
 80037ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	f043 0201 	orr.w	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <HAL_UART_IRQHandler+0xd2>
 800380e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f043 0202 	orr.w	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_UART_IRQHandler+0xf6>
 8003832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f043 0204 	orr.w	r2, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d011      	beq.n	800387a <HAL_UART_IRQHandler+0x126>
 8003856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f043 0208 	orr.w	r2, r3, #8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 81f2 	beq.w	8003c68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_UART_IRQHandler+0x14e>
 8003890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fd11 	bl	80042c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <HAL_UART_IRQHandler+0x17a>
 80038c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04f      	beq.n	800396e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fc1b 	bl	800410a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d041      	beq.n	8003966 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3314      	adds	r3, #20
 80038e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3314      	adds	r3, #20
 800390a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800390e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800391a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1d9      	bne.n	80038e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d013      	beq.n	800395e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	4a7e      	ldr	r2, [pc, #504]	; (8003b34 <HAL_UART_IRQHandler+0x3e0>)
 800393c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd ff5a 	bl	80017fc <HAL_DMA_Abort_IT>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d016      	beq.n	800397c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003958:	4610      	mov	r0, r2
 800395a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395c:	e00e      	b.n	800397c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f9a5 	bl	8003cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	e00a      	b.n	800397c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9a1 	bl	8003cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396c:	e006      	b.n	800397c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f99d 	bl	8003cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800397a:	e175      	b.n	8003c68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397c:	bf00      	nop
    return;
 800397e:	e173      	b.n	8003c68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	2b01      	cmp	r3, #1
 8003986:	f040 814f 	bne.w	8003c28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8148 	beq.w	8003c28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8141 	beq.w	8003c28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80b6 	beq.w	8003b38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8145 	beq.w	8003c6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039ea:	429a      	cmp	r2, r3
 80039ec:	f080 813e 	bcs.w	8003c6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	f000 8088 	beq.w	8003b14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a30:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1d9      	bne.n	8003a04 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3314      	adds	r3, #20
 8003a70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a74:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a78:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e1      	bne.n	8003a50 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3314      	adds	r3, #20
 8003a92:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ab0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ab2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ab6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e3      	bne.n	8003a8c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae4:	f023 0310 	bic.w	r3, r3, #16
 8003ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003af6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003af8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e3      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd fe38 	bl	8001784 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8c8 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b30:	e09c      	b.n	8003c6c <HAL_UART_IRQHandler+0x518>
 8003b32:	bf00      	nop
 8003b34:	080041cf 	.word	0x080041cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 808e 	beq.w	8003c70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8089 	beq.w	8003c70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b82:	647a      	str	r2, [r7, #68]	; 0x44
 8003b84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e3      	bne.n	8003b5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3314      	adds	r3, #20
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bba:	633a      	str	r2, [r7, #48]	; 0x30
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e3      	bne.n	8003b96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0310 	bic.w	r3, r3, #16
 8003bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c00:	61fa      	str	r2, [r7, #28]
 8003c02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	69b9      	ldr	r1, [r7, #24]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e3      	bne.n	8003bdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f84d 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c26:	e023      	b.n	8003c70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_UART_IRQHandler+0x4f4>
 8003c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fad8 	bl	80041f6 <UART_Transmit_IT>
    return;
 8003c46:	e014      	b.n	8003c72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <HAL_UART_IRQHandler+0x51e>
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fb17 	bl	8004294 <UART_EndTransmit_IT>
    return;
 8003c66:	e004      	b.n	8003c72 <HAL_UART_IRQHandler+0x51e>
    return;
 8003c68:	bf00      	nop
 8003c6a:	e002      	b.n	8003c72 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c6c:	bf00      	nop
 8003c6e:	e000      	b.n	8003c72 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c70:	bf00      	nop
  }
}
 8003c72:	37e8      	adds	r7, #232	; 0xe8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b090      	sub	sp, #64	; 0x40
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d137      	bne.n	8003d62 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	623b      	str	r3, [r7, #32]
   return(result);
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d18:	633a      	str	r2, [r7, #48]	; 0x30
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
 8003d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d4c:	61fa      	str	r2, [r7, #28]
 8003d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	69b9      	ldr	r1, [r7, #24]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	617b      	str	r3, [r7, #20]
   return(result);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d60:	e002      	b.n	8003d68 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003d62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d64:	f7fd f92c 	bl	8000fc0 <HAL_UART_TxCpltCallback>
}
 8003d68:	bf00      	nop
 8003d6a:	3740      	adds	r7, #64	; 0x40
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff ff7a 	bl	8003c78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b09c      	sub	sp, #112	; 0x70
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d172      	bne.n	8003e8e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003daa:	2200      	movs	r2, #0
 8003dac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dce:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dd0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3314      	adds	r3, #20
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e02:	647a      	str	r2, [r7, #68]	; 0x44
 8003e04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	623b      	str	r3, [r7, #32]
   return(result);
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e36:	633a      	str	r2, [r7, #48]	; 0x30
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e5      	bne.n	8003e16 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d119      	bne.n	8003e8e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f023 0310 	bic.w	r3, r3, #16
 8003e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	330c      	adds	r3, #12
 8003e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e7a:	61fa      	str	r2, [r7, #28]
 8003e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	69b9      	ldr	r1, [r7, #24]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	617b      	str	r3, [r7, #20]
   return(result);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e5      	bne.n	8003e5a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e90:	2200      	movs	r2, #0
 8003e92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d106      	bne.n	8003eaa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ea4:	f7ff ff0c 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ea8:	e002      	b.n	8003eb0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003eaa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003eac:	f7ff feed 	bl	8003c8a <HAL_UART_RxCpltCallback>
}
 8003eb0:	bf00      	nop
 8003eb2:	3770      	adds	r7, #112	; 0x70
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d108      	bne.n	8003ee6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	4619      	mov	r1, r3
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7ff feee 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ee4:	e002      	b.n	8003eec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7ff fed8 	bl	8003c9c <HAL_UART_RxHalfCpltCallback>
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b21      	cmp	r3, #33	; 0x21
 8003f26:	d108      	bne.n	8003f3a <UART_DMAError+0x46>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2200      	movs	r2, #0
 8003f32:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f34:	68b8      	ldr	r0, [r7, #8]
 8003f36:	f000 f8c1 	bl	80040bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b22      	cmp	r3, #34	; 0x22
 8003f5a:	d108      	bne.n	8003f6e <UART_DMAError+0x7a>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2200      	movs	r2, #0
 8003f66:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f68:	68b8      	ldr	r0, [r7, #8]
 8003f6a:	f000 f8ce 	bl	800410a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	f043 0210 	orr.w	r2, r3, #16
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f7a:	68b8      	ldr	r0, [r7, #8]
 8003f7c:	f7ff fe97 	bl	8003cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b098      	sub	sp, #96	; 0x60
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2222      	movs	r2, #34	; 0x22
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	4a3e      	ldr	r2, [pc, #248]	; (80040b0 <UART_Start_Receive_DMA+0x128>)
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	4a3d      	ldr	r2, [pc, #244]	; (80040b4 <UART_Start_Receive_DMA+0x12c>)
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	4a3c      	ldr	r2, [pc, #240]	; (80040b8 <UART_Start_Receive_DMA+0x130>)
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	2200      	movs	r2, #0
 8003fce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003fd0:	f107 0308 	add.w	r3, r7, #8
 8003fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	f7fd fb6c 	bl	80016c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d019      	beq.n	800403e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800401a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004020:	65bb      	str	r3, [r7, #88]	; 0x58
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800402a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800402c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e5      	bne.n	800400a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	657b      	str	r3, [r7, #84]	; 0x54
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800405e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e5      	bne.n	800403e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	617b      	str	r3, [r7, #20]
   return(result);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004088:	653b      	str	r3, [r7, #80]	; 0x50
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004092:	627a      	str	r2, [r7, #36]	; 0x24
 8004094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6a39      	ldr	r1, [r7, #32]
 8004098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e5      	bne.n	8004072 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3760      	adds	r7, #96	; 0x60
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	08003d8d 	.word	0x08003d8d
 80040b4:	08003eb9 	.word	0x08003eb9
 80040b8:	08003ef5 	.word	0x08003ef5

080040bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	; 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	61ba      	str	r2, [r7, #24]
 80040e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6979      	ldr	r1, [r7, #20]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	613b      	str	r3, [r7, #16]
   return(result);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e5      	bne.n	80040c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004100:	bf00      	nop
 8004102:	3724      	adds	r7, #36	; 0x24
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800410a:	b480      	push	{r7}
 800410c:	b095      	sub	sp, #84	; 0x54
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	330c      	adds	r3, #12
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004132:	643a      	str	r2, [r7, #64]	; 0x40
 8004134:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e5      	bne.n	8004112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3314      	adds	r3, #20
 800414c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	61fb      	str	r3, [r7, #28]
   return(result);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	64bb      	str	r3, [r7, #72]	; 0x48
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3314      	adds	r3, #20
 8004164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800416c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e5      	bne.n	8004146 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	2b01      	cmp	r3, #1
 8004180:	d119      	bne.n	80041b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	60bb      	str	r3, [r7, #8]
   return(result);
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f023 0310 	bic.w	r3, r3, #16
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a2:	61ba      	str	r2, [r7, #24]
 80041a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6979      	ldr	r1, [r7, #20]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	613b      	str	r3, [r7, #16]
   return(result);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041c4:	bf00      	nop
 80041c6:	3754      	adds	r7, #84	; 0x54
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fd60 	bl	8003cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b21      	cmp	r3, #33	; 0x21
 8004208:	d13e      	bne.n	8004288 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004212:	d114      	bne.n	800423e <UART_Transmit_IT+0x48>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d110      	bne.n	800423e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004230:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	1c9a      	adds	r2, r3, #2
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	621a      	str	r2, [r3, #32]
 800423c:	e008      	b.n	8004250 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	1c59      	adds	r1, r3, #1
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6211      	str	r1, [r2, #32]
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29b      	uxth	r3, r3
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4619      	mov	r1, r3
 800425e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10f      	bne.n	8004284 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004272:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004282:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fc fe83 	bl	8000fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08c      	sub	sp, #48	; 0x30
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b22      	cmp	r3, #34	; 0x22
 80042d6:	f040 80ae 	bne.w	8004436 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e2:	d117      	bne.n	8004314 <UART_Receive_IT+0x50>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d113      	bne.n	8004314 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004302:	b29a      	uxth	r2, r3
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	1c9a      	adds	r2, r3, #2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	629a      	str	r2, [r3, #40]	; 0x28
 8004312:	e026      	b.n	8004362 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004326:	d007      	beq.n	8004338 <UART_Receive_IT+0x74>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <UART_Receive_IT+0x82>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	b2da      	uxtb	r2, r3
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e008      	b.n	8004358 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004352:	b2da      	uxtb	r2, r3
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4619      	mov	r1, r3
 8004370:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004372:	2b00      	cmp	r3, #0
 8004374:	d15d      	bne.n	8004432 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0220 	bic.w	r2, r2, #32
 8004384:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004394:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d135      	bne.n	8004428 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	613b      	str	r3, [r7, #16]
   return(result);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f023 0310 	bic.w	r3, r3, #16
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	623a      	str	r2, [r7, #32]
 80043e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	69f9      	ldr	r1, [r7, #28]
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e5      	bne.n	80043c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b10      	cmp	r3, #16
 8004402:	d10a      	bne.n	800441a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800441e:	4619      	mov	r1, r3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff fc4d 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
 8004426:	e002      	b.n	800442e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff fc2e 	bl	8003c8a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	e002      	b.n	8004438 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e000      	b.n	8004438 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3730      	adds	r7, #48	; 0x30
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800447a:	f023 030c 	bic.w	r3, r3, #12
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	430b      	orrs	r3, r1
 8004486:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2c      	ldr	r2, [pc, #176]	; (8004554 <UART_SetConfig+0x114>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d103      	bne.n	80044b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7fe fade 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	e002      	b.n	80044b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044b0:	f7fe fac6 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 80044b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009a      	lsls	r2, r3, #2
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	4a22      	ldr	r2, [pc, #136]	; (8004558 <UART_SetConfig+0x118>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	0119      	lsls	r1, r3, #4
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009a      	lsls	r2, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <UART_SetConfig+0x118>)
 80044ee:	fba3 0302 	umull	r0, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2064      	movs	r0, #100	; 0x64
 80044f6:	fb00 f303 	mul.w	r3, r0, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	3332      	adds	r3, #50	; 0x32
 8004500:	4a15      	ldr	r2, [pc, #84]	; (8004558 <UART_SetConfig+0x118>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450c:	4419      	add	r1, r3
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009a      	lsls	r2, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	fbb2 f2f3 	udiv	r2, r2, r3
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <UART_SetConfig+0x118>)
 8004526:	fba3 0302 	umull	r0, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2064      	movs	r0, #100	; 0x64
 800452e:	fb00 f303 	mul.w	r3, r0, r3
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	4a07      	ldr	r2, [pc, #28]	; (8004558 <UART_SetConfig+0x118>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 020f 	and.w	r2, r3, #15
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	440a      	add	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40013800 	.word	0x40013800
 8004558:	51eb851f 	.word	0x51eb851f

0800455c <slave_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void slave_crc16(modbus_slave *slave, uint8_t *buffer)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
    slave->crc_hi = 0xFF;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	719a      	strb	r2, [r3, #6]
    slave->crc_lo = 0xFF;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	22ff      	movs	r2, #255	; 0xff
 8004570:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 8004572:	e01c      	b.n	80045ae <slave_crc16+0x52>
    {
        slave->buff_index = slave->crc_hi ^ *buffer++;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	799a      	ldrb	r2, [r3, #6]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	1c59      	adds	r1, r3, #1
 800457c:	6039      	str	r1, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	4053      	eors	r3, r2
 8004582:	b2db      	uxtb	r3, r3
 8004584:	b29a      	uxth	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	815a      	strh	r2, [r3, #10]
        slave->crc_hi = slave->crc_lo ^ crc_hi[slave->buff_index];
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	79da      	ldrb	r2, [r3, #7]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	895b      	ldrh	r3, [r3, #10]
 8004592:	4619      	mov	r1, r3
 8004594:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <slave_crc16+0x70>)
 8004596:	5c5b      	ldrb	r3, [r3, r1]
 8004598:	4053      	eors	r3, r2
 800459a:	b2da      	uxtb	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	719a      	strb	r2, [r3, #6]
        slave->crc_lo = crc_lo[slave->buff_index];
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	895b      	ldrh	r3, [r3, #10]
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <slave_crc16+0x74>)
 80045a8:	5c9a      	ldrb	r2, [r3, r2]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	891b      	ldrh	r3, [r3, #8]
 80045b2:	1e5a      	subs	r2, r3, #1
 80045b4:	b291      	uxth	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	8111      	strh	r1, [r2, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1da      	bne.n	8004574 <slave_crc16+0x18>
    }
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	08008f74 	.word	0x08008f74
 80045d0:	08009074 	.word	0x08009074

080045d4 <slave_validate_cmd>:

static osStatus_t slave_validate_cmd(modbus_slave *slave)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	if(slave->rx_len == 8 && slave->rx_buf[0] == 254 && slave->rx_buf[1] == 6)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d137      	bne.n	8004656 <slave_validate_cmd+0x82>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	7b1b      	ldrb	r3, [r3, #12]
 80045ea:	2bfe      	cmp	r3, #254	; 0xfe
 80045ec:	d133      	bne.n	8004656 <slave_validate_cmd+0x82>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	7b5b      	ldrb	r3, [r3, #13]
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d12f      	bne.n	8004656 <slave_validate_cmd+0x82>
	{
	    if(slave->rx_buf[3] == 0)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7bdb      	ldrb	r3, [r3, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <slave_validate_cmd+0x3a>
	    {
	    	slave->regs->holdings[50] = slave->rx_buf[5];
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	7c5a      	ldrb	r2, [r3, #17]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004608:	b212      	sxth	r2, r2
 800460a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	    }
	    if(slave->rx_buf[3] == 1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	7bdb      	ldrb	r3, [r3, #15]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d107      	bne.n	8004626 <slave_validate_cmd+0x52>
	    {
	    	slave->regs->holdings[51] = slave->rx_buf[5];
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7c5a      	ldrb	r2, [r3, #17]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004620:	b212      	sxth	r2, r2
 8004622:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	    }
	    if(slave->rx_buf[3] == 2)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7bdb      	ldrb	r3, [r3, #15]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d107      	bne.n	800463e <slave_validate_cmd+0x6a>
	    {
	    	slave->regs->holdings[52] = slave->rx_buf[5];
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	7c5a      	ldrb	r2, [r3, #17]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004638:	b212      	sxth	r2, r2
 800463a:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	    }
	    if(slave->rx_buf[3] == 5)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	7bdb      	ldrb	r3, [r3, #15]
 8004642:	2b05      	cmp	r3, #5
 8004644:	d107      	bne.n	8004656 <slave_validate_cmd+0x82>
	    {
	    	slave->regs->holdings[53] = slave->rx_buf[5];
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	7c5a      	ldrb	r2, [r3, #17]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004650:	b212      	sxth	r2, r2
 8004652:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	    }
	}

    if (slave->rx_len < 8 || slave->rx_buf[0] != slave->slave_id)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800465c:	2b07      	cmp	r3, #7
 800465e:	d905      	bls.n	800466c <slave_validate_cmd+0x98>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	7b1a      	ldrb	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	791b      	ldrb	r3, [r3, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d002      	beq.n	8004672 <slave_validate_cmd+0x9e>
    {
    	return osError;
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
 8004670:	e026      	b.n	80046c0 <slave_validate_cmd+0xec>
    }
    slave->buff_len = slave->rx_len - 2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8004678:	3b02      	subs	r3, #2
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->rx_buf);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	330c      	adds	r3, #12
 8004684:	4619      	mov	r1, r3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ff68 	bl	800455c <slave_crc16>
    if ((slave->crc_hi != slave->rx_buf[slave->rx_len - 2]) || (slave->crc_lo != slave->rx_buf[slave->rx_len - 1]))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	799a      	ldrb	r2, [r3, #6]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8004696:	3b02      	subs	r3, #2
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	440b      	add	r3, r1
 800469c:	7b1b      	ldrb	r3, [r3, #12]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d10a      	bne.n	80046b8 <slave_validate_cmd+0xe4>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	79da      	ldrb	r2, [r3, #7]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80046ac:	3b01      	subs	r3, #1
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	440b      	add	r3, r1
 80046b2:	7b1b      	ldrb	r3, [r3, #12]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d002      	beq.n	80046be <slave_validate_cmd+0xea>
    {
        return osError;
 80046b8:	f04f 33ff 	mov.w	r3, #4294967295
 80046bc:	e000      	b.n	80046c0 <slave_validate_cmd+0xec>
    }
    return osOK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <slave_handle_read_discs>:

static void slave_handle_read_discs(modbus_slave *slave)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	7b9b      	ldrb	r3, [r3, #14]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	b29a      	uxth	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	7bdb      	ldrb	r3, [r3, #15]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7c1b      	ldrb	r3, [r3, #16]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	7c5b      	ldrb	r3, [r3, #17]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	b291      	uxth	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004710:	4619      	mov	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	791a      	ldrb	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	440b      	add	r3, r1
 800471a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 800471e:	8a7a      	ldrh	r2, [r7, #18]
 8004720:	8a3b      	ldrh	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004728:	dd20      	ble.n	800476c <slave_handle_read_discs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	7b5a      	ldrb	r2, [r3, #13]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	b288      	uxth	r0, r1
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 800473e:	4619      	mov	r1, r3
 8004740:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8004744:	b2da      	uxtb	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	440b      	add	r3, r1
 800474a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	b291      	uxth	r1, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800475e:	461a      	mov	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4413      	add	r3, r2
 8004764:	2202      	movs	r2, #2
 8004766:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 800476a:	e072      	b.n	8004852 <slave_handle_read_discs+0x18a>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 800476c:	8a3b      	ldrh	r3, [r7, #16]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d103      	bne.n	8004780 <slave_handle_read_discs+0xb8>
 8004778:	8a3b      	ldrh	r3, [r7, #16]
 800477a:	08db      	lsrs	r3, r3, #3
 800477c:	b29b      	uxth	r3, r3
 800477e:	e004      	b.n	800478a <slave_handle_read_discs+0xc2>
 8004780:	8a3b      	ldrh	r3, [r7, #16]
 8004782:	08db      	lsrs	r3, r3, #3
 8004784:	b29b      	uxth	r3, r3
 8004786:	3301      	adds	r3, #1
 8004788:	b29b      	uxth	r3, r3
 800478a:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	b291      	uxth	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80047a0:	4619      	mov	r1, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	7b5a      	ldrb	r2, [r3, #13]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	440b      	add	r3, r1
 80047aa:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = byte_count;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	b291      	uxth	r1, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80047be:	4619      	mov	r1, r3
 80047c0:	89fb      	ldrh	r3, [r7, #14]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	440b      	add	r3, r1
 80047c8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 80047cc:	2300      	movs	r3, #0
 80047ce:	82bb      	strh	r3, [r7, #20]
 80047d0:	e03a      	b.n	8004848 <slave_handle_read_discs+0x180>
            if (i % 8 == 0)
 80047d2:	8abb      	ldrh	r3, [r7, #20]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <slave_handle_read_discs+0x11a>
                byte_data = 0x00;
 80047de:	2300      	movs	r3, #0
 80047e0:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 80047e2:	8aba      	ldrh	r2, [r7, #20]
 80047e4:	8a3b      	ldrh	r3, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d214      	bcs.n	8004814 <slave_handle_read_discs+0x14c>
                byte_data = (slave->regs->discs[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80047f0:	8a79      	ldrh	r1, [r7, #18]
 80047f2:	8abb      	ldrh	r3, [r7, #20]
 80047f4:	440b      	add	r3, r1
 80047f6:	5cd3      	ldrb	r3, [r2, r3]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d106      	bne.n	800480a <slave_handle_read_discs+0x142>
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e002      	b.n	8004810 <slave_handle_read_discs+0x148>
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	75fb      	strb	r3, [r7, #23]
 8004812:	e002      	b.n	800481a <slave_handle_read_discs+0x152>
                byte_data = byte_data >> 1 & 0x7F;
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 800481a:	8abb      	ldrh	r3, [r7, #20]
 800481c:	3301      	adds	r3, #1
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10d      	bne.n	8004842 <slave_handle_read_discs+0x17a>
                slave->tx_buf[slave->tx_len++] = byte_data;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	b291      	uxth	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	7dfa      	ldrb	r2, [r7, #23]
 800483e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8004842:	8abb      	ldrh	r3, [r7, #20]
 8004844:	3301      	adds	r3, #1
 8004846:	82bb      	strh	r3, [r7, #20]
 8004848:	8aba      	ldrh	r2, [r7, #20]
 800484a:	89fb      	ldrh	r3, [r7, #14]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	429a      	cmp	r2, r3
 8004850:	dbbf      	blt.n	80047d2 <slave_handle_read_discs+0x10a>
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <slave_handle_read_coils>:

static void slave_handle_read_coils(modbus_slave *slave)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	7b9b      	ldrb	r3, [r3, #14]
 8004868:	b29b      	uxth	r3, r3
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	7bdb      	ldrb	r3, [r3, #15]
 8004872:	b29b      	uxth	r3, r3
 8004874:	4413      	add	r3, r2
 8004876:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	7c1b      	ldrb	r3, [r3, #16]
 800487c:	b29b      	uxth	r3, r3
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	7c5b      	ldrb	r3, [r3, #17]
 8004886:	b29b      	uxth	r3, r3
 8004888:	4413      	add	r3, r2
 800488a:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	b291      	uxth	r1, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80048a4:	4619      	mov	r1, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	791a      	ldrb	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	440b      	add	r3, r1
 80048ae:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 80048b2:	8a7a      	ldrh	r2, [r7, #18]
 80048b4:	8a3b      	ldrh	r3, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048bc:	dd20      	ble.n	8004900 <slave_handle_read_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	7b5a      	ldrb	r2, [r3, #13]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80048c8:	1c59      	adds	r1, r3, #1
 80048ca:	b288      	uxth	r0, r1
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80048d2:	4619      	mov	r1, r3
 80048d4:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	440b      	add	r3, r1
 80048de:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	b291      	uxth	r1, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 80048fe:	e073      	b.n	80049e8 <slave_handle_read_coils+0x18c>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 8004900:	8a3b      	ldrh	r3, [r7, #16]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <slave_handle_read_coils+0xb8>
 800490c:	8a3b      	ldrh	r3, [r7, #16]
 800490e:	08db      	lsrs	r3, r3, #3
 8004910:	b29b      	uxth	r3, r3
 8004912:	e004      	b.n	800491e <slave_handle_read_coils+0xc2>
 8004914:	8a3b      	ldrh	r3, [r7, #16]
 8004916:	08db      	lsrs	r3, r3, #3
 8004918:	b29b      	uxth	r3, r3
 800491a:	3301      	adds	r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	b291      	uxth	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004934:	4619      	mov	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	7b5a      	ldrb	r2, [r3, #13]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	440b      	add	r3, r1
 800493e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = byte_count;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	b291      	uxth	r1, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004952:	4619      	mov	r1, r3
 8004954:	89fb      	ldrh	r3, [r7, #14]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	440b      	add	r3, r1
 800495c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8004960:	2300      	movs	r3, #0
 8004962:	82bb      	strh	r3, [r7, #20]
 8004964:	e03b      	b.n	80049de <slave_handle_read_coils+0x182>
            if (i % 8 == 0)
 8004966:	8abb      	ldrh	r3, [r7, #20]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <slave_handle_read_coils+0x11a>
                byte_data = 0x00;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 8004976:	8aba      	ldrh	r2, [r7, #20]
 8004978:	8a3b      	ldrh	r3, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d215      	bcs.n	80049aa <slave_handle_read_coils+0x14e>
                byte_data = (slave->regs->coils[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004984:	8a79      	ldrh	r1, [r7, #18]
 8004986:	8abb      	ldrh	r3, [r7, #20]
 8004988:	440b      	add	r3, r1
 800498a:	4413      	add	r3, r2
 800498c:	7c1b      	ldrb	r3, [r3, #16]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d106      	bne.n	80049a0 <slave_handle_read_coils+0x144>
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e002      	b.n	80049a6 <slave_handle_read_coils+0x14a>
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	75fb      	strb	r3, [r7, #23]
 80049a8:	e002      	b.n	80049b0 <slave_handle_read_coils+0x154>
                byte_data = byte_data >> 1 & 0x7F;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 80049b0:	8abb      	ldrh	r3, [r7, #20]
 80049b2:	3301      	adds	r3, #1
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10d      	bne.n	80049d8 <slave_handle_read_coils+0x17c>
                slave->tx_buf[slave->tx_len++] = byte_data;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	b291      	uxth	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80049cc:	461a      	mov	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	7dfa      	ldrb	r2, [r7, #23]
 80049d4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 80049d8:	8abb      	ldrh	r3, [r7, #20]
 80049da:	3301      	adds	r3, #1
 80049dc:	82bb      	strh	r3, [r7, #20]
 80049de:	8aba      	ldrh	r2, [r7, #20]
 80049e0:	89fb      	ldrh	r3, [r7, #14]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	429a      	cmp	r2, r3
 80049e6:	dbbe      	blt.n	8004966 <slave_handle_read_coils+0x10a>
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <slave_handle_read_input_regs>:

static void slave_handle_read_input_regs(modbus_slave *slave)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	7b9b      	ldrb	r3, [r3, #14]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7bdb      	ldrb	r3, [r3, #15]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7c1b      	ldrb	r3, [r3, #16]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	7c5b      	ldrb	r3, [r3, #17]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	b291      	uxth	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	791a      	ldrb	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	440b      	add	r3, r1
 8004a44:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8004a48:	89ba      	ldrh	r2, [r7, #12]
 8004a4a:	897b      	ldrh	r3, [r7, #10]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a52:	dd20      	ble.n	8004a96 <slave_handle_read_input_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7b5a      	ldrb	r2, [r3, #13]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	b288      	uxth	r0, r1
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8004a68:	4619      	mov	r1, r3
 8004a6a:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	440b      	add	r3, r1
 8004a74:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	b291      	uxth	r1, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
        }
    }
}
 8004a94:	e059      	b.n	8004b4a <slave_handle_read_input_regs+0x158>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	b291      	uxth	r1, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7b5a      	ldrb	r2, [r3, #13]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	440b      	add	r3, r1
 8004ab0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 8004ab4:	897b      	ldrh	r3, [r7, #10]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	b288      	uxth	r0, r1
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8004ac8:	4619      	mov	r1, r3
 8004aca:	0053      	lsls	r3, r2, #1
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	81fb      	strh	r3, [r7, #14]
 8004ada:	e032      	b.n	8004b42 <slave_handle_read_input_regs+0x150>
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004ae2:	89f9      	ldrh	r1, [r7, #14]
 8004ae4:	89ba      	ldrh	r2, [r7, #12]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	3210      	adds	r2, #16
 8004aea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004aee:	121b      	asrs	r3, r3, #8
 8004af0:	b218      	sxth	r0, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	b291      	uxth	r1, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004b02:	4619      	mov	r1, r3
 8004b04:	b2c2      	uxtb	r2, r0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	440b      	add	r3, r1
 8004b0a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004b14:	89f9      	ldrh	r1, [r7, #14]
 8004b16:	89ba      	ldrh	r2, [r7, #12]
 8004b18:	440a      	add	r2, r1
 8004b1a:	3210      	adds	r2, #16
 8004b1c:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	b291      	uxth	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004b30:	4619      	mov	r1, r3
 8004b32:	b2c2      	uxtb	r2, r0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	440b      	add	r3, r1
 8004b38:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8004b3c:	89fb      	ldrh	r3, [r7, #14]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	81fb      	strh	r3, [r7, #14]
 8004b42:	89fa      	ldrh	r2, [r7, #14]
 8004b44:	897b      	ldrh	r3, [r7, #10]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d3c8      	bcc.n	8004adc <slave_handle_read_input_regs+0xea>
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <slave_handle_read_holding_regs>:

static void slave_handle_read_holding_regs(modbus_slave *slave)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7b9b      	ldrb	r3, [r3, #14]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	7bdb      	ldrb	r3, [r3, #15]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	7c1b      	ldrb	r3, [r3, #16]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7c5b      	ldrb	r3, [r3, #17]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	b291      	uxth	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	791a      	ldrb	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	440b      	add	r3, r1
 8004ba6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8004baa:	89ba      	ldrh	r2, [r7, #12]
 8004bac:	897b      	ldrh	r3, [r7, #10]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb4:	dd20      	ble.n	8004bf8 <slave_handle_read_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	7b5a      	ldrb	r2, [r3, #13]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004bc0:	1c59      	adds	r1, r3, #1
 8004bc2:	b288      	uxth	r0, r1
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	440b      	add	r3, r1
 8004bd6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	b291      	uxth	r1, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004bea:	461a      	mov	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4413      	add	r3, r2
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
        }
    }
}
 8004bf6:	e059      	b.n	8004cac <slave_handle_read_holding_regs+0x158>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	b291      	uxth	r1, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004c08:	4619      	mov	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	7b5a      	ldrb	r2, [r3, #13]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	440b      	add	r3, r1
 8004c12:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004c20:	1c59      	adds	r1, r3, #1
 8004c22:	b288      	uxth	r0, r1
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	0053      	lsls	r3, r2, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	440b      	add	r3, r1
 8004c34:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	81fb      	strh	r3, [r7, #14]
 8004c3c:	e032      	b.n	8004ca4 <slave_handle_read_holding_regs+0x150>
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004c44:	89f9      	ldrh	r1, [r7, #14]
 8004c46:	89ba      	ldrh	r2, [r7, #12]
 8004c48:	440a      	add	r2, r1
 8004c4a:	3250      	adds	r2, #80	; 0x50
 8004c4c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004c50:	121b      	asrs	r3, r3, #8
 8004c52:	b218      	sxth	r0, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	b291      	uxth	r1, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004c64:	4619      	mov	r1, r3
 8004c66:	b2c2      	uxtb	r2, r0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004c76:	89f9      	ldrh	r1, [r7, #14]
 8004c78:	89ba      	ldrh	r2, [r7, #12]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	3250      	adds	r2, #80	; 0x50
 8004c7e:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	b291      	uxth	r1, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004c92:	4619      	mov	r1, r3
 8004c94:	b2c2      	uxtb	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	440b      	add	r3, r1
 8004c9a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8004c9e:	89fb      	ldrh	r3, [r7, #14]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	81fb      	strh	r3, [r7, #14]
 8004ca4:	89fa      	ldrh	r2, [r7, #14]
 8004ca6:	897b      	ldrh	r3, [r7, #10]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d3c8      	bcc.n	8004c3e <slave_handle_read_holding_regs+0xea>
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <slave_compose_write_reply_tx_buffer>:

static void slave_compose_write_reply_tx_buffer(modbus_slave *slave)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	b291      	uxth	r1, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004cce:	4619      	mov	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	7b5a      	ldrb	r2, [r3, #13]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[2];
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	b291      	uxth	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004cec:	4619      	mov	r1, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	7b9a      	ldrb	r2, [r3, #14]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	440b      	add	r3, r1
 8004cf6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[3];
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	b291      	uxth	r1, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7bda      	ldrb	r2, [r3, #15]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	440b      	add	r3, r1
 8004d14:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[4];
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	b291      	uxth	r1, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004d28:	4619      	mov	r1, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	7c1a      	ldrb	r2, [r3, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	440b      	add	r3, r1
 8004d32:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[5];
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	b291      	uxth	r1, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004d46:	4619      	mov	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7c5a      	ldrb	r2, [r3, #17]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	440b      	add	r3, r1
 8004d50:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <slave_handle_write_single_coil>:

static void slave_handle_write_single_coil(modbus_slave *slave)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7b9b      	ldrb	r3, [r3, #14]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7bdb      	ldrb	r3, [r3, #15]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	b291      	uxth	r1, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004d92:	4619      	mov	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	791a      	ldrb	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + 1 > MODBUS_REG_LENGTH)
 8004da0:	89fb      	ldrh	r3, [r7, #14]
 8004da2:	2bff      	cmp	r3, #255	; 0xff
 8004da4:	d920      	bls.n	8004de8 <slave_handle_write_single_coil+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	7b5a      	ldrb	r2, [r3, #13]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004db0:	1c59      	adds	r1, r3, #1
 8004db2:	b288      	uxth	r0, r1
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	440b      	add	r3, r1
 8004dc6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	b291      	uxth	r1, r2
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
    }
}
 8004de6:	e010      	b.n	8004e0a <slave_handle_write_single_coil+0xac>
        slave_compose_write_reply_tx_buffer(slave);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff64 	bl	8004cb6 <slave_compose_write_reply_tx_buffer>
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	7c1b      	ldrb	r3, [r3, #16]
 8004df2:	2bff      	cmp	r3, #255	; 0xff
 8004df4:	bf0c      	ite	eq
 8004df6:	2301      	moveq	r3, #1
 8004df8:	2300      	movne	r3, #0
 8004dfa:	b2d9      	uxtb	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e02:	89fb      	ldrh	r3, [r7, #14]
 8004e04:	4413      	add	r3, r2
 8004e06:	460a      	mov	r2, r1
 8004e08:	741a      	strb	r2, [r3, #16]
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <slave_handle_write_multi_coils>:

static void slave_handle_write_multi_coils(modbus_slave *slave)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7b9b      	ldrb	r3, [r3, #14]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	7bdb      	ldrb	r3, [r3, #15]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	7c1b      	ldrb	r3, [r3, #16]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	7c5b      	ldrb	r3, [r3, #17]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	b291      	uxth	r1, r2
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	791a      	ldrb	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	440b      	add	r3, r1
 8004e64:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8004e68:	89ba      	ldrh	r2, [r7, #12]
 8004e6a:	897b      	ldrh	r3, [r7, #10]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	dd20      	ble.n	8004eb6 <slave_handle_write_multi_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7b5a      	ldrb	r2, [r3, #13]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004e7e:	1c59      	adds	r1, r3, #1
 8004e80:	b288      	uxth	r0, r1
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	440b      	add	r3, r1
 8004e94:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	b291      	uxth	r1, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
        }
    }
}
 8004eb4:	e026      	b.n	8004f04 <slave_handle_write_multi_coils+0xf2>
        slave_compose_write_reply_tx_buffer(slave);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff fefd 	bl	8004cb6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	81fb      	strh	r3, [r7, #14]
 8004ec0:	e01c      	b.n	8004efc <slave_handle_write_multi_coils+0xea>
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
 8004ec2:	89fb      	ldrh	r3, [r7, #14]
 8004ec4:	08db      	lsrs	r3, r3, #3
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3307      	adds	r3, #7
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	7b1b      	ldrb	r3, [r3, #12]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	89fb      	ldrh	r3, [r7, #14]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	fa42 f303 	asr.w	r3, r2, r3
 8004edc:	b2d9      	uxtb	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004ee4:	89b8      	ldrh	r0, [r7, #12]
 8004ee6:	89fb      	ldrh	r3, [r7, #14]
 8004ee8:	4403      	add	r3, r0
 8004eea:	f001 0101 	and.w	r1, r1, #1
 8004eee:	b2c9      	uxtb	r1, r1
 8004ef0:	4413      	add	r3, r2
 8004ef2:	460a      	mov	r2, r1
 8004ef4:	741a      	strb	r2, [r3, #16]
        for (uint16_t i = 0; i < qty; i++)
 8004ef6:	89fb      	ldrh	r3, [r7, #14]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	81fb      	strh	r3, [r7, #14]
 8004efc:	89fa      	ldrh	r2, [r7, #14]
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d3de      	bcc.n	8004ec2 <slave_handle_write_multi_coils+0xb0>
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <slave_handle_write_single_holding_reg>:

static void slave_handle_write_single_holding_reg(modbus_slave *slave)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7b9b      	ldrb	r3, [r3, #14]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7bdb      	ldrb	r3, [r3, #15]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	b291      	uxth	r1, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004f40:	4619      	mov	r1, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	791a      	ldrb	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	440b      	add	r3, r1
 8004f4a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + 1 > MODBUS_REG_LENGTH)
 8004f4e:	89fb      	ldrh	r3, [r7, #14]
 8004f50:	2bff      	cmp	r3, #255	; 0xff
 8004f52:	d920      	bls.n	8004f96 <slave_handle_write_single_holding_reg+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	7b5a      	ldrb	r2, [r3, #13]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	b288      	uxth	r0, r1
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	440b      	add	r3, r1
 8004f74:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	b291      	uxth	r1, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8004f88:	461a      	mov	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
    }
}
 8004f94:	e014      	b.n	8004fc0 <slave_handle_write_single_holding_reg+0xb4>
        slave_compose_write_reply_tx_buffer(slave);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fe8d 	bl	8004cb6 <slave_compose_write_reply_tx_buffer>
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	7c1b      	ldrb	r3, [r3, #16]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	7c5b      	ldrb	r3, [r3, #17]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4413      	add	r3, r2
 8004fae:	b299      	uxth	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004fb6:	89fa      	ldrh	r2, [r7, #14]
 8004fb8:	b209      	sxth	r1, r1
 8004fba:	3250      	adds	r2, #80	; 0x50
 8004fbc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8004fc0:	bf00      	nop
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <slave_handle_write_multi_holding_regs>:

static void slave_handle_write_multi_holding_regs(modbus_slave *slave)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	7b9b      	ldrb	r3, [r3, #14]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	7bdb      	ldrb	r3, [r3, #15]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	7c1b      	ldrb	r3, [r3, #16]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	7c5b      	ldrb	r3, [r3, #17]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	b291      	uxth	r1, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8005010:	4619      	mov	r1, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	791a      	ldrb	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	440b      	add	r3, r1
 800501a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 800501e:	89ba      	ldrh	r2, [r7, #12]
 8005020:	897b      	ldrh	r3, [r7, #10]
 8005022:	4413      	add	r3, r2
 8005024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005028:	dd20      	ble.n	800506c <slave_handle_write_multi_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7b5a      	ldrb	r2, [r3, #13]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005034:	1c59      	adds	r1, r3, #1
 8005036:	b288      	uxth	r0, r1
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 800503e:	4619      	mov	r1, r3
 8005040:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8005044:	b2da      	uxtb	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	440b      	add	r3, r1
 800504a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	b291      	uxth	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800505e:	461a      	mov	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4413      	add	r3, r2
 8005064:	2202      	movs	r2, #2
 8005066:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
        }
    }
}
 800506a:	e028      	b.n	80050be <slave_handle_write_multi_holding_regs+0xf6>
        slave_compose_write_reply_tx_buffer(slave);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff fe22 	bl	8004cb6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	81fb      	strh	r3, [r7, #14]
 8005076:	e01e      	b.n	80050b6 <slave_handle_write_multi_holding_regs+0xee>
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
 8005078:	89fb      	ldrh	r3, [r7, #14]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	3307      	adds	r3, #7
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	7b1b      	ldrb	r3, [r3, #12]
 8005084:	b29b      	uxth	r3, r3
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	b29a      	uxth	r2, r3
 800508a:	89fb      	ldrh	r3, [r7, #14]
 800508c:	3304      	adds	r3, #4
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	440b      	add	r3, r1
 8005094:	7b1b      	ldrb	r3, [r3, #12]
 8005096:	b29b      	uxth	r3, r3
 8005098:	4413      	add	r3, r2
 800509a:	b298      	uxth	r0, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80050a2:	89b9      	ldrh	r1, [r7, #12]
 80050a4:	89fa      	ldrh	r2, [r7, #14]
 80050a6:	440a      	add	r2, r1
 80050a8:	b201      	sxth	r1, r0
 80050aa:	3250      	adds	r2, #80	; 0x50
 80050ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint16_t i = 0; i < qty; i++)
 80050b0:	89fb      	ldrh	r3, [r7, #14]
 80050b2:	3301      	adds	r3, #1
 80050b4:	81fb      	strh	r3, [r7, #14]
 80050b6:	89fa      	ldrh	r2, [r7, #14]
 80050b8:	897b      	ldrh	r3, [r7, #10]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d3dc      	bcc.n	8005078 <slave_handle_write_multi_holding_regs+0xb0>
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <slave_response>:

static void slave_response(modbus_slave *slave)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
    if (slave_validate_cmd(slave) != osOK)
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7ff fa80 	bl	80045d4 <slave_validate_cmd>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 80b2 	bne.w	8005240 <slave_response+0x17a>
    {
        return;
    }
    slave->func_code = slave->rx_buf[1];
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	7b5a      	ldrb	r2, [r3, #13]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	715a      	strb	r2, [r3, #5]
    if (slave->func_code == MODBUS_FC_READ_DISCRETE_INPUTS)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	795b      	ldrb	r3, [r3, #5]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d103      	bne.n	80050f4 <slave_response+0x2e>
    {
        slave_handle_read_discs(slave);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff faeb 	bl	80046c8 <slave_handle_read_discs>
 80050f2:	e06a      	b.n	80051ca <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_COILS)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	795b      	ldrb	r3, [r3, #5]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d103      	bne.n	8005104 <slave_response+0x3e>
    {
        slave_handle_read_coils(slave);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fbad 	bl	800485c <slave_handle_read_coils>
 8005102:	e062      	b.n	80051ca <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_INPUT_REGISTERS)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	795b      	ldrb	r3, [r3, #5]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d103      	bne.n	8005114 <slave_response+0x4e>
    {
        slave_handle_read_input_regs(slave);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff fc70 	bl	80049f2 <slave_handle_read_input_regs>
 8005112:	e05a      	b.n	80051ca <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_HOLDING_REGISTERS)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	795b      	ldrb	r3, [r3, #5]
 8005118:	2b03      	cmp	r3, #3
 800511a:	d103      	bne.n	8005124 <slave_response+0x5e>
    {
        slave_handle_read_holding_regs(slave);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff fd19 	bl	8004b54 <slave_handle_read_holding_regs>
 8005122:	e052      	b.n	80051ca <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_COIL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	795b      	ldrb	r3, [r3, #5]
 8005128:	2b05      	cmp	r3, #5
 800512a:	d103      	bne.n	8005134 <slave_response+0x6e>
    {
        slave_handle_write_single_coil(slave);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff fe16 	bl	8004d5e <slave_handle_write_single_coil>
 8005132:	e04a      	b.n	80051ca <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_COILS)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	795b      	ldrb	r3, [r3, #5]
 8005138:	2b0f      	cmp	r3, #15
 800513a:	d103      	bne.n	8005144 <slave_response+0x7e>
    {
        slave_handle_write_multi_coils(slave);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fe68 	bl	8004e12 <slave_handle_write_multi_coils>
 8005142:	e042      	b.n	80051ca <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_REGISTER)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	795b      	ldrb	r3, [r3, #5]
 8005148:	2b06      	cmp	r3, #6
 800514a:	d103      	bne.n	8005154 <slave_response+0x8e>
    {
        slave_handle_write_single_holding_reg(slave);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff fedd 	bl	8004f0c <slave_handle_write_single_holding_reg>
 8005152:	e03a      	b.n	80051ca <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_REGISTERS)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	795b      	ldrb	r3, [r3, #5]
 8005158:	2b10      	cmp	r3, #16
 800515a:	d103      	bne.n	8005164 <slave_response+0x9e>
    {
        slave_handle_write_multi_holding_regs(slave);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff33 	bl	8004fc8 <slave_handle_write_multi_holding_regs>
 8005162:	e032      	b.n	80051ca <slave_response+0x104>
    }
    else
    {
        slave->tx_len = 0;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	b291      	uxth	r1, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800517c:	4619      	mov	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	791a      	ldrb	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	440b      	add	r3, r1
 8005186:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	7b5a      	ldrb	r2, [r3, #13]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005194:	1c59      	adds	r1, r3, #1
 8005196:	b288      	uxth	r0, r1
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 800519e:	4619      	mov	r1, r3
 80051a0:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	440b      	add	r3, r1
 80051aa:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x01;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	b291      	uxth	r1, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80051be:	461a      	mov	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    }
    slave->buff_len = slave->tx_len;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->tx_buf);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff f9bd 	bl	800455c <slave_crc16>
    slave->tx_buf[slave->tx_len++] = slave->crc_hi;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	b291      	uxth	r1, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80051f2:	4619      	mov	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	799a      	ldrb	r2, [r3, #6]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	440b      	add	r3, r1
 80051fc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->crc_lo;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	b291      	uxth	r1, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8005210:	4619      	mov	r1, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	79da      	ldrb	r2, [r3, #7]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	440b      	add	r3, r1
 800521a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave_set_tx_rx(slave, tx);
 800521e:	2101      	movs	r1, #1
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f8ab 	bl	800537c <slave_set_tx_rx>
    HAL_UART_Transmit_DMA(slave->uart_port->uart, slave->tx_buf, slave->tx_len);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 7187 	add.w	r1, r3, #270	; 0x10e
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005238:	461a      	mov	r2, r3
 800523a:	f7fe f977 	bl	800352c <HAL_UART_Transmit_DMA>
 800523e:	e000      	b.n	8005242 <slave_response+0x17c>
        return;
 8005240:	bf00      	nop
}
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <ostimer_callback>:

static void ostimer_callback(void *args)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
    modbus_slave *slave = args;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60fb      	str	r3, [r7, #12]
    if (slave->rx_len == (MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->CNDTR))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800526c:	429a      	cmp	r2, r3
 800526e:	d109      	bne.n	8005284 <ostimer_callback+0x3c>
    {
        slave->idle_timer_flag = 1;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
        osSemaphoreRelease(slave->idle_sem);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fbe8 	bl	8005a54 <osSemaphoreRelease>
    }
}
 8005284:	bf00      	nop
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <slave_init>:

void slave_init(modbus_slave *slave, modbus_port *port, uint16_t slave_id, modbus_regs *regs_ptr)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	80fb      	strh	r3, [r7, #6]
    slave->idle_sem = osSemaphoreNew(1, 0, NULL);
 800529c:	2200      	movs	r2, #0
 800529e:	2100      	movs	r1, #0
 80052a0:	2001      	movs	r0, #1
 80052a2:	f000 fad5 	bl	8005850 <osSemaphoreNew>
 80052a6:	4602      	mov	r2, r0
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    slave->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)slave, NULL);
 80052ae:	2300      	movs	r3, #0
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	2100      	movs	r1, #0
 80052b4:	4810      	ldr	r0, [pc, #64]	; (80052f8 <slave_init+0x6c>)
 80052b6:	f000 fa07 	bl	80056c8 <osTimerNew>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    slave->uart_port = port;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	601a      	str	r2, [r3, #0]
    slave->slave_id = slave_id;
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	711a      	strb	r2, [r3, #4]
    slave->regs = regs_ptr;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    __HAL_UART_ENABLE_IT(slave->uart_port->uart, UART_IT_IDLE);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0210 	orr.w	r2, r2, #16
 80052ee:	60da      	str	r2, [r3, #12]
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	08005249 	.word	0x08005249

080052fc <slave_uart_idle>:

void slave_uart_idle(modbus_slave *slave)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
    if (((READ_REG(slave->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(slave->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b00      	cmp	r3, #0
 8005314:	d02e      	beq.n	8005374 <slave_uart_idle+0x78>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d025      	beq.n	8005374 <slave_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(slave->uart_port->uart);
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
        slave->rx_len = MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->CNDTR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
        slave->idle_timer_flag = 0;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
        osSemaphoreRelease(slave->idle_sem);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fb70 	bl	8005a54 <osSemaphoreRelease>
    }
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <slave_set_tx_rx>:

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6858      	ldr	r0, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	8919      	ldrh	r1, [r3, #8]
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	2b01      	cmp	r3, #1
 8005398:	bf0c      	ite	eq
 800539a:	2301      	moveq	r3, #1
 800539c:	2300      	movne	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	f7fc ff48 	bl	8002236 <HAL_GPIO_WritePin>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <slave_wait_request>:

void slave_wait_request(modbus_slave *slave)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 80053b6:	e023      	b.n	8005400 <slave_wait_request+0x52>
    {
        if (slave->idle_timer_flag == 0)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d107      	bne.n	80053d2 <slave_wait_request+0x24>
        {
            osTimerStart(slave->idle_timer, 1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053c8:	2101      	movs	r1, #1
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fa00 	bl	80057d0 <osTimerStart>
 80053d0:	e016      	b.n	8005400 <slave_wait_request+0x52>
        }
        else if (slave->idle_timer_flag == 1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d111      	bne.n	8005400 <slave_wait_request+0x52>
        {
            HAL_UART_DMAStop(slave->uart_port->uart);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe f937 	bl	8003656 <HAL_UART_DMAStop>
            slave_response(slave);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff fe6c 	bl	80050c6 <slave_response>
            HAL_UART_Receive_DMA(slave->uart_port->uart, slave->rx_buf, MB_SLAVE_BUFFER_LENGTH);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	330c      	adds	r3, #12
 80053f8:	22ff      	movs	r2, #255	; 0xff
 80053fa:	4619      	mov	r1, r3
 80053fc:	f7fe f906 	bl	800360c <HAL_UART_Receive_DMA>
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005406:	f04f 31ff 	mov.w	r1, #4294967295
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fabc 	bl	8005988 <osSemaphoreAcquire>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0d0      	beq.n	80053b8 <slave_wait_request+0xa>
        }
    }
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005426:	f3ef 8305 	mrs	r3, IPSR
 800542a:	60bb      	str	r3, [r7, #8]
  return(result);
 800542c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005432:	f3ef 8310 	mrs	r3, PRIMASK
 8005436:	607b      	str	r3, [r7, #4]
  return(result);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <osKernelInitialize+0x32>
 800543e:	4b10      	ldr	r3, [pc, #64]	; (8005480 <osKernelInitialize+0x60>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d109      	bne.n	800545a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005446:	f3ef 8311 	mrs	r3, BASEPRI
 800544a:	603b      	str	r3, [r7, #0]
  return(result);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005452:	f06f 0305 	mvn.w	r3, #5
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e00c      	b.n	8005474 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <osKernelInitialize+0x60>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <osKernelInitialize+0x60>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e002      	b.n	8005474 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800546e:	f04f 33ff 	mov.w	r3, #4294967295
 8005472:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005474:	68fb      	ldr	r3, [r7, #12]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	20000e58 	.word	0x20000e58

08005484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548a:	f3ef 8305 	mrs	r3, IPSR
 800548e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005490:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005496:	f3ef 8310 	mrs	r3, PRIMASK
 800549a:	607b      	str	r3, [r7, #4]
  return(result);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <osKernelStart+0x32>
 80054a2:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <osKernelStart+0x64>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d109      	bne.n	80054be <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054aa:	f3ef 8311 	mrs	r3, BASEPRI
 80054ae:	603b      	str	r3, [r7, #0]
  return(result);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <osKernelStart+0x3a>
    stat = osErrorISR;
 80054b6:	f06f 0305 	mvn.w	r3, #5
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e00e      	b.n	80054dc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <osKernelStart+0x64>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d107      	bne.n	80054d6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80054c6:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <osKernelStart+0x64>)
 80054c8:	2202      	movs	r2, #2
 80054ca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80054cc:	f001 fdea 	bl	80070a4 <vTaskStartScheduler>
      stat = osOK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e002      	b.n	80054dc <osKernelStart+0x58>
    } else {
      stat = osError;
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295
 80054da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80054dc:	68fb      	ldr	r3, [r7, #12]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000e58 	.word	0x20000e58

080054ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b092      	sub	sp, #72	; 0x48
 80054f0:	af04      	add	r7, sp, #16
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054fc:	f3ef 8305 	mrs	r3, IPSR
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005504:	2b00      	cmp	r3, #0
 8005506:	f040 8094 	bne.w	8005632 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550a:	f3ef 8310 	mrs	r3, PRIMASK
 800550e:	623b      	str	r3, [r7, #32]
  return(result);
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f040 808d 	bne.w	8005632 <osThreadNew+0x146>
 8005518:	4b48      	ldr	r3, [pc, #288]	; (800563c <osThreadNew+0x150>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d106      	bne.n	800552e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005520:	f3ef 8311 	mrs	r3, BASEPRI
 8005524:	61fb      	str	r3, [r7, #28]
  return(result);
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f040 8082 	bne.w	8005632 <osThreadNew+0x146>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d07e      	beq.n	8005632 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005538:	2318      	movs	r3, #24
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800553c:	2300      	movs	r3, #0
 800553e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005540:	f107 031b 	add.w	r3, r7, #27
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005546:	f04f 33ff 	mov.w	r3, #4294967295
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d045      	beq.n	80055de <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <osThreadNew+0x74>
        name = attr->name;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <osThreadNew+0x9a>
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	2b38      	cmp	r3, #56	; 0x38
 8005578:	d805      	bhi.n	8005586 <osThreadNew+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <osThreadNew+0x9e>
        return (NULL);
 8005586:	2300      	movs	r3, #0
 8005588:	e054      	b.n	8005634 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	089b      	lsrs	r3, r3, #2
 8005598:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00e      	beq.n	80055c0 <osThreadNew+0xd4>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	2bbb      	cmp	r3, #187	; 0xbb
 80055a8:	d90a      	bls.n	80055c0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d006      	beq.n	80055c0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <osThreadNew+0xd4>
        mem = 1;
 80055ba:	2301      	movs	r3, #1
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055be:	e010      	b.n	80055e2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10c      	bne.n	80055e2 <osThreadNew+0xf6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d108      	bne.n	80055e2 <osThreadNew+0xf6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <osThreadNew+0xf6>
          mem = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
 80055dc:	e001      	b.n	80055e2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d110      	bne.n	800560a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055f0:	9202      	str	r2, [sp, #8]
 80055f2:	9301      	str	r3, [sp, #4]
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f001 fb6c 	bl	8006cdc <xTaskCreateStatic>
 8005604:	4603      	mov	r3, r0
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e013      	b.n	8005632 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	2b00      	cmp	r3, #0
 800560e:	d110      	bne.n	8005632 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	b29a      	uxth	r2, r3
 8005614:	f107 0314 	add.w	r3, r7, #20
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f001 fbb6 	bl	8006d94 <xTaskCreate>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d001      	beq.n	8005632 <osThreadNew+0x146>
          hTask = NULL;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005632:	697b      	ldr	r3, [r7, #20]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3738      	adds	r7, #56	; 0x38
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20000e58 	.word	0x20000e58

08005640 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005648:	f3ef 8305 	mrs	r3, IPSR
 800564c:	613b      	str	r3, [r7, #16]
  return(result);
 800564e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10f      	bne.n	8005674 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005654:	f3ef 8310 	mrs	r3, PRIMASK
 8005658:	60fb      	str	r3, [r7, #12]
  return(result);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <osDelay+0x34>
 8005660:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <osDelay+0x58>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d109      	bne.n	800567c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005668:	f3ef 8311 	mrs	r3, BASEPRI
 800566c:	60bb      	str	r3, [r7, #8]
  return(result);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <osDelay+0x3c>
    stat = osErrorISR;
 8005674:	f06f 0305 	mvn.w	r3, #5
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e007      	b.n	800568c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f001 fcd8 	bl	800703c <vTaskDelay>
    }
  }

  return (stat);
 800568c:	697b      	ldr	r3, [r7, #20]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000e58 	.word	0x20000e58

0800569c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f002 fee9 	bl	800847c <pvTimerGetTimerID>
 80056aa:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <TimerCallback+0x22>
    callb->func (callb->arg);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	6852      	ldr	r2, [r2, #4]
 80056ba:	4610      	mov	r0, r2
 80056bc:	4798      	blx	r3
  }
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	460b      	mov	r3, r1
 80056d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056dc:	f3ef 8305 	mrs	r3, IPSR
 80056e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80056e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d16a      	bne.n	80057be <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e8:	f3ef 8310 	mrs	r3, PRIMASK
 80056ec:	617b      	str	r3, [r7, #20]
  return(result);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d164      	bne.n	80057be <osTimerNew+0xf6>
 80056f4:	4b34      	ldr	r3, [pc, #208]	; (80057c8 <osTimerNew+0x100>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d105      	bne.n	8005708 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005700:	613b      	str	r3, [r7, #16]
  return(result);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d15a      	bne.n	80057be <osTimerNew+0xf6>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d057      	beq.n	80057be <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800570e:	2008      	movs	r0, #8
 8005710:	f003 f8c4 	bl	800889c <pvPortMalloc>
 8005714:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d050      	beq.n	80057be <osTimerNew+0xf6>
      callb->func = func;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005728:	7afb      	ldrb	r3, [r7, #11]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <osTimerNew+0x6c>
        reload = pdFALSE;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	e001      	b.n	8005738 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005734:	2301      	movs	r3, #1
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01c      	beq.n	8005782 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <osTimerNew+0x8e>
          name = attr->name;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <osTimerNew+0xa4>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b2f      	cmp	r3, #47	; 0x2f
 8005764:	d902      	bls.n	800576c <osTimerNew+0xa4>
          mem = 1;
 8005766:	2301      	movs	r3, #1
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	e00c      	b.n	8005786 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d108      	bne.n	8005786 <osTimerNew+0xbe>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <osTimerNew+0xbe>
            mem = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	623b      	str	r3, [r7, #32]
 8005780:	e001      	b.n	8005786 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d10c      	bne.n	80057a6 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <osTimerNew+0x104>)
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	2101      	movs	r1, #1
 800579c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800579e:	f002 fb34 	bl	8007e0a <xTimerCreateStatic>
 80057a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80057a4:	e00b      	b.n	80057be <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d108      	bne.n	80057be <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80057ac:	4b07      	ldr	r3, [pc, #28]	; (80057cc <osTimerNew+0x104>)
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b4:	2101      	movs	r1, #1
 80057b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057b8:	f002 fb06 	bl	8007dc8 <xTimerCreate>
 80057bc:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3730      	adds	r7, #48	; 0x30
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000e58 	.word	0x20000e58
 80057cc:	0800569d 	.word	0x0800569d

080057d0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	; 0x28
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057de:	f3ef 8305 	mrs	r3, IPSR
 80057e2:	617b      	str	r3, [r7, #20]
  return(result);
 80057e4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10f      	bne.n	800580a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ea:	f3ef 8310 	mrs	r3, PRIMASK
 80057ee:	613b      	str	r3, [r7, #16]
  return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <osTimerStart+0x3a>
 80057f6:	4b15      	ldr	r3, [pc, #84]	; (800584c <osTimerStart+0x7c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d109      	bne.n	8005812 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005802:	60fb      	str	r3, [r7, #12]
  return(result);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <osTimerStart+0x42>
    stat = osErrorISR;
 800580a:	f06f 0305 	mvn.w	r3, #5
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e017      	b.n	8005842 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <osTimerStart+0x50>
    stat = osErrorParameter;
 8005818:	f06f 0303 	mvn.w	r3, #3
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	e010      	b.n	8005842 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005820:	2300      	movs	r3, #0
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	2300      	movs	r3, #0
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	2104      	movs	r1, #4
 800582a:	69b8      	ldr	r0, [r7, #24]
 800582c:	f002 fb5c 	bl	8007ee8 <xTimerGenericCommand>
 8005830:	4603      	mov	r3, r0
 8005832:	2b01      	cmp	r3, #1
 8005834:	d102      	bne.n	800583c <osTimerStart+0x6c>
      stat = osOK;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	e002      	b.n	8005842 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800583c:	f06f 0302 	mvn.w	r3, #2
 8005840:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8005842:	69fb      	ldr	r3, [r7, #28]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000e58 	.word	0x20000e58

08005850 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b08c      	sub	sp, #48	; 0x30
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800585c:	2300      	movs	r3, #0
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005860:	f3ef 8305 	mrs	r3, IPSR
 8005864:	61bb      	str	r3, [r7, #24]
  return(result);
 8005866:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005868:	2b00      	cmp	r3, #0
 800586a:	f040 8086 	bne.w	800597a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586e:	f3ef 8310 	mrs	r3, PRIMASK
 8005872:	617b      	str	r3, [r7, #20]
  return(result);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d17f      	bne.n	800597a <osSemaphoreNew+0x12a>
 800587a:	4b42      	ldr	r3, [pc, #264]	; (8005984 <osSemaphoreNew+0x134>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d105      	bne.n	800588e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005882:	f3ef 8311 	mrs	r3, BASEPRI
 8005886:	613b      	str	r3, [r7, #16]
  return(result);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d175      	bne.n	800597a <osSemaphoreNew+0x12a>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d072      	beq.n	800597a <osSemaphoreNew+0x12a>
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	429a      	cmp	r2, r3
 800589a:	d86e      	bhi.n	800597a <osSemaphoreNew+0x12a>
    mem = -1;
 800589c:	f04f 33ff 	mov.w	r3, #4294967295
 80058a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d006      	beq.n	80058be <osSemaphoreNew+0x6e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b4f      	cmp	r3, #79	; 0x4f
 80058b6:	d902      	bls.n	80058be <osSemaphoreNew+0x6e>
        mem = 1;
 80058b8:	2301      	movs	r3, #1
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	e00c      	b.n	80058d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d108      	bne.n	80058d8 <osSemaphoreNew+0x88>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <osSemaphoreNew+0x88>
          mem = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	623b      	str	r3, [r7, #32]
 80058d2:	e001      	b.n	80058d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d04c      	beq.n	800597a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d128      	bne.n	8005938 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d10a      	bne.n	8005902 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2203      	movs	r2, #3
 80058f2:	9200      	str	r2, [sp, #0]
 80058f4:	2200      	movs	r2, #0
 80058f6:	2100      	movs	r1, #0
 80058f8:	2001      	movs	r0, #1
 80058fa:	f000 fa4d 	bl	8005d98 <xQueueGenericCreateStatic>
 80058fe:	6278      	str	r0, [r7, #36]	; 0x24
 8005900:	e005      	b.n	800590e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005902:	2203      	movs	r2, #3
 8005904:	2100      	movs	r1, #0
 8005906:	2001      	movs	r0, #1
 8005908:	f000 fabd 	bl	8005e86 <xQueueGenericCreate>
 800590c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d022      	beq.n	800595a <osSemaphoreNew+0x10a>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01f      	beq.n	800595a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800591a:	2300      	movs	r3, #0
 800591c:	2200      	movs	r2, #0
 800591e:	2100      	movs	r1, #0
 8005920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005922:	f000 fb7b 	bl	800601c <xQueueGenericSend>
 8005926:	4603      	mov	r3, r0
 8005928:	2b01      	cmp	r3, #1
 800592a:	d016      	beq.n	800595a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800592c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800592e:	f001 f805 	bl	800693c <vQueueDelete>
            hSemaphore = NULL;
 8005932:	2300      	movs	r3, #0
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
 8005936:	e010      	b.n	800595a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d108      	bne.n	8005950 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	461a      	mov	r2, r3
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 fafe 	bl	8005f48 <xQueueCreateCountingSemaphoreStatic>
 800594c:	6278      	str	r0, [r7, #36]	; 0x24
 800594e:	e004      	b.n	800595a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 fb2f 	bl	8005fb6 <xQueueCreateCountingSemaphore>
 8005958:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00c      	beq.n	800597a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <osSemaphoreNew+0x11e>
          name = attr->name;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	e001      	b.n	8005972 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005976:	f001 f92b 	bl	8006bd0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800597c:	4618      	mov	r0, r3
 800597e:	3728      	adds	r7, #40	; 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20000e58 	.word	0x20000e58

08005988 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d103      	bne.n	80059a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80059a0:	f06f 0303 	mvn.w	r3, #3
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	e04b      	b.n	8005a40 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a8:	f3ef 8305 	mrs	r3, IPSR
 80059ac:	617b      	str	r3, [r7, #20]
  return(result);
 80059ae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10f      	bne.n	80059d4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b4:	f3ef 8310 	mrs	r3, PRIMASK
 80059b8:	613b      	str	r3, [r7, #16]
  return(result);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <osSemaphoreAcquire+0x4c>
 80059c0:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <osSemaphoreAcquire+0xc4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d128      	bne.n	8005a1a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059c8:	f3ef 8311 	mrs	r3, BASEPRI
 80059cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d022      	beq.n	8005a1a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80059da:	f06f 0303 	mvn.w	r3, #3
 80059de:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80059e0:	e02d      	b.n	8005a3e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80059e6:	f107 0308 	add.w	r3, r7, #8
 80059ea:	461a      	mov	r2, r3
 80059ec:	2100      	movs	r1, #0
 80059ee:	69b8      	ldr	r0, [r7, #24]
 80059f0:	f000 ff24 	bl	800683c <xQueueReceiveFromISR>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d003      	beq.n	8005a02 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80059fa:	f06f 0302 	mvn.w	r3, #2
 80059fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005a00:	e01d      	b.n	8005a3e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01a      	beq.n	8005a3e <osSemaphoreAcquire+0xb6>
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <osSemaphoreAcquire+0xc8>)
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005a18:	e011      	b.n	8005a3e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	69b8      	ldr	r0, [r7, #24]
 8005a1e:	f000 fe01 	bl	8006624 <xQueueSemaphoreTake>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d00b      	beq.n	8005a40 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005a2e:	f06f 0301 	mvn.w	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e004      	b.n	8005a40 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005a36:	f06f 0302 	mvn.w	r3, #2
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	e000      	b.n	8005a40 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005a3e:	bf00      	nop
      }
    }
  }

  return (stat);
 8005a40:	69fb      	ldr	r3, [r7, #28]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000e58 	.word	0x20000e58
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a6a:	f06f 0303 	mvn.w	r3, #3
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	e03e      	b.n	8005af0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a72:	f3ef 8305 	mrs	r3, IPSR
 8005a76:	617b      	str	r3, [r7, #20]
  return(result);
 8005a78:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a82:	613b      	str	r3, [r7, #16]
  return(result);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <osSemaphoreRelease+0x4a>
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <osSemaphoreRelease+0xa8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d120      	bne.n	8005ad4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a92:	f3ef 8311 	mrs	r3, BASEPRI
 8005a96:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01a      	beq.n	8005ad4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005aa2:	f107 0308 	add.w	r3, r7, #8
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	69b8      	ldr	r0, [r7, #24]
 8005aaa:	f000 fc4d 	bl	8006348 <xQueueGiveFromISR>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d003      	beq.n	8005abc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005ab4:	f06f 0302 	mvn.w	r3, #2
 8005ab8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005aba:	e018      	b.n	8005aee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d015      	beq.n	8005aee <osSemaphoreRelease+0x9a>
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <osSemaphoreRelease+0xac>)
 8005ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005ad2:	e00c      	b.n	8005aee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2100      	movs	r1, #0
 8005ada:	69b8      	ldr	r0, [r7, #24]
 8005adc:	f000 fa9e 	bl	800601c <xQueueGenericSend>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d004      	beq.n	8005af0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005ae6:	f06f 0302 	mvn.w	r3, #2
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	e000      	b.n	8005af0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005aee:	bf00      	nop
    }
  }

  return (stat);
 8005af0:	69fb      	ldr	r3, [r7, #28]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000e58 	.word	0x20000e58
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a06      	ldr	r2, [pc, #24]	; (8005b2c <vApplicationGetIdleTaskMemory+0x28>)
 8005b14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4a05      	ldr	r2, [pc, #20]	; (8005b30 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2280      	movs	r2, #128	; 0x80
 8005b20:	601a      	str	r2, [r3, #0]
}
 8005b22:	bf00      	nop
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	20000e5c 	.word	0x20000e5c
 8005b30:	20000f18 	.word	0x20000f18

08005b34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4a07      	ldr	r2, [pc, #28]	; (8005b60 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4a06      	ldr	r2, [pc, #24]	; (8005b64 <vApplicationGetTimerTaskMemory+0x30>)
 8005b4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b52:	601a      	str	r2, [r3, #0]
}
 8005b54:	bf00      	nop
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20001118 	.word	0x20001118
 8005b64:	200011d4 	.word	0x200011d4

08005b68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f103 0208 	add.w	r2, r3, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f103 0208 	add.w	r2, r3, #8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f103 0208 	add.w	r2, r3, #8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	601a      	str	r2, [r3, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d103      	bne.n	8005c24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e00c      	b.n	8005c3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3308      	adds	r3, #8
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e002      	b.n	8005c32 <vListInsert+0x2e>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d2f6      	bcs.n	8005c2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	601a      	str	r2, [r3, #0]
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6892      	ldr	r2, [r2, #8]
 8005c8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6852      	ldr	r2, [r2, #4]
 8005c94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d103      	bne.n	8005ca8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	1e5a      	subs	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr
	...

08005cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10a      	bne.n	8005cf2 <xQueueGenericReset+0x2a>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	60bb      	str	r3, [r7, #8]
}
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cf2:	f002 fcd3 	bl	800869c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	441a      	add	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	3b01      	subs	r3, #1
 8005d24:	68f9      	ldr	r1, [r7, #12]
 8005d26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	441a      	add	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	22ff      	movs	r2, #255	; 0xff
 8005d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d114      	bne.n	8005d72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01a      	beq.n	8005d86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3310      	adds	r3, #16
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fc41 	bl	80075dc <xTaskRemoveFromEventList>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d012      	beq.n	8005d86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <xQueueGenericReset+0xcc>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	e009      	b.n	8005d86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3310      	adds	r3, #16
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fef6 	bl	8005b68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fef1 	bl	8005b68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f002 fcb9 	bl	80086fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d8a:	2301      	movs	r3, #1
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08e      	sub	sp, #56	; 0x38
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <xQueueGenericCreateStatic+0x52>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <xQueueGenericCreateStatic+0x56>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <xQueueGenericCreateStatic+0x58>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	623b      	str	r3, [r7, #32]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <xQueueGenericCreateStatic+0x7e>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <xQueueGenericCreateStatic+0x82>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <xQueueGenericCreateStatic+0x84>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	61fb      	str	r3, [r7, #28]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e36:	2350      	movs	r3, #80	; 0x50
 8005e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b50      	cmp	r3, #80	; 0x50
 8005e3e:	d00a      	beq.n	8005e56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	61bb      	str	r3, [r7, #24]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00d      	beq.n	8005e7c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f843 	bl	8005f02 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3730      	adds	r7, #48	; 0x30
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b08a      	sub	sp, #40	; 0x28
 8005e8a:	af02      	add	r7, sp, #8
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	4613      	mov	r3, r2
 8005e92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	613b      	str	r3, [r7, #16]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e004      	b.n	8005ec6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	3350      	adds	r3, #80	; 0x50
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f002 fce6 	bl	800889c <pvPortMalloc>
 8005ed0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00f      	beq.n	8005ef8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	3350      	adds	r3, #80	; 0x50
 8005edc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ee6:	79fa      	ldrb	r2, [r7, #7]
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f805 	bl	8005f02 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
 8005f0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	e002      	b.n	8005f24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f30:	2101      	movs	r1, #1
 8005f32:	69b8      	ldr	r0, [r7, #24]
 8005f34:	f7ff fec8 	bl	8005cc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	61bb      	str	r3, [r7, #24]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d90a      	bls.n	8005f8e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	617b      	str	r3, [r7, #20]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f8e:	2302      	movs	r3, #2
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2100      	movs	r1, #0
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff fefd 	bl	8005d98 <xQueueGenericCreateStatic>
 8005f9e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005fac:	69fb      	ldr	r3, [r7, #28]
	}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	613b      	str	r3, [r7, #16]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d90a      	bls.n	8005ffa <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60fb      	str	r3, [r7, #12]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff ff41 	bl	8005e86 <xQueueGenericCreate>
 8006004:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006012:	697b      	ldr	r3, [r7, #20]
	}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08e      	sub	sp, #56	; 0x38
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <xQueueGenericSend+0x32>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d103      	bne.n	800605c <xQueueGenericSend+0x40>
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <xQueueGenericSend+0x44>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <xQueueGenericSend+0x46>
 8006060:	2300      	movs	r3, #0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <xQueueGenericSend+0x60>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d103      	bne.n	800608a <xQueueGenericSend+0x6e>
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <xQueueGenericSend+0x72>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <xQueueGenericSend+0x74>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xQueueGenericSend+0x8e>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	623b      	str	r3, [r7, #32]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060aa:	f001 fc5d 	bl	8007968 <xTaskGetSchedulerState>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <xQueueGenericSend+0x9e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <xQueueGenericSend+0xa2>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <xQueueGenericSend+0xa4>
 80060be:	2300      	movs	r3, #0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xQueueGenericSend+0xbe>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	61fb      	str	r3, [r7, #28]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060da:	f002 fadf 	bl	800869c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d302      	bcc.n	80060f0 <xQueueGenericSend+0xd4>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d129      	bne.n	8006144 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060f6:	f000 fc5b 	bl	80069b0 <prvCopyDataToQueue>
 80060fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	d010      	beq.n	8006126 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	3324      	adds	r3, #36	; 0x24
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fa67 	bl	80075dc <xTaskRemoveFromEventList>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d013      	beq.n	800613c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006114:	4b3f      	ldr	r3, [pc, #252]	; (8006214 <xQueueGenericSend+0x1f8>)
 8006116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	e00a      	b.n	800613c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800612c:	4b39      	ldr	r3, [pc, #228]	; (8006214 <xQueueGenericSend+0x1f8>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800613c:	f002 fade 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 8006140:	2301      	movs	r3, #1
 8006142:	e063      	b.n	800620c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800614a:	f002 fad7 	bl	80086fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800614e:	2300      	movs	r3, #0
 8006150:	e05c      	b.n	800620c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006158:	f107 0314 	add.w	r3, r7, #20
 800615c:	4618      	mov	r0, r3
 800615e:	f001 faa1 	bl	80076a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006162:	2301      	movs	r3, #1
 8006164:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006166:	f002 fac9 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800616a:	f001 f80b 	bl	8007184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800616e:	f002 fa95 	bl	800869c <vPortEnterCritical>
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006178:	b25b      	sxtb	r3, r3
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d103      	bne.n	8006188 <xQueueGenericSend+0x16c>
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800618e:	b25b      	sxtb	r3, r3
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d103      	bne.n	800619e <xQueueGenericSend+0x182>
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800619e:	f002 faad 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061a2:	1d3a      	adds	r2, r7, #4
 80061a4:	f107 0314 	add.w	r3, r7, #20
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fa90 	bl	80076d0 <xTaskCheckForTimeOut>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d124      	bne.n	8006200 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061b8:	f000 fcf2 	bl	8006ba0 <prvIsQueueFull>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d018      	beq.n	80061f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	3310      	adds	r3, #16
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f9b6 	bl	800753c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061d2:	f000 fc7d 	bl	8006ad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061d6:	f000 ffe3 	bl	80071a0 <xTaskResumeAll>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f47f af7c 	bne.w	80060da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80061e2:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <xQueueGenericSend+0x1f8>)
 80061e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	e772      	b.n	80060da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061f6:	f000 fc6b 	bl	8006ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061fa:	f000 ffd1 	bl	80071a0 <xTaskResumeAll>
 80061fe:	e76c      	b.n	80060da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006202:	f000 fc65 	bl	8006ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006206:	f000 ffcb 	bl	80071a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800620a:	2300      	movs	r3, #0
		}
	}
}
 800620c:	4618      	mov	r0, r3
 800620e:	3738      	adds	r7, #56	; 0x38
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	e000ed04 	.word	0xe000ed04

08006218 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08e      	sub	sp, #56	; 0x38
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <xQueueGenericSendFromISR+0x3c>
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <xQueueGenericSendFromISR+0x40>
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <xQueueGenericSendFromISR+0x42>
 8006258:	2300      	movs	r3, #0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	623b      	str	r3, [r7, #32]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d103      	bne.n	8006282 <xQueueGenericSendFromISR+0x6a>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <xQueueGenericSendFromISR+0x6e>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <xQueueGenericSendFromISR+0x70>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	61fb      	str	r3, [r7, #28]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062a2:	f002 fabd 	bl	8008820 <vPortValidateInterruptPriority>
	__asm volatile
 80062a6:	f3ef 8211 	mrs	r2, BASEPRI
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	61ba      	str	r2, [r7, #24]
 80062bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80062be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <xQueueGenericSendFromISR+0xbc>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d12c      	bne.n	800632e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062e4:	f000 fb64 	bl	80069b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f0:	d112      	bne.n	8006318 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d016      	beq.n	8006328 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	3324      	adds	r3, #36	; 0x24
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 f96c 	bl	80075dc <xTaskRemoveFromEventList>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00e      	beq.n	8006328 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e007      	b.n	8006328 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006318:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800631c:	3301      	adds	r3, #1
 800631e:	b2db      	uxtb	r3, r3
 8006320:	b25a      	sxtb	r2, r3
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006328:	2301      	movs	r3, #1
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800632c:	e001      	b.n	8006332 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800632e:	2300      	movs	r3, #0
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f383 8811 	msr	BASEPRI, r3
}
 800633c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006340:	4618      	mov	r0, r3
 8006342:	3738      	adds	r7, #56	; 0x38
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08e      	sub	sp, #56	; 0x38
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	623b      	str	r3, [r7, #32]
}
 800636e:	bf00      	nop
 8006370:	e7fe      	b.n	8006370 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <xQueueGiveFromISR+0x48>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	61fb      	str	r3, [r7, #28]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <xQueueGiveFromISR+0x58>
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <xQueueGiveFromISR+0x5c>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <xQueueGiveFromISR+0x5e>
 80063a4:	2300      	movs	r3, #0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	61bb      	str	r3, [r7, #24]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063c0:	f002 fa2e 	bl	8008820 <vPortValidateInterruptPriority>
	__asm volatile
 80063c4:	f3ef 8211 	mrs	r2, BASEPRI
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	617a      	str	r2, [r7, #20]
 80063da:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80063dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d22b      	bcs.n	8006448 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006402:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640a:	d112      	bne.n	8006432 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	d016      	beq.n	8006442 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	3324      	adds	r3, #36	; 0x24
 8006418:	4618      	mov	r0, r3
 800641a:	f001 f8df 	bl	80075dc <xTaskRemoveFromEventList>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00e      	beq.n	8006442 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2201      	movs	r2, #1
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	e007      	b.n	8006442 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006436:	3301      	adds	r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	b25a      	sxtb	r2, r3
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006442:	2301      	movs	r3, #1
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
 8006446:	e001      	b.n	800644c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006448:	2300      	movs	r3, #0
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f383 8811 	msr	BASEPRI, r3
}
 8006456:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800645a:	4618      	mov	r0, r3
 800645c:	3738      	adds	r7, #56	; 0x38
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08c      	sub	sp, #48	; 0x30
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <xQueueReceive+0x30>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	623b      	str	r3, [r7, #32]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <xQueueReceive+0x3e>
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <xQueueReceive+0x42>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <xQueueReceive+0x44>
 80064a6:	2300      	movs	r3, #0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <xQueueReceive+0x5e>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	61fb      	str	r3, [r7, #28]
}
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064c2:	f001 fa51 	bl	8007968 <xTaskGetSchedulerState>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <xQueueReceive+0x6e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <xQueueReceive+0x72>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <xQueueReceive+0x74>
 80064d6:	2300      	movs	r3, #0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <xQueueReceive+0x8e>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	61bb      	str	r3, [r7, #24]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80064f2:	f002 f8d3 	bl	800869c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01f      	beq.n	8006542 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006506:	f000 fabd 	bl	8006a84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	1e5a      	subs	r2, r3, #1
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00f      	beq.n	800653a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	3310      	adds	r3, #16
 800651e:	4618      	mov	r0, r3
 8006520:	f001 f85c 	bl	80075dc <xTaskRemoveFromEventList>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800652a:	4b3d      	ldr	r3, [pc, #244]	; (8006620 <xQueueReceive+0x1bc>)
 800652c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800653a:	f002 f8df 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 800653e:	2301      	movs	r3, #1
 8006540:	e069      	b.n	8006616 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006548:	f002 f8d8 	bl	80086fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800654c:	2300      	movs	r3, #0
 800654e:	e062      	b.n	8006616 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006556:	f107 0310 	add.w	r3, r7, #16
 800655a:	4618      	mov	r0, r3
 800655c:	f001 f8a2 	bl	80076a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006564:	f002 f8ca 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006568:	f000 fe0c 	bl	8007184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800656c:	f002 f896 	bl	800869c <vPortEnterCritical>
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006576:	b25b      	sxtb	r3, r3
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d103      	bne.n	8006586 <xQueueReceive+0x122>
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800658c:	b25b      	sxtb	r3, r3
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d103      	bne.n	800659c <xQueueReceive+0x138>
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800659c:	f002 f8ae 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065a0:	1d3a      	adds	r2, r7, #4
 80065a2:	f107 0310 	add.w	r3, r7, #16
 80065a6:	4611      	mov	r1, r2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f001 f891 	bl	80076d0 <xTaskCheckForTimeOut>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d123      	bne.n	80065fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b6:	f000 fadd 	bl	8006b74 <prvIsQueueEmpty>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d017      	beq.n	80065f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	3324      	adds	r3, #36	; 0x24
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4611      	mov	r1, r2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 ffb7 	bl	800753c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d0:	f000 fa7e 	bl	8006ad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065d4:	f000 fde4 	bl	80071a0 <xTaskResumeAll>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d189      	bne.n	80064f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <xQueueReceive+0x1bc>)
 80065e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	e780      	b.n	80064f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f2:	f000 fa6d 	bl	8006ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065f6:	f000 fdd3 	bl	80071a0 <xTaskResumeAll>
 80065fa:	e77a      	b.n	80064f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065fe:	f000 fa67 	bl	8006ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006602:	f000 fdcd 	bl	80071a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006608:	f000 fab4 	bl	8006b74 <prvIsQueueEmpty>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	f43f af6f 	beq.w	80064f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006614:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006616:	4618      	mov	r0, r3
 8006618:	3730      	adds	r7, #48	; 0x30
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08e      	sub	sp, #56	; 0x38
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800662e:	2300      	movs	r3, #0
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006636:	2300      	movs	r3, #0
 8006638:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	623b      	str	r3, [r7, #32]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	61fb      	str	r3, [r7, #28]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006674:	f001 f978 	bl	8007968 <xTaskGetSchedulerState>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <xQueueSemaphoreTake+0x60>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <xQueueSemaphoreTake+0x64>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <xQueueSemaphoreTake+0x66>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	61bb      	str	r3, [r7, #24]
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80066a4:	f001 fffa 	bl	800869c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d024      	beq.n	80066fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	1e5a      	subs	r2, r3, #1
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80066c4:	f001 fad0 	bl	8007c68 <pvTaskIncrementMutexHeldCount>
 80066c8:	4602      	mov	r2, r0
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00f      	beq.n	80066f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	3310      	adds	r3, #16
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 ff7e 	bl	80075dc <xTaskRemoveFromEventList>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066e6:	4b54      	ldr	r3, [pc, #336]	; (8006838 <xQueueSemaphoreTake+0x214>)
 80066e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066f6:	f002 f801 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e097      	b.n	800682e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d111      	bne.n	8006728 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	617b      	str	r3, [r7, #20]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006720:	f001 ffec 	bl	80086fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006724:	2300      	movs	r3, #0
 8006726:	e082      	b.n	800682e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800672e:	f107 030c 	add.w	r3, r7, #12
 8006732:	4618      	mov	r0, r3
 8006734:	f000 ffb6 	bl	80076a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006738:	2301      	movs	r3, #1
 800673a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800673c:	f001 ffde 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006740:	f000 fd20 	bl	8007184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006744:	f001 ffaa 	bl	800869c <vPortEnterCritical>
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800674e:	b25b      	sxtb	r3, r3
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006754:	d103      	bne.n	800675e <xQueueSemaphoreTake+0x13a>
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006764:	b25b      	sxtb	r3, r3
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d103      	bne.n	8006774 <xQueueSemaphoreTake+0x150>
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006774:	f001 ffc2 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006778:	463a      	mov	r2, r7
 800677a:	f107 030c 	add.w	r3, r7, #12
 800677e:	4611      	mov	r1, r2
 8006780:	4618      	mov	r0, r3
 8006782:	f000 ffa5 	bl	80076d0 <xTaskCheckForTimeOut>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d132      	bne.n	80067f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800678c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800678e:	f000 f9f1 	bl	8006b74 <prvIsQueueEmpty>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d026      	beq.n	80067e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80067a0:	f001 ff7c 	bl	800869c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 f8fb 	bl	80079a4 <xTaskPriorityInherit>
 80067ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80067b0:	f001 ffa4 	bl	80086fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b6:	3324      	adds	r3, #36	; 0x24
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	4611      	mov	r1, r2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 febd 	bl	800753c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067c4:	f000 f984 	bl	8006ad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067c8:	f000 fcea 	bl	80071a0 <xTaskResumeAll>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f47f af68 	bne.w	80066a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80067d4:	4b18      	ldr	r3, [pc, #96]	; (8006838 <xQueueSemaphoreTake+0x214>)
 80067d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	e75e      	b.n	80066a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80067e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067e8:	f000 f972 	bl	8006ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067ec:	f000 fcd8 	bl	80071a0 <xTaskResumeAll>
 80067f0:	e758      	b.n	80066a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80067f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067f4:	f000 f96c 	bl	8006ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067f8:	f000 fcd2 	bl	80071a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067fe:	f000 f9b9 	bl	8006b74 <prvIsQueueEmpty>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	f43f af4d 	beq.w	80066a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00d      	beq.n	800682c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006810:	f001 ff44 	bl	800869c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006816:	f000 f8b4 	bl	8006982 <prvGetDisinheritPriorityAfterTimeout>
 800681a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006822:	4618      	mov	r0, r3
 8006824:	f001 f99a 	bl	8007b5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006828:	f001 ff68 	bl	80086fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800682c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800682e:	4618      	mov	r0, r3
 8006830:	3738      	adds	r7, #56	; 0x38
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08e      	sub	sp, #56	; 0x38
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	623b      	str	r3, [r7, #32]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <xQueueReceiveFromISR+0x3a>
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <xQueueReceiveFromISR+0x3e>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <xQueueReceiveFromISR+0x40>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61fb      	str	r3, [r7, #28]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006896:	f001 ffc3 	bl	8008820 <vPortValidateInterruptPriority>
	__asm volatile
 800689a:	f3ef 8211 	mrs	r2, BASEPRI
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	61ba      	str	r2, [r7, #24]
 80068b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80068b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d02f      	beq.n	8006922 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068d0:	f000 f8d8 	bl	8006a84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	1e5a      	subs	r2, r3, #1
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80068dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e4:	d112      	bne.n	800690c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d016      	beq.n	800691c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	3310      	adds	r3, #16
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fe72 	bl	80075dc <xTaskRemoveFromEventList>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00e      	beq.n	800691c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	e007      	b.n	800691c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800690c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006910:	3301      	adds	r3, #1
 8006912:	b2db      	uxtb	r3, r3
 8006914:	b25a      	sxtb	r2, r3
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800691c:	2301      	movs	r3, #1
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
 8006920:	e001      	b.n	8006926 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006922:	2300      	movs	r3, #0
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	613b      	str	r3, [r7, #16]
	__asm volatile
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f383 8811 	msr	BASEPRI, r3
}
 8006930:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006934:	4618      	mov	r0, r3
 8006936:	3738      	adds	r7, #56	; 0x38
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <vQueueDelete+0x28>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60bb      	str	r3, [r7, #8]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f95b 	bl	8006c20 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006970:	2b00      	cmp	r3, #0
 8006972:	d102      	bne.n	800697a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f002 f855 	bl	8008a24 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	d006      	beq.n	80069a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	e001      	b.n	80069a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80069a4:	68fb      	ldr	r3, [r7, #12]
	}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10d      	bne.n	80069ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d14d      	bne.n	8006a72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 f850 	bl	8007a80 <xTaskPriorityDisinherit>
 80069e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	605a      	str	r2, [r3, #4]
 80069e8:	e043      	b.n	8006a72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d119      	bne.n	8006a24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6898      	ldr	r0, [r3, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	461a      	mov	r2, r3
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	f002 f94a 	bl	8008c94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	441a      	add	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d32b      	bcc.n	8006a72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	609a      	str	r2, [r3, #8]
 8006a22:	e026      	b.n	8006a72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68d8      	ldr	r0, [r3, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	f002 f930 	bl	8008c94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	425b      	negs	r3, r3
 8006a3e:	441a      	add	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d207      	bcs.n	8006a60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	425b      	negs	r3, r3
 8006a5a:	441a      	add	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d105      	bne.n	8006a72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a7a:	697b      	ldr	r3, [r7, #20]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d018      	beq.n	8006ac8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	441a      	add	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d303      	bcc.n	8006ab8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68d9      	ldr	r1, [r3, #12]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6838      	ldr	r0, [r7, #0]
 8006ac4:	f002 f8e6 	bl	8008c94 <memcpy>
	}
}
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ad8:	f001 fde0 	bl	800869c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ae4:	e011      	b.n	8006b0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d012      	beq.n	8006b14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3324      	adds	r3, #36	; 0x24
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fd72 	bl	80075dc <xTaskRemoveFromEventList>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006afe:	f000 fe49 	bl	8007794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dce9      	bgt.n	8006ae6 <prvUnlockQueue+0x16>
 8006b12:	e000      	b.n	8006b16 <prvUnlockQueue+0x46>
					break;
 8006b14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	22ff      	movs	r2, #255	; 0xff
 8006b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b1e:	f001 fded 	bl	80086fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b22:	f001 fdbb 	bl	800869c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b2e:	e011      	b.n	8006b54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d012      	beq.n	8006b5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3310      	adds	r3, #16
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fd4d 	bl	80075dc <xTaskRemoveFromEventList>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b48:	f000 fe24 	bl	8007794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	dce9      	bgt.n	8006b30 <prvUnlockQueue+0x60>
 8006b5c:	e000      	b.n	8006b60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	22ff      	movs	r2, #255	; 0xff
 8006b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b68:	f001 fdc8 	bl	80086fc <vPortExitCritical>
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b7c:	f001 fd8e 	bl	800869c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	e001      	b.n	8006b92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b92:	f001 fdb3 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8006b96:	68fb      	ldr	r3, [r7, #12]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ba8:	f001 fd78 	bl	800869c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d102      	bne.n	8006bbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	e001      	b.n	8006bc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bc2:	f001 fd9b 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	e014      	b.n	8006c0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006be0:	4a0e      	ldr	r2, [pc, #56]	; (8006c1c <vQueueAddToRegistry+0x4c>)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006bec:	490b      	ldr	r1, [pc, #44]	; (8006c1c <vQueueAddToRegistry+0x4c>)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006bf6:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <vQueueAddToRegistry+0x4c>)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c02:	e006      	b.n	8006c12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b07      	cmp	r3, #7
 8006c0e:	d9e7      	bls.n	8006be0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr
 8006c1c:	200015d4 	.word	0x200015d4

08006c20 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	e016      	b.n	8006c5c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006c2e:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <vQueueUnregisterQueue+0x50>)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	4413      	add	r3, r2
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d10b      	bne.n	8006c56 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006c3e:	4a0c      	ldr	r2, [pc, #48]	; (8006c70 <vQueueUnregisterQueue+0x50>)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2100      	movs	r1, #0
 8006c44:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006c48:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <vQueueUnregisterQueue+0x50>)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	4413      	add	r3, r2
 8006c50:	2200      	movs	r2, #0
 8006c52:	605a      	str	r2, [r3, #4]
				break;
 8006c54:	e006      	b.n	8006c64 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b07      	cmp	r3, #7
 8006c60:	d9e5      	bls.n	8006c2e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	200015d4 	.word	0x200015d4

08006c74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c84:	f001 fd0a 	bl	800869c <vPortEnterCritical>
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c8e:	b25b      	sxtb	r3, r3
 8006c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c94:	d103      	bne.n	8006c9e <vQueueWaitForMessageRestricted+0x2a>
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ca4:	b25b      	sxtb	r3, r3
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d103      	bne.n	8006cb4 <vQueueWaitForMessageRestricted+0x40>
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cb4:	f001 fd22 	bl	80086fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d106      	bne.n	8006cce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	3324      	adds	r3, #36	; 0x24
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fc5b 	bl	8007584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006cce:	6978      	ldr	r0, [r7, #20]
 8006cd0:	f7ff fefe 	bl	8006ad0 <prvUnlockQueue>
	}
 8006cd4:	bf00      	nop
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08e      	sub	sp, #56	; 0x38
 8006ce0:	af04      	add	r7, sp, #16
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	623b      	str	r3, [r7, #32]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <xTaskCreateStatic+0x46>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	61fb      	str	r3, [r7, #28]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d22:	23bc      	movs	r3, #188	; 0xbc
 8006d24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2bbc      	cmp	r3, #188	; 0xbc
 8006d2a:	d00a      	beq.n	8006d42 <xTaskCreateStatic+0x66>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	61bb      	str	r3, [r7, #24]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01e      	beq.n	8006d86 <xTaskCreateStatic+0xaa>
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01b      	beq.n	8006d86 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d60:	2300      	movs	r3, #0
 8006d62:	9303      	str	r3, [sp, #12]
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	9302      	str	r3, [sp, #8]
 8006d68:	f107 0314 	add.w	r3, r7, #20
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	68b9      	ldr	r1, [r7, #8]
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f851 	bl	8006e20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d80:	f000 f8ec 	bl	8006f5c <prvAddNewTaskToReadyList>
 8006d84:	e001      	b.n	8006d8a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d8a:	697b      	ldr	r3, [r7, #20]
	}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3728      	adds	r7, #40	; 0x28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08c      	sub	sp, #48	; 0x30
 8006d98:	af04      	add	r7, sp, #16
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 fd77 	bl	800889c <pvPortMalloc>
 8006dae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00e      	beq.n	8006dd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006db6:	20bc      	movs	r0, #188	; 0xbc
 8006db8:	f001 fd70 	bl	800889c <pvPortMalloc>
 8006dbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8006dca:	e005      	b.n	8006dd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dcc:	6978      	ldr	r0, [r7, #20]
 8006dce:	f001 fe29 	bl	8008a24 <vPortFree>
 8006dd2:	e001      	b.n	8006dd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d017      	beq.n	8006e0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006de6:	88fa      	ldrh	r2, [r7, #6]
 8006de8:	2300      	movs	r3, #0
 8006dea:	9303      	str	r3, [sp, #12]
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	9302      	str	r3, [sp, #8]
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 f80f 	bl	8006e20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e02:	69f8      	ldr	r0, [r7, #28]
 8006e04:	f000 f8aa 	bl	8006f5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	e002      	b.n	8006e14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e14:	69bb      	ldr	r3, [r7, #24]
	}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	461a      	mov	r2, r3
 8006e38:	21a5      	movs	r1, #165	; 0xa5
 8006e3a:	f001 ff39 	bl	8008cb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f023 0307 	bic.w	r3, r3, #7
 8006e56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	617b      	str	r3, [r7, #20]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61fb      	str	r3, [r7, #28]
 8006e7c:	e012      	b.n	8006ea4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	7819      	ldrb	r1, [r3, #0]
 8006e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3334      	adds	r3, #52	; 0x34
 8006e8e:	460a      	mov	r2, r1
 8006e90:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d006      	beq.n	8006eac <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2b0f      	cmp	r3, #15
 8006ea8:	d9e9      	bls.n	8006e7e <prvInitialiseNewTask+0x5e>
 8006eaa:	e000      	b.n	8006eae <prvInitialiseNewTask+0x8e>
		{
			break;
 8006eac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	2b37      	cmp	r3, #55	; 0x37
 8006eba:	d901      	bls.n	8006ec0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ebc:	2337      	movs	r3, #55	; 0x37
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	2200      	movs	r2, #0
 8006ed0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fe65 	bl	8005ba6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	3318      	adds	r3, #24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe fe60 	bl	8005ba6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	3354      	adds	r3, #84	; 0x54
 8006f10:	2260      	movs	r2, #96	; 0x60
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 fecb 	bl	8008cb0 <memset>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <prvInitialiseNewTask+0x130>)
 8006f1e:	659a      	str	r2, [r3, #88]	; 0x58
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	4a0c      	ldr	r2, [pc, #48]	; (8006f54 <prvInitialiseNewTask+0x134>)
 8006f24:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	4a0b      	ldr	r2, [pc, #44]	; (8006f58 <prvInitialiseNewTask+0x138>)
 8006f2a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	68f9      	ldr	r1, [r7, #12]
 8006f30:	69b8      	ldr	r0, [r7, #24]
 8006f32:	f001 fac3 	bl	80084bc <pxPortInitialiseStack>
 8006f36:	4602      	mov	r2, r0
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f48:	bf00      	nop
 8006f4a:	3720      	adds	r7, #32
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	08009194 	.word	0x08009194
 8006f54:	080091b4 	.word	0x080091b4
 8006f58:	08009174 	.word	0x08009174

08006f5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f64:	f001 fb9a 	bl	800869c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f68:	4b2d      	ldr	r3, [pc, #180]	; (8007020 <prvAddNewTaskToReadyList+0xc4>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	4a2c      	ldr	r2, [pc, #176]	; (8007020 <prvAddNewTaskToReadyList+0xc4>)
 8006f70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f72:	4b2c      	ldr	r3, [pc, #176]	; (8007024 <prvAddNewTaskToReadyList+0xc8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f7a:	4a2a      	ldr	r2, [pc, #168]	; (8007024 <prvAddNewTaskToReadyList+0xc8>)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f80:	4b27      	ldr	r3, [pc, #156]	; (8007020 <prvAddNewTaskToReadyList+0xc4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d110      	bne.n	8006faa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f88:	f000 fc28 	bl	80077dc <prvInitialiseTaskLists>
 8006f8c:	e00d      	b.n	8006faa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f8e:	4b26      	ldr	r3, [pc, #152]	; (8007028 <prvAddNewTaskToReadyList+0xcc>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f96:	4b23      	ldr	r3, [pc, #140]	; (8007024 <prvAddNewTaskToReadyList+0xc8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d802      	bhi.n	8006faa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fa4:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <prvAddNewTaskToReadyList+0xc8>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006faa:	4b20      	ldr	r3, [pc, #128]	; (800702c <prvAddNewTaskToReadyList+0xd0>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	4a1e      	ldr	r2, [pc, #120]	; (800702c <prvAddNewTaskToReadyList+0xd0>)
 8006fb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fb4:	4b1d      	ldr	r3, [pc, #116]	; (800702c <prvAddNewTaskToReadyList+0xd0>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	4b1b      	ldr	r3, [pc, #108]	; (8007030 <prvAddNewTaskToReadyList+0xd4>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d903      	bls.n	8006fd0 <prvAddNewTaskToReadyList+0x74>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	4a18      	ldr	r2, [pc, #96]	; (8007030 <prvAddNewTaskToReadyList+0xd4>)
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4a15      	ldr	r2, [pc, #84]	; (8007034 <prvAddNewTaskToReadyList+0xd8>)
 8006fde:	441a      	add	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f7fe fde9 	bl	8005bbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fec:	f001 fb86 	bl	80086fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ff0:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <prvAddNewTaskToReadyList+0xcc>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00e      	beq.n	8007016 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <prvAddNewTaskToReadyList+0xc8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	429a      	cmp	r2, r3
 8007004:	d207      	bcs.n	8007016 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007006:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <prvAddNewTaskToReadyList+0xdc>)
 8007008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20001ae8 	.word	0x20001ae8
 8007024:	20001614 	.word	0x20001614
 8007028:	20001af4 	.word	0x20001af4
 800702c:	20001b04 	.word	0x20001b04
 8007030:	20001af0 	.word	0x20001af0
 8007034:	20001618 	.word	0x20001618
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d017      	beq.n	800707e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800704e:	4b13      	ldr	r3, [pc, #76]	; (800709c <vTaskDelay+0x60>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <vTaskDelay+0x30>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60bb      	str	r3, [r7, #8]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800706c:	f000 f88a 	bl	8007184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007070:	2100      	movs	r1, #0
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fe0c 	bl	8007c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007078:	f000 f892 	bl	80071a0 <xTaskResumeAll>
 800707c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d107      	bne.n	8007094 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007084:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <vTaskDelay+0x64>)
 8007086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	20001b10 	.word	0x20001b10
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	; 0x28
 80070a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070b2:	463a      	mov	r2, r7
 80070b4:	1d39      	adds	r1, r7, #4
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fd22 	bl	8005b04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	9202      	str	r2, [sp, #8]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	2300      	movs	r3, #0
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2300      	movs	r3, #0
 80070d0:	460a      	mov	r2, r1
 80070d2:	4924      	ldr	r1, [pc, #144]	; (8007164 <vTaskStartScheduler+0xc0>)
 80070d4:	4824      	ldr	r0, [pc, #144]	; (8007168 <vTaskStartScheduler+0xc4>)
 80070d6:	f7ff fe01 	bl	8006cdc <xTaskCreateStatic>
 80070da:	4603      	mov	r3, r0
 80070dc:	4a23      	ldr	r2, [pc, #140]	; (800716c <vTaskStartScheduler+0xc8>)
 80070de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070e0:	4b22      	ldr	r3, [pc, #136]	; (800716c <vTaskStartScheduler+0xc8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070e8:	2301      	movs	r3, #1
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	e001      	b.n	80070f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d102      	bne.n	80070fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80070f8:	f000 fe1e 	bl	8007d38 <xTimerCreateTimerTask>
 80070fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d11b      	bne.n	800713c <vTaskStartScheduler+0x98>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	613b      	str	r3, [r7, #16]
}
 8007116:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007118:	4b15      	ldr	r3, [pc, #84]	; (8007170 <vTaskStartScheduler+0xcc>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3354      	adds	r3, #84	; 0x54
 800711e:	4a15      	ldr	r2, [pc, #84]	; (8007174 <vTaskStartScheduler+0xd0>)
 8007120:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <vTaskStartScheduler+0xd4>)
 8007124:	f04f 32ff 	mov.w	r2, #4294967295
 8007128:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800712a:	4b14      	ldr	r3, [pc, #80]	; (800717c <vTaskStartScheduler+0xd8>)
 800712c:	2201      	movs	r2, #1
 800712e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007130:	4b13      	ldr	r3, [pc, #76]	; (8007180 <vTaskStartScheduler+0xdc>)
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007136:	f001 fa3f 	bl	80085b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800713a:	e00e      	b.n	800715a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d10a      	bne.n	800715a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	60fb      	str	r3, [r7, #12]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <vTaskStartScheduler+0xb4>
}
 800715a:	bf00      	nop
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	08008e7c 	.word	0x08008e7c
 8007168:	080077ad 	.word	0x080077ad
 800716c:	20001b0c 	.word	0x20001b0c
 8007170:	20001614 	.word	0x20001614
 8007174:	2000009c 	.word	0x2000009c
 8007178:	20001b08 	.word	0x20001b08
 800717c:	20001af4 	.word	0x20001af4
 8007180:	20001aec 	.word	0x20001aec

08007184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007188:	4b04      	ldr	r3, [pc, #16]	; (800719c <vTaskSuspendAll+0x18>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3301      	adds	r3, #1
 800718e:	4a03      	ldr	r2, [pc, #12]	; (800719c <vTaskSuspendAll+0x18>)
 8007190:	6013      	str	r3, [r2, #0]
}
 8007192:	bf00      	nop
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	20001b10 	.word	0x20001b10

080071a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071ae:	4b42      	ldr	r3, [pc, #264]	; (80072b8 <xTaskResumeAll+0x118>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <xTaskResumeAll+0x2c>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	603b      	str	r3, [r7, #0]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071cc:	f001 fa66 	bl	800869c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071d0:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <xTaskResumeAll+0x118>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	4a38      	ldr	r2, [pc, #224]	; (80072b8 <xTaskResumeAll+0x118>)
 80071d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071da:	4b37      	ldr	r3, [pc, #220]	; (80072b8 <xTaskResumeAll+0x118>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d162      	bne.n	80072a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071e2:	4b36      	ldr	r3, [pc, #216]	; (80072bc <xTaskResumeAll+0x11c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d05e      	beq.n	80072a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071ea:	e02f      	b.n	800724c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80071ec:	4b34      	ldr	r3, [pc, #208]	; (80072c0 <xTaskResumeAll+0x120>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3318      	adds	r3, #24
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe fd3b 	bl	8005c74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fd36 	bl	8005c74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4b2d      	ldr	r3, [pc, #180]	; (80072c4 <xTaskResumeAll+0x124>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d903      	bls.n	800721c <xTaskResumeAll+0x7c>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	4a2a      	ldr	r2, [pc, #168]	; (80072c4 <xTaskResumeAll+0x124>)
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4a27      	ldr	r2, [pc, #156]	; (80072c8 <xTaskResumeAll+0x128>)
 800722a:	441a      	add	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3304      	adds	r3, #4
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	f7fe fcc3 	bl	8005bbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723c:	4b23      	ldr	r3, [pc, #140]	; (80072cc <xTaskResumeAll+0x12c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	429a      	cmp	r2, r3
 8007244:	d302      	bcc.n	800724c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007246:	4b22      	ldr	r3, [pc, #136]	; (80072d0 <xTaskResumeAll+0x130>)
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800724c:	4b1c      	ldr	r3, [pc, #112]	; (80072c0 <xTaskResumeAll+0x120>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1cb      	bne.n	80071ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800725a:	f000 fb61 	bl	8007920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <xTaskResumeAll+0x134>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d010      	beq.n	800728c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800726a:	f000 f845 	bl	80072f8 <xTaskIncrementTick>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007274:	4b16      	ldr	r3, [pc, #88]	; (80072d0 <xTaskResumeAll+0x130>)
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	3b01      	subs	r3, #1
 800727e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f1      	bne.n	800726a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007286:	4b13      	ldr	r3, [pc, #76]	; (80072d4 <xTaskResumeAll+0x134>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800728c:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <xTaskResumeAll+0x130>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007298:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <xTaskResumeAll+0x138>)
 800729a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072a8:	f001 fa28 	bl	80086fc <vPortExitCritical>

	return xAlreadyYielded;
 80072ac:	68bb      	ldr	r3, [r7, #8]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20001b10 	.word	0x20001b10
 80072bc:	20001ae8 	.word	0x20001ae8
 80072c0:	20001aa8 	.word	0x20001aa8
 80072c4:	20001af0 	.word	0x20001af0
 80072c8:	20001618 	.word	0x20001618
 80072cc:	20001614 	.word	0x20001614
 80072d0:	20001afc 	.word	0x20001afc
 80072d4:	20001af8 	.word	0x20001af8
 80072d8:	e000ed04 	.word	0xe000ed04

080072dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072e2:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <xTaskGetTickCount+0x18>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072e8:	687b      	ldr	r3, [r7, #4]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr
 80072f4:	20001aec 	.word	0x20001aec

080072f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007302:	4b51      	ldr	r3, [pc, #324]	; (8007448 <xTaskIncrementTick+0x150>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 808e 	bne.w	8007428 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800730c:	4b4f      	ldr	r3, [pc, #316]	; (800744c <xTaskIncrementTick+0x154>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007314:	4a4d      	ldr	r2, [pc, #308]	; (800744c <xTaskIncrementTick+0x154>)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d120      	bne.n	8007362 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007320:	4b4b      	ldr	r3, [pc, #300]	; (8007450 <xTaskIncrementTick+0x158>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <xTaskIncrementTick+0x48>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	603b      	str	r3, [r7, #0]
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <xTaskIncrementTick+0x46>
 8007340:	4b43      	ldr	r3, [pc, #268]	; (8007450 <xTaskIncrementTick+0x158>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	4b43      	ldr	r3, [pc, #268]	; (8007454 <xTaskIncrementTick+0x15c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a41      	ldr	r2, [pc, #260]	; (8007450 <xTaskIncrementTick+0x158>)
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	4a41      	ldr	r2, [pc, #260]	; (8007454 <xTaskIncrementTick+0x15c>)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	4b40      	ldr	r3, [pc, #256]	; (8007458 <xTaskIncrementTick+0x160>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	4a3f      	ldr	r2, [pc, #252]	; (8007458 <xTaskIncrementTick+0x160>)
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	f000 fadf 	bl	8007920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007362:	4b3e      	ldr	r3, [pc, #248]	; (800745c <xTaskIncrementTick+0x164>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	429a      	cmp	r2, r3
 800736a:	d34e      	bcc.n	800740a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800736c:	4b38      	ldr	r3, [pc, #224]	; (8007450 <xTaskIncrementTick+0x158>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <xTaskIncrementTick+0x82>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <xTaskIncrementTick+0x84>
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007380:	4b36      	ldr	r3, [pc, #216]	; (800745c <xTaskIncrementTick+0x164>)
 8007382:	f04f 32ff 	mov.w	r2, #4294967295
 8007386:	601a      	str	r2, [r3, #0]
					break;
 8007388:	e03f      	b.n	800740a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800738a:	4b31      	ldr	r3, [pc, #196]	; (8007450 <xTaskIncrementTick+0x158>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d203      	bcs.n	80073aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073a2:	4a2e      	ldr	r2, [pc, #184]	; (800745c <xTaskIncrementTick+0x164>)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6013      	str	r3, [r2, #0]
						break;
 80073a8:	e02f      	b.n	800740a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fc60 	bl	8005c74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	3318      	adds	r3, #24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fc57 	bl	8005c74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ca:	4b25      	ldr	r3, [pc, #148]	; (8007460 <xTaskIncrementTick+0x168>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d903      	bls.n	80073da <xTaskIncrementTick+0xe2>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	4a22      	ldr	r2, [pc, #136]	; (8007460 <xTaskIncrementTick+0x168>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <xTaskIncrementTick+0x16c>)
 80073e8:	441a      	add	r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7fe fbe4 	bl	8005bbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	4b1b      	ldr	r3, [pc, #108]	; (8007468 <xTaskIncrementTick+0x170>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	429a      	cmp	r2, r3
 8007402:	d3b3      	bcc.n	800736c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007404:	2301      	movs	r3, #1
 8007406:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007408:	e7b0      	b.n	800736c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800740a:	4b17      	ldr	r3, [pc, #92]	; (8007468 <xTaskIncrementTick+0x170>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	4914      	ldr	r1, [pc, #80]	; (8007464 <xTaskIncrementTick+0x16c>)
 8007412:	4613      	mov	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	440b      	add	r3, r1
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d907      	bls.n	8007432 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007422:	2301      	movs	r3, #1
 8007424:	617b      	str	r3, [r7, #20]
 8007426:	e004      	b.n	8007432 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007428:	4b10      	ldr	r3, [pc, #64]	; (800746c <xTaskIncrementTick+0x174>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3301      	adds	r3, #1
 800742e:	4a0f      	ldr	r2, [pc, #60]	; (800746c <xTaskIncrementTick+0x174>)
 8007430:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007432:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <xTaskIncrementTick+0x178>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800743a:	2301      	movs	r3, #1
 800743c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800743e:	697b      	ldr	r3, [r7, #20]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20001b10 	.word	0x20001b10
 800744c:	20001aec 	.word	0x20001aec
 8007450:	20001aa0 	.word	0x20001aa0
 8007454:	20001aa4 	.word	0x20001aa4
 8007458:	20001b00 	.word	0x20001b00
 800745c:	20001b08 	.word	0x20001b08
 8007460:	20001af0 	.word	0x20001af0
 8007464:	20001618 	.word	0x20001618
 8007468:	20001614 	.word	0x20001614
 800746c:	20001af8 	.word	0x20001af8
 8007470:	20001afc 	.word	0x20001afc

08007474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800747a:	4b2a      	ldr	r3, [pc, #168]	; (8007524 <vTaskSwitchContext+0xb0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007482:	4b29      	ldr	r3, [pc, #164]	; (8007528 <vTaskSwitchContext+0xb4>)
 8007484:	2201      	movs	r2, #1
 8007486:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007488:	e046      	b.n	8007518 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800748a:	4b27      	ldr	r3, [pc, #156]	; (8007528 <vTaskSwitchContext+0xb4>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007490:	4b26      	ldr	r3, [pc, #152]	; (800752c <vTaskSwitchContext+0xb8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e010      	b.n	80074ba <vTaskSwitchContext+0x46>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	607b      	str	r3, [r7, #4]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <vTaskSwitchContext+0x3e>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	491d      	ldr	r1, [pc, #116]	; (8007530 <vTaskSwitchContext+0xbc>)
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0e4      	beq.n	8007498 <vTaskSwitchContext+0x24>
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <vTaskSwitchContext+0xbc>)
 80074da:	4413      	add	r3, r2
 80074dc:	60bb      	str	r3, [r7, #8]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	605a      	str	r2, [r3, #4]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	3308      	adds	r3, #8
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d104      	bne.n	80074fe <vTaskSwitchContext+0x8a>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	605a      	str	r2, [r3, #4]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4a0b      	ldr	r2, [pc, #44]	; (8007534 <vTaskSwitchContext+0xc0>)
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	4a08      	ldr	r2, [pc, #32]	; (800752c <vTaskSwitchContext+0xb8>)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <vTaskSwitchContext+0xc0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3354      	adds	r3, #84	; 0x54
 8007514:	4a08      	ldr	r2, [pc, #32]	; (8007538 <vTaskSwitchContext+0xc4>)
 8007516:	6013      	str	r3, [r2, #0]
}
 8007518:	bf00      	nop
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20001b10 	.word	0x20001b10
 8007528:	20001afc 	.word	0x20001afc
 800752c:	20001af0 	.word	0x20001af0
 8007530:	20001618 	.word	0x20001618
 8007534:	20001614 	.word	0x20001614
 8007538:	2000009c 	.word	0x2000009c

0800753c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10a      	bne.n	8007562 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	60fb      	str	r3, [r7, #12]
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <vTaskPlaceOnEventList+0x44>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3318      	adds	r3, #24
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fe fb4a 	bl	8005c04 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007570:	2101      	movs	r1, #1
 8007572:	6838      	ldr	r0, [r7, #0]
 8007574:	f000 fb8c 	bl	8007c90 <prvAddCurrentTaskToDelayedList>
}
 8007578:	bf00      	nop
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20001614 	.word	0x20001614

08007584 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	617b      	str	r3, [r7, #20]
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3318      	adds	r3, #24
 80075b2:	4619      	mov	r1, r3
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7fe fb02 	bl	8005bbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
 80075c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	68b8      	ldr	r0, [r7, #8]
 80075ca:	f000 fb61 	bl	8007c90 <prvAddCurrentTaskToDelayedList>
	}
 80075ce:	bf00      	nop
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20001614 	.word	0x20001614

080075dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60fb      	str	r3, [r7, #12]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	3318      	adds	r3, #24
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe fb31 	bl	8005c74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007612:	4b1e      	ldr	r3, [pc, #120]	; (800768c <xTaskRemoveFromEventList+0xb0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d11d      	bne.n	8007656 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3304      	adds	r3, #4
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fb28 	bl	8005c74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	4b19      	ldr	r3, [pc, #100]	; (8007690 <xTaskRemoveFromEventList+0xb4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d903      	bls.n	8007638 <xTaskRemoveFromEventList+0x5c>
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	4a16      	ldr	r2, [pc, #88]	; (8007690 <xTaskRemoveFromEventList+0xb4>)
 8007636:	6013      	str	r3, [r2, #0]
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4a13      	ldr	r2, [pc, #76]	; (8007694 <xTaskRemoveFromEventList+0xb8>)
 8007646:	441a      	add	r2, r3
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	3304      	adds	r3, #4
 800764c:	4619      	mov	r1, r3
 800764e:	4610      	mov	r0, r2
 8007650:	f7fe fab5 	bl	8005bbe <vListInsertEnd>
 8007654:	e005      	b.n	8007662 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	3318      	adds	r3, #24
 800765a:	4619      	mov	r1, r3
 800765c:	480e      	ldr	r0, [pc, #56]	; (8007698 <xTaskRemoveFromEventList+0xbc>)
 800765e:	f7fe faae 	bl	8005bbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007666:	4b0d      	ldr	r3, [pc, #52]	; (800769c <xTaskRemoveFromEventList+0xc0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	429a      	cmp	r2, r3
 800766e:	d905      	bls.n	800767c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007670:	2301      	movs	r3, #1
 8007672:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007674:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <xTaskRemoveFromEventList+0xc4>)
 8007676:	2201      	movs	r2, #1
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e001      	b.n	8007680 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007680:	697b      	ldr	r3, [r7, #20]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20001b10 	.word	0x20001b10
 8007690:	20001af0 	.word	0x20001af0
 8007694:	20001618 	.word	0x20001618
 8007698:	20001aa8 	.word	0x20001aa8
 800769c:	20001614 	.word	0x20001614
 80076a0:	20001afc 	.word	0x20001afc

080076a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <vTaskInternalSetTimeOutState+0x24>)
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076b4:	4b05      	ldr	r3, [pc, #20]	; (80076cc <vTaskInternalSetTimeOutState+0x28>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	605a      	str	r2, [r3, #4]
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	20001b00 	.word	0x20001b00
 80076cc:	20001aec 	.word	0x20001aec

080076d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	613b      	str	r3, [r7, #16]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	60fb      	str	r3, [r7, #12]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007712:	f000 ffc3 	bl	800869c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007716:	4b1d      	ldr	r3, [pc, #116]	; (800778c <xTaskCheckForTimeOut+0xbc>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772e:	d102      	bne.n	8007736 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007730:	2300      	movs	r3, #0
 8007732:	61fb      	str	r3, [r7, #28]
 8007734:	e023      	b.n	800777e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	4b15      	ldr	r3, [pc, #84]	; (8007790 <xTaskCheckForTimeOut+0xc0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	429a      	cmp	r2, r3
 8007740:	d007      	beq.n	8007752 <xTaskCheckForTimeOut+0x82>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	429a      	cmp	r2, r3
 800774a:	d302      	bcc.n	8007752 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800774c:	2301      	movs	r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	e015      	b.n	800777e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	429a      	cmp	r2, r3
 800775a:	d20b      	bcs.n	8007774 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	1ad2      	subs	r2, r2, r3
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff ff9b 	bl	80076a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800776e:	2300      	movs	r3, #0
 8007770:	61fb      	str	r3, [r7, #28]
 8007772:	e004      	b.n	800777e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800777a:	2301      	movs	r3, #1
 800777c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800777e:	f000 ffbd 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8007782:	69fb      	ldr	r3, [r7, #28]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20001aec 	.word	0x20001aec
 8007790:	20001b00 	.word	0x20001b00

08007794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007798:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <vTaskMissedYield+0x14>)
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]
}
 800779e:	bf00      	nop
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	20001afc 	.word	0x20001afc

080077ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077b4:	f000 f852 	bl	800785c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077b8:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <prvIdleTask+0x28>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d9f9      	bls.n	80077b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077c0:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <prvIdleTask+0x2c>)
 80077c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077d0:	e7f0      	b.n	80077b4 <prvIdleTask+0x8>
 80077d2:	bf00      	nop
 80077d4:	20001618 	.word	0x20001618
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]
 80077e6:	e00c      	b.n	8007802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4a12      	ldr	r2, [pc, #72]	; (800783c <prvInitialiseTaskLists+0x60>)
 80077f4:	4413      	add	r3, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe f9b6 	bl	8005b68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3301      	adds	r3, #1
 8007800:	607b      	str	r3, [r7, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b37      	cmp	r3, #55	; 0x37
 8007806:	d9ef      	bls.n	80077e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007808:	480d      	ldr	r0, [pc, #52]	; (8007840 <prvInitialiseTaskLists+0x64>)
 800780a:	f7fe f9ad 	bl	8005b68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800780e:	480d      	ldr	r0, [pc, #52]	; (8007844 <prvInitialiseTaskLists+0x68>)
 8007810:	f7fe f9aa 	bl	8005b68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007814:	480c      	ldr	r0, [pc, #48]	; (8007848 <prvInitialiseTaskLists+0x6c>)
 8007816:	f7fe f9a7 	bl	8005b68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800781a:	480c      	ldr	r0, [pc, #48]	; (800784c <prvInitialiseTaskLists+0x70>)
 800781c:	f7fe f9a4 	bl	8005b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007820:	480b      	ldr	r0, [pc, #44]	; (8007850 <prvInitialiseTaskLists+0x74>)
 8007822:	f7fe f9a1 	bl	8005b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007826:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <prvInitialiseTaskLists+0x78>)
 8007828:	4a05      	ldr	r2, [pc, #20]	; (8007840 <prvInitialiseTaskLists+0x64>)
 800782a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <prvInitialiseTaskLists+0x7c>)
 800782e:	4a05      	ldr	r2, [pc, #20]	; (8007844 <prvInitialiseTaskLists+0x68>)
 8007830:	601a      	str	r2, [r3, #0]
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20001618 	.word	0x20001618
 8007840:	20001a78 	.word	0x20001a78
 8007844:	20001a8c 	.word	0x20001a8c
 8007848:	20001aa8 	.word	0x20001aa8
 800784c:	20001abc 	.word	0x20001abc
 8007850:	20001ad4 	.word	0x20001ad4
 8007854:	20001aa0 	.word	0x20001aa0
 8007858:	20001aa4 	.word	0x20001aa4

0800785c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007862:	e019      	b.n	8007898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007864:	f000 ff1a 	bl	800869c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007868:	4b10      	ldr	r3, [pc, #64]	; (80078ac <prvCheckTasksWaitingTermination+0x50>)
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3304      	adds	r3, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe f9fd 	bl	8005c74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800787a:	4b0d      	ldr	r3, [pc, #52]	; (80078b0 <prvCheckTasksWaitingTermination+0x54>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3b01      	subs	r3, #1
 8007880:	4a0b      	ldr	r2, [pc, #44]	; (80078b0 <prvCheckTasksWaitingTermination+0x54>)
 8007882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007884:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <prvCheckTasksWaitingTermination+0x58>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3b01      	subs	r3, #1
 800788a:	4a0a      	ldr	r2, [pc, #40]	; (80078b4 <prvCheckTasksWaitingTermination+0x58>)
 800788c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800788e:	f000 ff35 	bl	80086fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f810 	bl	80078b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007898:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <prvCheckTasksWaitingTermination+0x58>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e1      	bne.n	8007864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20001abc 	.word	0x20001abc
 80078b0:	20001ae8 	.word	0x20001ae8
 80078b4:	20001ad0 	.word	0x20001ad0

080078b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3354      	adds	r3, #84	; 0x54
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 fa51 	bl	8008d6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d108      	bne.n	80078e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 f8a3 	bl	8008a24 <vPortFree>
				vPortFree( pxTCB );
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f8a0 	bl	8008a24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078e4:	e018      	b.n	8007918 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d103      	bne.n	80078f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 f897 	bl	8008a24 <vPortFree>
	}
 80078f6:	e00f      	b.n	8007918 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d00a      	beq.n	8007918 <prvDeleteTCB+0x60>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	60fb      	str	r3, [r7, #12]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <prvDeleteTCB+0x5e>
	}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007926:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <prvResetNextTaskUnblockTime+0x40>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <prvResetNextTaskUnblockTime+0x14>
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <prvResetNextTaskUnblockTime+0x16>
 8007934:	2300      	movs	r3, #0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800793a:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <prvResetNextTaskUnblockTime+0x44>)
 800793c:	f04f 32ff 	mov.w	r2, #4294967295
 8007940:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007942:	e008      	b.n	8007956 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <prvResetNextTaskUnblockTime+0x40>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	4a04      	ldr	r2, [pc, #16]	; (8007964 <prvResetNextTaskUnblockTime+0x44>)
 8007954:	6013      	str	r3, [r2, #0]
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr
 8007960:	20001aa0 	.word	0x20001aa0
 8007964:	20001b08 	.word	0x20001b08

08007968 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800796e:	4b0b      	ldr	r3, [pc, #44]	; (800799c <xTaskGetSchedulerState+0x34>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d102      	bne.n	800797c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007976:	2301      	movs	r3, #1
 8007978:	607b      	str	r3, [r7, #4]
 800797a:	e008      	b.n	800798e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800797c:	4b08      	ldr	r3, [pc, #32]	; (80079a0 <xTaskGetSchedulerState+0x38>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007984:	2302      	movs	r3, #2
 8007986:	607b      	str	r3, [r7, #4]
 8007988:	e001      	b.n	800798e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800798a:	2300      	movs	r3, #0
 800798c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800798e:	687b      	ldr	r3, [r7, #4]
	}
 8007990:	4618      	mov	r0, r3
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	bc80      	pop	{r7}
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20001af4 	.word	0x20001af4
 80079a0:	20001b10 	.word	0x20001b10

080079a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d056      	beq.n	8007a68 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079be:	4b2d      	ldr	r3, [pc, #180]	; (8007a74 <xTaskPriorityInherit+0xd0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d246      	bcs.n	8007a56 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	db06      	blt.n	80079de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d0:	4b28      	ldr	r3, [pc, #160]	; (8007a74 <xTaskPriorityInherit+0xd0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	6959      	ldr	r1, [r3, #20]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4a22      	ldr	r2, [pc, #136]	; (8007a78 <xTaskPriorityInherit+0xd4>)
 80079f0:	4413      	add	r3, r2
 80079f2:	4299      	cmp	r1, r3
 80079f4:	d101      	bne.n	80079fa <xTaskPriorityInherit+0x56>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <xTaskPriorityInherit+0x58>
 80079fa:	2300      	movs	r3, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d022      	beq.n	8007a46 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe f935 	bl	8005c74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a0a:	4b1a      	ldr	r3, [pc, #104]	; (8007a74 <xTaskPriorityInherit+0xd0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a18:	4b18      	ldr	r3, [pc, #96]	; (8007a7c <xTaskPriorityInherit+0xd8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d903      	bls.n	8007a28 <xTaskPriorityInherit+0x84>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <xTaskPriorityInherit+0xd8>)
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4a10      	ldr	r2, [pc, #64]	; (8007a78 <xTaskPriorityInherit+0xd4>)
 8007a36:	441a      	add	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	f7fe f8bd 	bl	8005bbe <vListInsertEnd>
 8007a44:	e004      	b.n	8007a50 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a46:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <xTaskPriorityInherit+0xd0>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e008      	b.n	8007a68 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a5a:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <xTaskPriorityInherit+0xd0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d201      	bcs.n	8007a68 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a68:	68fb      	ldr	r3, [r7, #12]
	}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20001614 	.word	0x20001614
 8007a78:	20001618 	.word	0x20001618
 8007a7c:	20001af0 	.word	0x20001af0

08007a80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d056      	beq.n	8007b44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a96:	4b2e      	ldr	r3, [pc, #184]	; (8007b50 <xTaskPriorityDisinherit+0xd0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d00a      	beq.n	8007ab6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	60fb      	str	r3, [r7, #12]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60bb      	str	r3, [r7, #8]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad8:	1e5a      	subs	r2, r3, #1
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d02c      	beq.n	8007b44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d128      	bne.n	8007b44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe f8bc 	bl	8005c74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <xTaskPriorityDisinherit+0xd4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d903      	bls.n	8007b24 <xTaskPriorityDisinherit+0xa4>
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4a0c      	ldr	r2, [pc, #48]	; (8007b54 <xTaskPriorityDisinherit+0xd4>)
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a09      	ldr	r2, [pc, #36]	; (8007b58 <xTaskPriorityDisinherit+0xd8>)
 8007b32:	441a      	add	r2, r3
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f7fe f83f 	bl	8005bbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b40:	2301      	movs	r3, #1
 8007b42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b44:	697b      	ldr	r3, [r7, #20]
	}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20001614 	.word	0x20001614
 8007b54:	20001af0 	.word	0x20001af0
 8007b58:	20001618 	.word	0x20001618

08007b5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d06f      	beq.n	8007c54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	60fb      	str	r3, [r7, #12]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d902      	bls.n	8007ba2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	61fb      	str	r3, [r7, #28]
 8007ba0:	e002      	b.n	8007ba8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d050      	beq.n	8007c54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d14b      	bne.n	8007c54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007bbc:	4b27      	ldr	r3, [pc, #156]	; (8007c5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d10a      	bne.n	8007bdc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	60bb      	str	r3, [r7, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	e7fe      	b.n	8007bda <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db04      	blt.n	8007bfa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	6959      	ldr	r1, [r3, #20]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4a15      	ldr	r2, [pc, #84]	; (8007c60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c0a:	4413      	add	r3, r2
 8007c0c:	4299      	cmp	r1, r3
 8007c0e:	d101      	bne.n	8007c14 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007c14:	2300      	movs	r3, #0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01c      	beq.n	8007c54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe f828 	bl	8005c74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c28:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d903      	bls.n	8007c38 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	4a0b      	ldr	r2, [pc, #44]	; (8007c64 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4a06      	ldr	r2, [pc, #24]	; (8007c60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c46:	441a      	add	r2, r3
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	f7fd ffb5 	bl	8005bbe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c54:	bf00      	nop
 8007c56:	3720      	adds	r7, #32
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20001614 	.word	0x20001614
 8007c60:	20001618 	.word	0x20001618
 8007c64:	20001af0 	.word	0x20001af0

08007c68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c6c:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d004      	beq.n	8007c7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c7a:	3201      	adds	r2, #1
 8007c7c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007c7e:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8007c80:	681b      	ldr	r3, [r3, #0]
	}
 8007c82:	4618      	mov	r0, r3
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20001614 	.word	0x20001614

08007c90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c9a:	4b21      	ldr	r3, [pc, #132]	; (8007d20 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ca0:	4b20      	ldr	r3, [pc, #128]	; (8007d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fd ffe4 	bl	8005c74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb2:	d10a      	bne.n	8007cca <prvAddCurrentTaskToDelayedList+0x3a>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d007      	beq.n	8007cca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cba:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4819      	ldr	r0, [pc, #100]	; (8007d28 <prvAddCurrentTaskToDelayedList+0x98>)
 8007cc4:	f7fd ff7b 	bl	8005bbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cc8:	e026      	b.n	8007d18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cd2:	4b14      	ldr	r3, [pc, #80]	; (8007d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d209      	bcs.n	8007cf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ce2:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4619      	mov	r1, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	f7fd ff88 	bl	8005c04 <vListInsert>
}
 8007cf4:	e010      	b.n	8007d18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cf6:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f7fd ff7e 	bl	8005c04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d08:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d202      	bcs.n	8007d18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d12:	4a08      	ldr	r2, [pc, #32]	; (8007d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	6013      	str	r3, [r2, #0]
}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20001aec 	.word	0x20001aec
 8007d24:	20001614 	.word	0x20001614
 8007d28:	20001ad4 	.word	0x20001ad4
 8007d2c:	20001aa4 	.word	0x20001aa4
 8007d30:	20001aa0 	.word	0x20001aa0
 8007d34:	20001b08 	.word	0x20001b08

08007d38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d42:	f000 fb5b 	bl	80083fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d46:	4b1c      	ldr	r3, [pc, #112]	; (8007db8 <xTimerCreateTimerTask+0x80>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d021      	beq.n	8007d92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d56:	1d3a      	adds	r2, r7, #4
 8007d58:	f107 0108 	add.w	r1, r7, #8
 8007d5c:	f107 030c 	add.w	r3, r7, #12
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fd fee7 	bl	8005b34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	9202      	str	r2, [sp, #8]
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	2302      	movs	r3, #2
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	2300      	movs	r3, #0
 8007d76:	460a      	mov	r2, r1
 8007d78:	4910      	ldr	r1, [pc, #64]	; (8007dbc <xTimerCreateTimerTask+0x84>)
 8007d7a:	4811      	ldr	r0, [pc, #68]	; (8007dc0 <xTimerCreateTimerTask+0x88>)
 8007d7c:	f7fe ffae 	bl	8006cdc <xTaskCreateStatic>
 8007d80:	4603      	mov	r3, r0
 8007d82:	4a10      	ldr	r2, [pc, #64]	; (8007dc4 <xTimerCreateTimerTask+0x8c>)
 8007d84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <xTimerCreateTimerTask+0x8c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	613b      	str	r3, [r7, #16]
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dae:	697b      	ldr	r3, [r7, #20]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20001b44 	.word	0x20001b44
 8007dbc:	08008e84 	.word	0x08008e84
 8007dc0:	08008005 	.word	0x08008005
 8007dc4:	20001b48 	.word	0x20001b48

08007dc8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007dd6:	2030      	movs	r0, #48	; 0x30
 8007dd8:	f000 fd60 	bl	800889c <pvPortMalloc>
 8007ddc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00d      	beq.n	8007e00 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	68b9      	ldr	r1, [r7, #8]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f846 	bl	8007e84 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007e00:	697b      	ldr	r3, [r7, #20]
	}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b08a      	sub	sp, #40	; 0x28
 8007e0e:	af02      	add	r7, sp, #8
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007e18:	2330      	movs	r3, #48	; 0x30
 8007e1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	2b30      	cmp	r3, #48	; 0x30
 8007e20:	d00a      	beq.n	8007e38 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	61bb      	str	r3, [r7, #24]
}
 8007e34:	bf00      	nop
 8007e36:	e7fe      	b.n	8007e36 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <xTimerCreateStatic+0x4a>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	617b      	str	r3, [r7, #20]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00d      	beq.n	8007e7a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 f809 	bl	8007e84 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
	}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3720      	adds	r7, #32
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	617b      	str	r3, [r7, #20]
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d015      	beq.n	8007ee0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007eb4:	f000 faa2 	bl	80083fc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	6a3a      	ldr	r2, [r7, #32]
 8007ed4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	3304      	adds	r3, #4
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fd fe63 	bl	8005ba6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007ee0:	bf00      	nop
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	623b      	str	r3, [r7, #32]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f16:	4b1a      	ldr	r3, [pc, #104]	; (8007f80 <xTimerGenericCommand+0x98>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d02a      	beq.n	8007f74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b05      	cmp	r3, #5
 8007f2e:	dc18      	bgt.n	8007f62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f30:	f7ff fd1a 	bl	8007968 <xTaskGetSchedulerState>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d109      	bne.n	8007f4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f3a:	4b11      	ldr	r3, [pc, #68]	; (8007f80 <xTimerGenericCommand+0x98>)
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	f107 0110 	add.w	r1, r7, #16
 8007f42:	2300      	movs	r3, #0
 8007f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f46:	f7fe f869 	bl	800601c <xQueueGenericSend>
 8007f4a:	6278      	str	r0, [r7, #36]	; 0x24
 8007f4c:	e012      	b.n	8007f74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <xTimerGenericCommand+0x98>)
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	f107 0110 	add.w	r1, r7, #16
 8007f56:	2300      	movs	r3, #0
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f7fe f85f 	bl	800601c <xQueueGenericSend>
 8007f5e:	6278      	str	r0, [r7, #36]	; 0x24
 8007f60:	e008      	b.n	8007f74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f62:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <xTimerGenericCommand+0x98>)
 8007f64:	6818      	ldr	r0, [r3, #0]
 8007f66:	f107 0110 	add.w	r1, r7, #16
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	f7fe f953 	bl	8006218 <xQueueGenericSendFromISR>
 8007f72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3728      	adds	r7, #40	; 0x28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20001b44 	.word	0x20001b44

08007f84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f8e:	4b1c      	ldr	r3, [pc, #112]	; (8008000 <prvProcessExpiredTimer+0x7c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fd fe69 	bl	8005c74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d122      	bne.n	8007ff0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	18d1      	adds	r1, r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	6978      	ldr	r0, [r7, #20]
 8007fb8:	f000 f8c8 	bl	800814c <prvInsertTimerInActiveList>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d016      	beq.n	8007ff0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	2100      	movs	r1, #0
 8007fcc:	6978      	ldr	r0, [r7, #20]
 8007fce:	f7ff ff8b 	bl	8007ee8 <xTimerGenericCommand>
 8007fd2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	60fb      	str	r3, [r7, #12]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	6978      	ldr	r0, [r7, #20]
 8007ff6:	4798      	blx	r3
}
 8007ff8:	bf00      	nop
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	20001b3c 	.word	0x20001b3c

08008004 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800800c:	f107 0308 	add.w	r3, r7, #8
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f857 	bl	80080c4 <prvGetNextExpireTime>
 8008016:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4619      	mov	r1, r3
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 f803 	bl	8008028 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008022:	f000 f8d5 	bl	80081d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008026:	e7f1      	b.n	800800c <prvTimerTask+0x8>

08008028 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008032:	f7ff f8a7 	bl	8007184 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008036:	f107 0308 	add.w	r3, r7, #8
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f866 	bl	800810c <prvSampleTimeNow>
 8008040:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d130      	bne.n	80080aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10a      	bne.n	8008064 <prvProcessTimerOrBlockTask+0x3c>
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	429a      	cmp	r2, r3
 8008054:	d806      	bhi.n	8008064 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008056:	f7ff f8a3 	bl	80071a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff ff91 	bl	8007f84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008062:	e024      	b.n	80080ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d008      	beq.n	800807c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <prvProcessTimerOrBlockTask+0x90>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bf0c      	ite	eq
 8008074:	2301      	moveq	r3, #1
 8008076:	2300      	movne	r3, #0
 8008078:	b2db      	uxtb	r3, r3
 800807a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <prvProcessTimerOrBlockTask+0x94>)
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	4619      	mov	r1, r3
 800808a:	f7fe fdf3 	bl	8006c74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800808e:	f7ff f887 	bl	80071a0 <xTaskResumeAll>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008098:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <prvProcessTimerOrBlockTask+0x98>)
 800809a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	f3bf 8f6f 	isb	sy
}
 80080a8:	e001      	b.n	80080ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080aa:	f7ff f879 	bl	80071a0 <xTaskResumeAll>
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20001b40 	.word	0x20001b40
 80080bc:	20001b44 	.word	0x20001b44
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080cc:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <prvGetNextExpireTime+0x44>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bf0c      	ite	eq
 80080d6:	2301      	moveq	r3, #1
 80080d8:	2300      	movne	r3, #0
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <prvGetNextExpireTime+0x44>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	e001      	b.n	80080fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080fa:	68fb      	ldr	r3, [r7, #12]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20001b3c 	.word	0x20001b3c

0800810c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008114:	f7ff f8e2 	bl	80072dc <xTaskGetTickCount>
 8008118:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800811a:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <prvSampleTimeNow+0x3c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	429a      	cmp	r2, r3
 8008122:	d205      	bcs.n	8008130 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008124:	f000 f908 	bl	8008338 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e002      	b.n	8008136 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008136:	4a04      	ldr	r2, [pc, #16]	; (8008148 <prvSampleTimeNow+0x3c>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800813c:	68fb      	ldr	r3, [r7, #12]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20001b4c 	.word	0x20001b4c

0800814c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	429a      	cmp	r2, r3
 8008170:	d812      	bhi.n	8008198 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	1ad2      	subs	r2, r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	429a      	cmp	r2, r3
 800817e:	d302      	bcc.n	8008186 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008180:	2301      	movs	r3, #1
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	e01b      	b.n	80081be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008186:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <prvInsertTimerInActiveList+0x7c>)
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3304      	adds	r3, #4
 800818e:	4619      	mov	r1, r3
 8008190:	4610      	mov	r0, r2
 8008192:	f7fd fd37 	bl	8005c04 <vListInsert>
 8008196:	e012      	b.n	80081be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	429a      	cmp	r2, r3
 800819e:	d206      	bcs.n	80081ae <prvInsertTimerInActiveList+0x62>
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d302      	bcc.n	80081ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081a8:	2301      	movs	r3, #1
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	e007      	b.n	80081be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081ae:	4b07      	ldr	r3, [pc, #28]	; (80081cc <prvInsertTimerInActiveList+0x80>)
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f7fd fd23 	bl	8005c04 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081be:	697b      	ldr	r3, [r7, #20]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20001b40 	.word	0x20001b40
 80081cc:	20001b3c 	.word	0x20001b3c

080081d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08e      	sub	sp, #56	; 0x38
 80081d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081d6:	e09d      	b.n	8008314 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	da18      	bge.n	8008210 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	3304      	adds	r3, #4
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	61fb      	str	r3, [r7, #28]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008206:	6850      	ldr	r0, [r2, #4]
 8008208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820a:	6892      	ldr	r2, [r2, #8]
 800820c:	4611      	mov	r1, r2
 800820e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	db7d      	blt.n	8008312 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d004      	beq.n	800822c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	3304      	adds	r3, #4
 8008226:	4618      	mov	r0, r3
 8008228:	f7fd fd24 	bl	8005c74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800822c:	463b      	mov	r3, r7
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff ff6c 	bl	800810c <prvSampleTimeNow>
 8008234:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b09      	cmp	r3, #9
 800823a:	d86b      	bhi.n	8008314 <prvProcessReceivedCommands+0x144>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <prvProcessReceivedCommands+0x74>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	0800826d 	.word	0x0800826d
 8008248:	0800826d 	.word	0x0800826d
 800824c:	0800826d 	.word	0x0800826d
 8008250:	08008315 	.word	0x08008315
 8008254:	080082c9 	.word	0x080082c9
 8008258:	08008301 	.word	0x08008301
 800825c:	0800826d 	.word	0x0800826d
 8008260:	0800826d 	.word	0x0800826d
 8008264:	08008315 	.word	0x08008315
 8008268:	080082c9 	.word	0x080082c9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	18d1      	adds	r1, r2, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827a:	f7ff ff67 	bl	800814c <prvInsertTimerInActiveList>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d047      	beq.n	8008314 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800828a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d13f      	bne.n	8008314 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	441a      	add	r2, r3
 800829c:	2300      	movs	r3, #0
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2300      	movs	r3, #0
 80082a2:	2100      	movs	r1, #0
 80082a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a6:	f7ff fe1f 	bl	8007ee8 <xTimerGenericCommand>
 80082aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d130      	bne.n	8008314 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	61bb      	str	r3, [r7, #24]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10a      	bne.n	80082ec <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	617b      	str	r3, [r7, #20]
}
 80082e8:	bf00      	nop
 80082ea:	e7fe      	b.n	80082ea <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	699a      	ldr	r2, [r3, #24]
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	18d1      	adds	r1, r2, r3
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082fa:	f7ff ff27 	bl	800814c <prvInsertTimerInActiveList>
					break;
 80082fe:	e009      	b.n	8008314 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008306:	2b00      	cmp	r3, #0
 8008308:	d104      	bne.n	8008314 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800830a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800830c:	f000 fb8a 	bl	8008a24 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008310:	e000      	b.n	8008314 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008312:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008314:	4b07      	ldr	r3, [pc, #28]	; (8008334 <prvProcessReceivedCommands+0x164>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	1d39      	adds	r1, r7, #4
 800831a:	2200      	movs	r2, #0
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe f8a1 	bl	8006464 <xQueueReceive>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	f47f af57 	bne.w	80081d8 <prvProcessReceivedCommands+0x8>
	}
}
 800832a:	bf00      	nop
 800832c:	bf00      	nop
 800832e:	3730      	adds	r7, #48	; 0x30
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	20001b44 	.word	0x20001b44

08008338 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800833e:	e045      	b.n	80083cc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008340:	4b2c      	ldr	r3, [pc, #176]	; (80083f4 <prvSwitchTimerLists+0xbc>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800834a:	4b2a      	ldr	r3, [pc, #168]	; (80083f4 <prvSwitchTimerLists+0xbc>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3304      	adds	r3, #4
 8008358:	4618      	mov	r0, r3
 800835a:	f7fd fc8b 	bl	8005c74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d12e      	bne.n	80083cc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4413      	add	r3, r2
 8008376:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	429a      	cmp	r2, r3
 800837e:	d90e      	bls.n	800839e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800838c:	4b19      	ldr	r3, [pc, #100]	; (80083f4 <prvSwitchTimerLists+0xbc>)
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3304      	adds	r3, #4
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f7fd fc34 	bl	8005c04 <vListInsert>
 800839c:	e016      	b.n	80083cc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800839e:	2300      	movs	r3, #0
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	2300      	movs	r3, #0
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	2100      	movs	r1, #0
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fd9d 	bl	8007ee8 <xTimerGenericCommand>
 80083ae:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <prvSwitchTimerLists+0x94>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	603b      	str	r3, [r7, #0]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083cc:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <prvSwitchTimerLists+0xbc>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1b4      	bne.n	8008340 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083d6:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <prvSwitchTimerLists+0xbc>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <prvSwitchTimerLists+0xc0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a04      	ldr	r2, [pc, #16]	; (80083f4 <prvSwitchTimerLists+0xbc>)
 80083e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083e4:	4a04      	ldr	r2, [pc, #16]	; (80083f8 <prvSwitchTimerLists+0xc0>)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	6013      	str	r3, [r2, #0]
}
 80083ea:	bf00      	nop
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20001b3c 	.word	0x20001b3c
 80083f8:	20001b40 	.word	0x20001b40

080083fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008402:	f000 f94b 	bl	800869c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008406:	4b15      	ldr	r3, [pc, #84]	; (800845c <prvCheckForValidListAndQueue+0x60>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d120      	bne.n	8008450 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800840e:	4814      	ldr	r0, [pc, #80]	; (8008460 <prvCheckForValidListAndQueue+0x64>)
 8008410:	f7fd fbaa 	bl	8005b68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008414:	4813      	ldr	r0, [pc, #76]	; (8008464 <prvCheckForValidListAndQueue+0x68>)
 8008416:	f7fd fba7 	bl	8005b68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800841a:	4b13      	ldr	r3, [pc, #76]	; (8008468 <prvCheckForValidListAndQueue+0x6c>)
 800841c:	4a10      	ldr	r2, [pc, #64]	; (8008460 <prvCheckForValidListAndQueue+0x64>)
 800841e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008420:	4b12      	ldr	r3, [pc, #72]	; (800846c <prvCheckForValidListAndQueue+0x70>)
 8008422:	4a10      	ldr	r2, [pc, #64]	; (8008464 <prvCheckForValidListAndQueue+0x68>)
 8008424:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008426:	2300      	movs	r3, #0
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	4b11      	ldr	r3, [pc, #68]	; (8008470 <prvCheckForValidListAndQueue+0x74>)
 800842c:	4a11      	ldr	r2, [pc, #68]	; (8008474 <prvCheckForValidListAndQueue+0x78>)
 800842e:	2110      	movs	r1, #16
 8008430:	200a      	movs	r0, #10
 8008432:	f7fd fcb1 	bl	8005d98 <xQueueGenericCreateStatic>
 8008436:	4603      	mov	r3, r0
 8008438:	4a08      	ldr	r2, [pc, #32]	; (800845c <prvCheckForValidListAndQueue+0x60>)
 800843a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800843c:	4b07      	ldr	r3, [pc, #28]	; (800845c <prvCheckForValidListAndQueue+0x60>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <prvCheckForValidListAndQueue+0x60>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	490b      	ldr	r1, [pc, #44]	; (8008478 <prvCheckForValidListAndQueue+0x7c>)
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fbc0 	bl	8006bd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008450:	f000 f954 	bl	80086fc <vPortExitCritical>
}
 8008454:	bf00      	nop
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20001b44 	.word	0x20001b44
 8008460:	20001b14 	.word	0x20001b14
 8008464:	20001b28 	.word	0x20001b28
 8008468:	20001b3c 	.word	0x20001b3c
 800846c:	20001b40 	.word	0x20001b40
 8008470:	20001bf0 	.word	0x20001bf0
 8008474:	20001b50 	.word	0x20001b50
 8008478:	08008e8c 	.word	0x08008e8c

0800847c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10a      	bne.n	80084a4 <pvTimerGetTimerID+0x28>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	60fb      	str	r3, [r7, #12]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80084a4:	f000 f8fa 	bl	800869c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80084ae:	f000 f925 	bl	80086fc <vPortExitCritical>

	return pvReturn;
 80084b2:	693b      	ldr	r3, [r7, #16]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3b04      	subs	r3, #4
 80084cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b04      	subs	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f023 0201 	bic.w	r2, r3, #1
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3b04      	subs	r3, #4
 80084ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084ec:	4a08      	ldr	r2, [pc, #32]	; (8008510 <pxPortInitialiseStack+0x54>)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3b14      	subs	r3, #20
 80084f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3b20      	subs	r3, #32
 8008502:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008504:	68fb      	ldr	r3, [r7, #12]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr
 8008510:	08008515 	.word	0x08008515

08008514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800851a:	2300      	movs	r3, #0
 800851c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800851e:	4b12      	ldr	r3, [pc, #72]	; (8008568 <prvTaskExitError+0x54>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	d00a      	beq.n	800853e <prvTaskExitError+0x2a>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	60fb      	str	r3, [r7, #12]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <prvTaskExitError+0x28>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	60bb      	str	r3, [r7, #8]
}
 8008550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008552:	bf00      	nop
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0fc      	beq.n	8008554 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	bc80      	pop	{r7}
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	20000098 	.word	0x20000098
 800856c:	00000000 	.word	0x00000000

08008570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <pxCurrentTCBConst2>)
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800857a:	f380 8809 	msr	PSP, r0
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8811 	msr	BASEPRI, r0
 800858a:	f04e 0e0d 	orr.w	lr, lr, #13
 800858e:	4770      	bx	lr

08008590 <pxCurrentTCBConst2>:
 8008590:	20001614 	.word	0x20001614
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008598:	4806      	ldr	r0, [pc, #24]	; (80085b4 <prvPortStartFirstTask+0x1c>)
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	6800      	ldr	r0, [r0, #0]
 800859e:	f380 8808 	msr	MSP, r0
 80085a2:	b662      	cpsie	i
 80085a4:	b661      	cpsie	f
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	df00      	svc	0
 80085b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085b2:	bf00      	nop
 80085b4:	e000ed08 	.word	0xe000ed08

080085b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085be:	4b32      	ldr	r3, [pc, #200]	; (8008688 <xPortStartScheduler+0xd0>)
 80085c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	22ff      	movs	r2, #255	; 0xff
 80085ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	4b2a      	ldr	r3, [pc, #168]	; (800868c <xPortStartScheduler+0xd4>)
 80085e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085e6:	4b2a      	ldr	r3, [pc, #168]	; (8008690 <xPortStartScheduler+0xd8>)
 80085e8:	2207      	movs	r2, #7
 80085ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ec:	e009      	b.n	8008602 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80085ee:	4b28      	ldr	r3, [pc, #160]	; (8008690 <xPortStartScheduler+0xd8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	4a26      	ldr	r2, [pc, #152]	; (8008690 <xPortStartScheduler+0xd8>)
 80085f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860a:	2b80      	cmp	r3, #128	; 0x80
 800860c:	d0ef      	beq.n	80085ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <xPortStartScheduler+0xd8>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f1c3 0307 	rsb	r3, r3, #7
 8008616:	2b04      	cmp	r3, #4
 8008618:	d00a      	beq.n	8008630 <xPortStartScheduler+0x78>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	60bb      	str	r3, [r7, #8]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008630:	4b17      	ldr	r3, [pc, #92]	; (8008690 <xPortStartScheduler+0xd8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	021b      	lsls	r3, r3, #8
 8008636:	4a16      	ldr	r2, [pc, #88]	; (8008690 <xPortStartScheduler+0xd8>)
 8008638:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800863a:	4b15      	ldr	r3, [pc, #84]	; (8008690 <xPortStartScheduler+0xd8>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008642:	4a13      	ldr	r2, [pc, #76]	; (8008690 <xPortStartScheduler+0xd8>)
 8008644:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	b2da      	uxtb	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800864e:	4b11      	ldr	r3, [pc, #68]	; (8008694 <xPortStartScheduler+0xdc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a10      	ldr	r2, [pc, #64]	; (8008694 <xPortStartScheduler+0xdc>)
 8008654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800865a:	4b0e      	ldr	r3, [pc, #56]	; (8008694 <xPortStartScheduler+0xdc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a0d      	ldr	r2, [pc, #52]	; (8008694 <xPortStartScheduler+0xdc>)
 8008660:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008664:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008666:	f000 f8b9 	bl	80087dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800866a:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <xPortStartScheduler+0xe0>)
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008670:	f7ff ff92 	bl	8008598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008674:	f7fe fefe 	bl	8007474 <vTaskSwitchContext>
	prvTaskExitError();
 8008678:	f7ff ff4c 	bl	8008514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	e000e400 	.word	0xe000e400
 800868c:	20001c40 	.word	0x20001c40
 8008690:	20001c44 	.word	0x20001c44
 8008694:	e000ed20 	.word	0xe000ed20
 8008698:	20000098 	.word	0x20000098

0800869c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	607b      	str	r3, [r7, #4]
}
 80086b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086b6:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <vPortEnterCritical+0x58>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3301      	adds	r3, #1
 80086bc:	4a0d      	ldr	r2, [pc, #52]	; (80086f4 <vPortEnterCritical+0x58>)
 80086be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086c0:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <vPortEnterCritical+0x58>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d10f      	bne.n	80086e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086c8:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <vPortEnterCritical+0x5c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	603b      	str	r3, [r7, #0]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <vPortEnterCritical+0x4a>
	}
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000098 	.word	0x20000098
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008702:	4b11      	ldr	r3, [pc, #68]	; (8008748 <vPortExitCritical+0x4c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <vPortExitCritical+0x24>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	607b      	str	r3, [r7, #4]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008720:	4b09      	ldr	r3, [pc, #36]	; (8008748 <vPortExitCritical+0x4c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3b01      	subs	r3, #1
 8008726:	4a08      	ldr	r2, [pc, #32]	; (8008748 <vPortExitCritical+0x4c>)
 8008728:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800872a:	4b07      	ldr	r3, [pc, #28]	; (8008748 <vPortExitCritical+0x4c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <vPortExitCritical+0x42>
 8008732:	2300      	movs	r3, #0
 8008734:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	f383 8811 	msr	BASEPRI, r3
}
 800873c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr
 8008748:	20000098 	.word	0x20000098
 800874c:	00000000 	.word	0x00000000

08008750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008750:	f3ef 8009 	mrs	r0, PSP
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <pxCurrentTCBConst>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008760:	6010      	str	r0, [r2, #0]
 8008762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008766:	f04f 0050 	mov.w	r0, #80	; 0x50
 800876a:	f380 8811 	msr	BASEPRI, r0
 800876e:	f7fe fe81 	bl	8007474 <vTaskSwitchContext>
 8008772:	f04f 0000 	mov.w	r0, #0
 8008776:	f380 8811 	msr	BASEPRI, r0
 800877a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800877e:	6819      	ldr	r1, [r3, #0]
 8008780:	6808      	ldr	r0, [r1, #0]
 8008782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008786:	f380 8809 	msr	PSP, r0
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	4770      	bx	lr

08008790 <pxCurrentTCBConst>:
 8008790:	20001614 	.word	0x20001614
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop

08008798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	607b      	str	r3, [r7, #4]
}
 80087b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087b2:	f7fe fda1 	bl	80072f8 <xTaskIncrementTick>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <SysTick_Handler+0x40>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	2300      	movs	r3, #0
 80087c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f383 8811 	msr	BASEPRI, r3
}
 80087ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <vPortSetupTimerInterrupt+0x30>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087e6:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <vPortSetupTimerInterrupt+0x34>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <vPortSetupTimerInterrupt+0x38>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a09      	ldr	r2, [pc, #36]	; (8008818 <vPortSetupTimerInterrupt+0x3c>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	099b      	lsrs	r3, r3, #6
 80087f8:	4a08      	ldr	r2, [pc, #32]	; (800881c <vPortSetupTimerInterrupt+0x40>)
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087fe:	4b03      	ldr	r3, [pc, #12]	; (800880c <vPortSetupTimerInterrupt+0x30>)
 8008800:	2207      	movs	r2, #7
 8008802:	601a      	str	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr
 800880c:	e000e010 	.word	0xe000e010
 8008810:	e000e018 	.word	0xe000e018
 8008814:	20000000 	.word	0x20000000
 8008818:	10624dd3 	.word	0x10624dd3
 800881c:	e000e014 	.word	0xe000e014

08008820 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008826:	f3ef 8305 	mrs	r3, IPSR
 800882a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b0f      	cmp	r3, #15
 8008830:	d914      	bls.n	800885c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008832:	4a16      	ldr	r2, [pc, #88]	; (800888c <vPortValidateInterruptPriority+0x6c>)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800883c:	4b14      	ldr	r3, [pc, #80]	; (8008890 <vPortValidateInterruptPriority+0x70>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	7afa      	ldrb	r2, [r7, #11]
 8008842:	429a      	cmp	r2, r3
 8008844:	d20a      	bcs.n	800885c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	607b      	str	r3, [r7, #4]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800885c:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <vPortValidateInterruptPriority+0x74>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008864:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <vPortValidateInterruptPriority+0x78>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	429a      	cmp	r2, r3
 800886a:	d90a      	bls.n	8008882 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	603b      	str	r3, [r7, #0]
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <vPortValidateInterruptPriority+0x60>
	}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	bc80      	pop	{r7}
 800888a:	4770      	bx	lr
 800888c:	e000e3f0 	.word	0xe000e3f0
 8008890:	20001c40 	.word	0x20001c40
 8008894:	e000ed0c 	.word	0xe000ed0c
 8008898:	20001c44 	.word	0x20001c44

0800889c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	; 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088a4:	2300      	movs	r3, #0
 80088a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088a8:	f7fe fc6c 	bl	8007184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088ac:	4b58      	ldr	r3, [pc, #352]	; (8008a10 <pvPortMalloc+0x174>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088b4:	f000 f910 	bl	8008ad8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088b8:	4b56      	ldr	r3, [pc, #344]	; (8008a14 <pvPortMalloc+0x178>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4013      	ands	r3, r2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f040 808e 	bne.w	80089e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d01d      	beq.n	8008908 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80088cc:	2208      	movs	r2, #8
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4413      	add	r3, r2
 80088d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d014      	beq.n	8008908 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f023 0307 	bic.w	r3, r3, #7
 80088e4:	3308      	adds	r3, #8
 80088e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <pvPortMalloc+0x6c>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	617b      	str	r3, [r7, #20]
}
 8008904:	bf00      	nop
 8008906:	e7fe      	b.n	8008906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d069      	beq.n	80089e2 <pvPortMalloc+0x146>
 800890e:	4b42      	ldr	r3, [pc, #264]	; (8008a18 <pvPortMalloc+0x17c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d864      	bhi.n	80089e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008918:	4b40      	ldr	r3, [pc, #256]	; (8008a1c <pvPortMalloc+0x180>)
 800891a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800891c:	4b3f      	ldr	r3, [pc, #252]	; (8008a1c <pvPortMalloc+0x180>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008922:	e004      	b.n	800892e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d903      	bls.n	8008940 <pvPortMalloc+0xa4>
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1f1      	bne.n	8008924 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008940:	4b33      	ldr	r3, [pc, #204]	; (8008a10 <pvPortMalloc+0x174>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008946:	429a      	cmp	r2, r3
 8008948:	d04b      	beq.n	80089e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2208      	movs	r2, #8
 8008950:	4413      	add	r3, r2
 8008952:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	1ad2      	subs	r2, r2, r3
 8008964:	2308      	movs	r3, #8
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	429a      	cmp	r2, r3
 800896a:	d91f      	bls.n	80089ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800896c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4413      	add	r3, r2
 8008972:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <pvPortMalloc+0xf8>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	613b      	str	r3, [r7, #16]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	1ad2      	subs	r2, r2, r3
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089a6:	69b8      	ldr	r0, [r7, #24]
 80089a8:	f000 f8f8 	bl	8008b9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089ac:	4b1a      	ldr	r3, [pc, #104]	; (8008a18 <pvPortMalloc+0x17c>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <pvPortMalloc+0x17c>)
 80089b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089ba:	4b17      	ldr	r3, [pc, #92]	; (8008a18 <pvPortMalloc+0x17c>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	4b18      	ldr	r3, [pc, #96]	; (8008a20 <pvPortMalloc+0x184>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d203      	bcs.n	80089ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <pvPortMalloc+0x17c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <pvPortMalloc+0x184>)
 80089cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	4b10      	ldr	r3, [pc, #64]	; (8008a14 <pvPortMalloc+0x178>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089e2:	f7fe fbdd 	bl	80071a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00a      	beq.n	8008a06 <pvPortMalloc+0x16a>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	60fb      	str	r3, [r7, #12]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <pvPortMalloc+0x168>
	return pvReturn;
 8008a06:	69fb      	ldr	r3, [r7, #28]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3728      	adds	r7, #40	; 0x28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	20002c50 	.word	0x20002c50
 8008a14:	20002c5c 	.word	0x20002c5c
 8008a18:	20002c54 	.word	0x20002c54
 8008a1c:	20002c48 	.word	0x20002c48
 8008a20:	20002c58 	.word	0x20002c58

08008a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d048      	beq.n	8008ac8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a36:	2308      	movs	r3, #8
 8008a38:	425b      	negs	r3, r3
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	4b21      	ldr	r3, [pc, #132]	; (8008ad0 <vPortFree+0xac>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <vPortFree+0x44>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	60fb      	str	r3, [r7, #12]
}
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <vPortFree+0x62>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60bb      	str	r3, [r7, #8]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <vPortFree+0xac>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d019      	beq.n	8008ac8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d115      	bne.n	8008ac8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <vPortFree+0xac>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	401a      	ands	r2, r3
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008aac:	f7fe fb6a 	bl	8007184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <vPortFree+0xb0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4413      	add	r3, r2
 8008aba:	4a06      	ldr	r2, [pc, #24]	; (8008ad4 <vPortFree+0xb0>)
 8008abc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008abe:	6938      	ldr	r0, [r7, #16]
 8008ac0:	f000 f86c 	bl	8008b9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ac4:	f7fe fb6c 	bl	80071a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ac8:	bf00      	nop
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20002c5c 	.word	0x20002c5c
 8008ad4:	20002c54 	.word	0x20002c54

08008ad8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ae4:	4b27      	ldr	r3, [pc, #156]	; (8008b84 <prvHeapInit+0xac>)
 8008ae6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00c      	beq.n	8008b0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3307      	adds	r3, #7
 8008af6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 0307 	bic.w	r3, r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	4a1f      	ldr	r2, [pc, #124]	; (8008b84 <prvHeapInit+0xac>)
 8008b08:	4413      	add	r3, r2
 8008b0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b10:	4a1d      	ldr	r2, [pc, #116]	; (8008b88 <prvHeapInit+0xb0>)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b16:	4b1c      	ldr	r3, [pc, #112]	; (8008b88 <prvHeapInit+0xb0>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	4413      	add	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b24:	2208      	movs	r2, #8
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f023 0307 	bic.w	r3, r3, #7
 8008b32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4a15      	ldr	r2, [pc, #84]	; (8008b8c <prvHeapInit+0xb4>)
 8008b38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b3a:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <prvHeapInit+0xb4>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b42:	4b12      	ldr	r3, [pc, #72]	; (8008b8c <prvHeapInit+0xb4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	1ad2      	subs	r2, r2, r3
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <prvHeapInit+0xb4>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	4a0a      	ldr	r2, [pc, #40]	; (8008b90 <prvHeapInit+0xb8>)
 8008b66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <prvHeapInit+0xbc>)
 8008b6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b70:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <prvHeapInit+0xc0>)
 8008b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b76:	601a      	str	r2, [r3, #0]
}
 8008b78:	bf00      	nop
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20001c48 	.word	0x20001c48
 8008b88:	20002c48 	.word	0x20002c48
 8008b8c:	20002c50 	.word	0x20002c50
 8008b90:	20002c58 	.word	0x20002c58
 8008b94:	20002c54 	.word	0x20002c54
 8008b98:	20002c5c 	.word	0x20002c5c

08008b9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ba4:	4b27      	ldr	r3, [pc, #156]	; (8008c44 <prvInsertBlockIntoFreeList+0xa8>)
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	e002      	b.n	8008bb0 <prvInsertBlockIntoFreeList+0x14>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d8f7      	bhi.n	8008baa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d108      	bne.n	8008bde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	441a      	add	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	441a      	add	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d118      	bne.n	8008c24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvInsertBlockIntoFreeList+0xac>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d00d      	beq.n	8008c1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	441a      	add	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	e008      	b.n	8008c2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c1a:	4b0b      	ldr	r3, [pc, #44]	; (8008c48 <prvInsertBlockIntoFreeList+0xac>)
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	e003      	b.n	8008c2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d002      	beq.n	8008c3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c3a:	bf00      	nop
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bc80      	pop	{r7}
 8008c42:	4770      	bx	lr
 8008c44:	20002c48 	.word	0x20002c48
 8008c48:	20002c50 	.word	0x20002c50

08008c4c <__libc_init_array>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	2600      	movs	r6, #0
 8008c50:	4d0c      	ldr	r5, [pc, #48]	; (8008c84 <__libc_init_array+0x38>)
 8008c52:	4c0d      	ldr	r4, [pc, #52]	; (8008c88 <__libc_init_array+0x3c>)
 8008c54:	1b64      	subs	r4, r4, r5
 8008c56:	10a4      	asrs	r4, r4, #2
 8008c58:	42a6      	cmp	r6, r4
 8008c5a:	d109      	bne.n	8008c70 <__libc_init_array+0x24>
 8008c5c:	f000 f8ee 	bl	8008e3c <_init>
 8008c60:	2600      	movs	r6, #0
 8008c62:	4d0a      	ldr	r5, [pc, #40]	; (8008c8c <__libc_init_array+0x40>)
 8008c64:	4c0a      	ldr	r4, [pc, #40]	; (8008c90 <__libc_init_array+0x44>)
 8008c66:	1b64      	subs	r4, r4, r5
 8008c68:	10a4      	asrs	r4, r4, #2
 8008c6a:	42a6      	cmp	r6, r4
 8008c6c:	d105      	bne.n	8008c7a <__libc_init_array+0x2e>
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c74:	4798      	blx	r3
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7ee      	b.n	8008c58 <__libc_init_array+0xc>
 8008c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7e:	4798      	blx	r3
 8008c80:	3601      	adds	r6, #1
 8008c82:	e7f2      	b.n	8008c6a <__libc_init_array+0x1e>
 8008c84:	080091d4 	.word	0x080091d4
 8008c88:	080091d4 	.word	0x080091d4
 8008c8c:	080091d4 	.word	0x080091d4
 8008c90:	080091d8 	.word	0x080091d8

08008c94 <memcpy>:
 8008c94:	440a      	add	r2, r1
 8008c96:	4291      	cmp	r1, r2
 8008c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c9c:	d100      	bne.n	8008ca0 <memcpy+0xc>
 8008c9e:	4770      	bx	lr
 8008ca0:	b510      	push	{r4, lr}
 8008ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ca6:	4291      	cmp	r1, r2
 8008ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cac:	d1f9      	bne.n	8008ca2 <memcpy+0xe>
 8008cae:	bd10      	pop	{r4, pc}

08008cb0 <memset>:
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4402      	add	r2, r0
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d100      	bne.n	8008cba <memset+0xa>
 8008cb8:	4770      	bx	lr
 8008cba:	f803 1b01 	strb.w	r1, [r3], #1
 8008cbe:	e7f9      	b.n	8008cb4 <memset+0x4>

08008cc0 <_free_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	d040      	beq.n	8008d4a <_free_r+0x8a>
 8008cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ccc:	1f0c      	subs	r4, r1, #4
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bfb8      	it	lt
 8008cd2:	18e4      	addlt	r4, r4, r3
 8008cd4:	f000 f8a6 	bl	8008e24 <__malloc_lock>
 8008cd8:	4a1c      	ldr	r2, [pc, #112]	; (8008d4c <_free_r+0x8c>)
 8008cda:	6813      	ldr	r3, [r2, #0]
 8008cdc:	b933      	cbnz	r3, 8008cec <_free_r+0x2c>
 8008cde:	6063      	str	r3, [r4, #4]
 8008ce0:	6014      	str	r4, [r2, #0]
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ce8:	f000 b8a2 	b.w	8008e30 <__malloc_unlock>
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	d908      	bls.n	8008d02 <_free_r+0x42>
 8008cf0:	6820      	ldr	r0, [r4, #0]
 8008cf2:	1821      	adds	r1, r4, r0
 8008cf4:	428b      	cmp	r3, r1
 8008cf6:	bf01      	itttt	eq
 8008cf8:	6819      	ldreq	r1, [r3, #0]
 8008cfa:	685b      	ldreq	r3, [r3, #4]
 8008cfc:	1809      	addeq	r1, r1, r0
 8008cfe:	6021      	streq	r1, [r4, #0]
 8008d00:	e7ed      	b.n	8008cde <_free_r+0x1e>
 8008d02:	461a      	mov	r2, r3
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	b10b      	cbz	r3, 8008d0c <_free_r+0x4c>
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	d9fa      	bls.n	8008d02 <_free_r+0x42>
 8008d0c:	6811      	ldr	r1, [r2, #0]
 8008d0e:	1850      	adds	r0, r2, r1
 8008d10:	42a0      	cmp	r0, r4
 8008d12:	d10b      	bne.n	8008d2c <_free_r+0x6c>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	4401      	add	r1, r0
 8008d18:	1850      	adds	r0, r2, r1
 8008d1a:	4283      	cmp	r3, r0
 8008d1c:	6011      	str	r1, [r2, #0]
 8008d1e:	d1e0      	bne.n	8008ce2 <_free_r+0x22>
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	4401      	add	r1, r0
 8008d26:	6011      	str	r1, [r2, #0]
 8008d28:	6053      	str	r3, [r2, #4]
 8008d2a:	e7da      	b.n	8008ce2 <_free_r+0x22>
 8008d2c:	d902      	bls.n	8008d34 <_free_r+0x74>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	e7d6      	b.n	8008ce2 <_free_r+0x22>
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	1821      	adds	r1, r4, r0
 8008d38:	428b      	cmp	r3, r1
 8008d3a:	bf01      	itttt	eq
 8008d3c:	6819      	ldreq	r1, [r3, #0]
 8008d3e:	685b      	ldreq	r3, [r3, #4]
 8008d40:	1809      	addeq	r1, r1, r0
 8008d42:	6021      	streq	r1, [r4, #0]
 8008d44:	6063      	str	r3, [r4, #4]
 8008d46:	6054      	str	r4, [r2, #4]
 8008d48:	e7cb      	b.n	8008ce2 <_free_r+0x22>
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	20002c60 	.word	0x20002c60

08008d50 <cleanup_glue>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	460c      	mov	r4, r1
 8008d54:	6809      	ldr	r1, [r1, #0]
 8008d56:	4605      	mov	r5, r0
 8008d58:	b109      	cbz	r1, 8008d5e <cleanup_glue+0xe>
 8008d5a:	f7ff fff9 	bl	8008d50 <cleanup_glue>
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4628      	mov	r0, r5
 8008d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d66:	f7ff bfab 	b.w	8008cc0 <_free_r>
	...

08008d6c <_reclaim_reent>:
 8008d6c:	4b2c      	ldr	r3, [pc, #176]	; (8008e20 <_reclaim_reent+0xb4>)
 8008d6e:	b570      	push	{r4, r5, r6, lr}
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4604      	mov	r4, r0
 8008d74:	4283      	cmp	r3, r0
 8008d76:	d051      	beq.n	8008e1c <_reclaim_reent+0xb0>
 8008d78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d7a:	b143      	cbz	r3, 8008d8e <_reclaim_reent+0x22>
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d14a      	bne.n	8008e18 <_reclaim_reent+0xac>
 8008d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d84:	6819      	ldr	r1, [r3, #0]
 8008d86:	b111      	cbz	r1, 8008d8e <_reclaim_reent+0x22>
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7ff ff99 	bl	8008cc0 <_free_r>
 8008d8e:	6961      	ldr	r1, [r4, #20]
 8008d90:	b111      	cbz	r1, 8008d98 <_reclaim_reent+0x2c>
 8008d92:	4620      	mov	r0, r4
 8008d94:	f7ff ff94 	bl	8008cc0 <_free_r>
 8008d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d9a:	b111      	cbz	r1, 8008da2 <_reclaim_reent+0x36>
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f7ff ff8f 	bl	8008cc0 <_free_r>
 8008da2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008da4:	b111      	cbz	r1, 8008dac <_reclaim_reent+0x40>
 8008da6:	4620      	mov	r0, r4
 8008da8:	f7ff ff8a 	bl	8008cc0 <_free_r>
 8008dac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008dae:	b111      	cbz	r1, 8008db6 <_reclaim_reent+0x4a>
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7ff ff85 	bl	8008cc0 <_free_r>
 8008db6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008db8:	b111      	cbz	r1, 8008dc0 <_reclaim_reent+0x54>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f7ff ff80 	bl	8008cc0 <_free_r>
 8008dc0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008dc2:	b111      	cbz	r1, 8008dca <_reclaim_reent+0x5e>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f7ff ff7b 	bl	8008cc0 <_free_r>
 8008dca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008dcc:	b111      	cbz	r1, 8008dd4 <_reclaim_reent+0x68>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f7ff ff76 	bl	8008cc0 <_free_r>
 8008dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dd6:	b111      	cbz	r1, 8008dde <_reclaim_reent+0x72>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f7ff ff71 	bl	8008cc0 <_free_r>
 8008dde:	69a3      	ldr	r3, [r4, #24]
 8008de0:	b1e3      	cbz	r3, 8008e1c <_reclaim_reent+0xb0>
 8008de2:	4620      	mov	r0, r4
 8008de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008de6:	4798      	blx	r3
 8008de8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008dea:	b1b9      	cbz	r1, 8008e1c <_reclaim_reent+0xb0>
 8008dec:	4620      	mov	r0, r4
 8008dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008df2:	f7ff bfad 	b.w	8008d50 <cleanup_glue>
 8008df6:	5949      	ldr	r1, [r1, r5]
 8008df8:	b941      	cbnz	r1, 8008e0c <_reclaim_reent+0xa0>
 8008dfa:	3504      	adds	r5, #4
 8008dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dfe:	2d80      	cmp	r5, #128	; 0x80
 8008e00:	68d9      	ldr	r1, [r3, #12]
 8008e02:	d1f8      	bne.n	8008df6 <_reclaim_reent+0x8a>
 8008e04:	4620      	mov	r0, r4
 8008e06:	f7ff ff5b 	bl	8008cc0 <_free_r>
 8008e0a:	e7ba      	b.n	8008d82 <_reclaim_reent+0x16>
 8008e0c:	680e      	ldr	r6, [r1, #0]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f7ff ff56 	bl	8008cc0 <_free_r>
 8008e14:	4631      	mov	r1, r6
 8008e16:	e7ef      	b.n	8008df8 <_reclaim_reent+0x8c>
 8008e18:	2500      	movs	r5, #0
 8008e1a:	e7ef      	b.n	8008dfc <_reclaim_reent+0x90>
 8008e1c:	bd70      	pop	{r4, r5, r6, pc}
 8008e1e:	bf00      	nop
 8008e20:	2000009c 	.word	0x2000009c

08008e24 <__malloc_lock>:
 8008e24:	4801      	ldr	r0, [pc, #4]	; (8008e2c <__malloc_lock+0x8>)
 8008e26:	f7f8 b856 	b.w	8000ed6 <__retarget_lock_acquire_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	200003ec 	.word	0x200003ec

08008e30 <__malloc_unlock>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__malloc_unlock+0x8>)
 8008e32:	f7f8 b864 	b.w	8000efe <__retarget_lock_release_recursive>
 8008e36:	bf00      	nop
 8008e38:	200003ec 	.word	0x200003ec

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
